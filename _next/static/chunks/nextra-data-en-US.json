{"/documentation/api-framework":{"title":"API Framework Stub","data":{}},"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar.Advanced"}},"/documentation":{"title":"Documentation","data":{}},"/documentation/ui-framework":{"title":"UI Framework Stub","data":{}},"/":{"title":"Rockets - Rapid Enterprise Development Toolkit","data":{"":"Rockets\nRapid Enterprise Development Toolkit\nThe Rockets API library is a collection of NestJS modules that were created for the rapid development of enterpise level APIs.Through over 15 years of experience, we have made enterprise-level development more agile. Rockets is a combination of all these lessons, best practices and tools packaged and made available to you.","motivation#Motivation":"This project aims to help quickly build an enterprise-level core for projects that share the same business rules across web, mobile, server and desktop.","goals#Goals":"Provide solid stable foundational APIs to build enterprise applications.\nFocus on extensibility over customization.\nGreat development experience through well thought out APIs and documentation\nFlexibility over business rules.","architecture#Architecture":"Every effort has been made to develop Rockets with an abstract mindset, and introduce as\nfew opinions into the code base as possible (within reason).","api#API":"The Rockets API library is a collection of pluggable modules that enables you to rapidly stand up an API\nfor your enterprise project, and quickly extend and adapt it to your use case and requirements with zero boilerplate.\nDeveloped with the NestJS Framework\nDozens of pluggable open source modules\nUse with any community or custom NestJS module","web--desktop#Web & Desktop":"","react#React":"Abstract Logical Component Layer\nUI library developed using Material UI","flutter#Flutter":"* Flutter support is on the roadmap.\nAbstract Logical Component Layer\nUI library developed using Mix","ui-compatibility#UI Compatibility":"Bring your own logical components and use one of our UI libraries\nBring your own UI library and use our logical components\nMix in community or custom components.","mobile#Mobile":"We use and recommend:\nExpo\nReact Native\nFlutter"}},"/overview":{"title":"Philosophy","data":{}},"/reference/rockets-react/README":{"title":"Rockets React","data":{"":"Rapid Enterprise Development Toolkit\nA collection of React components that implement the Rockets React UI\nthat were created for the rapid development of enterpise level UIs.","contributing#Contributing":"This project is currently in alpha testing, however, feedback is highly\nappreciated and encouraged!Pull requests will be gratefully accepted in the very near future,\nonce we have finalized our Contributor License Agreement."}},"/reference/rockets-react/react-auth-provider/README":{"title":"@concepta/react-auth-provider","data":{"introduction#Introduction":"","overview-of-the-package#Overview of the Package":"@concepta/react-auth-provider is a React library designed to simplify the authentication process, used together with @concepta/react-data-provider. It provides an AuthProvider component and related hooks to manage user authentication, including login, logout, and token management.","features#Features":"Easy integration with existing React applications\nCustomizable authentication paths\nToken management (access and refresh tokens)\nHooks for accessing authentication context\nSupport for custom success and error handlers","getting-started#Getting Started":"","installation#Installation":"To install @concepta/react-auth-provider, run the following command:\nnpm install @concepta/react-auth-provider\nor with yarn:\nyarn add @concepta/react-auth-provider\nEnsure that @concepta/react-data-provider is properly configured before using the auth provider.","components#Components":"","authprovider#AuthProvider":"The AuthProvider component is the core of the @concepta/react-auth-provider package. It wraps your application and provides authentication context to its children.","props#Props":"children: The components that will have access to the authentication context.\nonSuccess: (Optional) A callback function executed upon successful login. Receives the access token as an argument.\nonError: (Optional) A callback function executed if an error occurs during login.","how-to-use-it#How to use it":"Wrap your app with the AuthProvider component\n<AuthProvider>\n  <App />\n</AuthProvider>","success--error-handling#Success / Error Handling":"Use the onSuccess prop to handle successful login events:\nUse the onError prop to handle errors during the login process:\n<AuthProvider\n  onSuccess={(data) =>\n    console.log('Logged in with accessToken and refreshToken:', data)\n  }\n  onError={(error) => console.error('Login Error:', error)}\n>\n  <App />\n</AuthProvider>","methods#Methods":"","dologin#doLogin":"Description: Initiates the login process using the provided login data. The loginData can be a LoginParams object or any custom object.\nParameters:\nloginData: An object containing optionals username, password, loginPath, and any other custom key-value pairs.\nThe loginPath will be used to fire the request to this path instead of the default /auth/signin\nExample Usage:\nconst loginData = { username: 'user', password: 'pass' };\ndoLogin(loginData);\nWith custom parameters\ninterface CustomLogin {\n    email: string\n    secret: string\n    rememberMe: boolean\n}\nconst customLoginData = { email: 'user@provider.com', secret: 'pass', rememberMe: true };\ndoLogin(customLoginData);\nYou can specify a custom login path in the loginData when calling doLogin:\nconst loginData = {\n  username: 'user',\n  password: 'pass',\n  loginPath: '/custom-login',\n};\ndoLogin(loginData);","dologout#doLogout":"Description: Clears the authentication tokens from local storage and performs logout actions.","state#State":"isPending (boolean): Status of the auth request.\nuser (object): Holds the user information.\nsetUser (object) => void: Function to update the user information.\naccessToken (string): Stores the access token.\nrefreshToken (string): Stores the refresh token.","user#user":"Description: Holds the current user information. Initially, it may be undefined until the user logs in.\nUsage: This state is used to store information about the authenticated user. It can be used in various parts of your application to display user-specific data or to conditionally render components based on the user's authentication status.\nAccessing User Information:\nconst { user } = useAuth();\nreturn (\n  <div>{user ? <p>Welcome, {user.username}</p> : <p>Please log in</p>}</div>\n);","setuser#setUser":"Description: Function to update the user state.\nUsage: This function is used to update the user state with new information, typically after a successful login or when fetching user details from a backend service.\nSetting User Information After Login:In the onSuccess callback, you can set the user information:\nconst onSuccess = (accessToken) => {\n  // Fetch user information from the backend using the access token\n  fetchUserDetails(accessToken).then((userDetails) => {\n    setUser(userDetails);\n  });\n};\n// Usage in AuthProvider\n<AuthProvider onSuccess={onSuccess}>\n  <App />\n</AuthProvider>;"}},"/reference/rockets-react/packages":{"title":"Rockets React","data":{"packages#Packages":"@concepta/react-auth-provider\n@concepta/react-data-provider\n@concepta/react-material-ui"}},"/reference/rockets-react/react-auth-provider/functions/AuthProvider":{"title":"Function: AuthProvider()","data":{"":"AuthProvider(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tPropsWithChildren<AuthProviderProps>","returns#Returns":"Element","defined-in#Defined in":"index.tsx:23"}},"/reference/rockets-react/react-auth-provider/globals":{"title":"@concepta/react-auth-provider","data":{"interfaces#Interfaces":"LoginParams","functions#Functions":"AuthProvider\nuseAuth"}},"/reference/rockets-react/react-auth-provider/interfaces/LoginParams":{"title":"Interface: LoginParams","data":{"indexable#Indexable":"[key: string]: string | number | boolean","properties#Properties":"Property\tType\tloginPath?\tstring\tpassword?\tstring\tusername?\tstring"}},"/reference/rockets-react/react-auth-provider/functions/useAuth":{"title":"Function: useAuth()","data":{"":"useAuth(): AuthProviderTypes","returns#Returns":"AuthProviderTypes","defined-in#Defined in":"index.tsx:21"}},"/reference/rockets-react/react-data-provider/README":{"title":"@concepta/react-data-provider","data":{"overview#Overview":"Rockets Data Access is a library for React applications that simplifies API interactions by integrating with Axios, managing authentication tokens and providing custom hooks for handling asynchronous requests and state. It enhances code maintainability and reliability with type safety, centralized configuration, and built-in token management, making it easier to handle HTTP requests and state management in a standardized way.","important#Important":"This module only helps you to handle basic requests on your application. There is no magic, you are still responsible for providing correct midlewares to auth requests, handle responses and errors","getting-started#Getting started":"","this-package-will-expose-the-following#This package will expose the following":"The ClientProvider context that manages the base URL and error handling for token refresh operations, ensuring consistent configuration and error management across the application.\nThe useDataProvider hook that provides a set of functions (post, get, put, patch, delete) to simplify making authenticated HTTP requests and handling responses.\nThe useQuery hook to manage the state and lifecycle of asynchronous functions, handling loading, success, and error states automatically.","important-1#Important":"You have to provide api information to dataProvider make the requests correctly\nYou have to provide utility funcions like getAccessToken, getNewToken (Refresh) so dataProvider can handle the requests correctly","installation--config#Installation & config":"First add the Data Provider package to your project. You can install it using npm or yarn:\nnpm install @concepta/react-data-provider\nyarn add @concepta/react-data-provider","using-the-clientprovider#Using the ClientProvider":"The ClientProvider component is essential for setting up the context that the Data Provider uses to manage the base URL and handle token refresh errors. It ensures that your application has a consistent configuration for making HTTP requests. Here's how you can use it in your application:","wrap-your-app-with-clientprovider#Wrap Your App with ClientProvider:":"To use the ClientProvider, wrap it around your application's root component. This is typically done in your index.tsx or App.tsx file. Provide the baseUrl and onRefreshTokenError props if needed.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ClientProvider } from '@concepta/react-data-provider';\nimport App from './App';\nReactDOM.render(\n  <ClientProvider\n    baseUrl=\"YOUR_API_URL\"\n    onRefreshTokenError={(error) => {\n      console.error('Token refresh error:', error);\n      // Handle token refresh error, e.g., redirect to login\n    }}\n  >\n    <App />\n  </ClientProvider>,\n  document.getElementById('root'),\n);\nbaseUrl (optional): The base URL for all HTTP requests. This can be an environment variable instead.\nonRefreshTokenError (optional): A callback function that handles errors occurring during the token refresh process.","baseurl-in-the-env-file#BaseUrl in the .env file":"If you don't provide a baseUrl prop to your ClientProvider, you have to add a variable to your .env file called NEXT_PUBLIC_API_URL.","env#.env":"NEXT_PUBLIC_API_URL=\"[YOUR API BASE URL]\nIf you apply both methods, Data Provider will use the url provided for the baseUrl prop in <ClientProvider>","api-request-methods-and-parameters-in-usedataprovider#API Request Methods and Parameters in useDataProvider":"The useDataProvider hook provides an easy way to make HTTP requests using various methods: POST, GET, PUT, PATCH, and DELETE. Each method accepts specific parameters that help configure the request. Below is a detailed explanation of each method and its parameters.","shared-parameters#Shared parameters":"All of the requests accepts these shared parameters:\nuri (string): The endpoint URI.\nheaders (Record<string, string>, optional): Additional headers to include in the request.\nqueryParams (Record<string, string | string[] | number | undefined>, optional): Query parameters to append to the URL.\nbody (TRequestBody, optional): The request payload.\nsignal (AbortSignal, optional): Signal to abort the request.","post--put--patch-methods#POST | PUT | PATCH Methods":"The post method is used to send data to the server.\nThe put method is used to update existing data on the server.\nThe patch method is used to partially update existing data on the server.\nBesides the shared parameters, they also accept:\nbody (TRequestBody, optional): The request payload.","the-usequery-hook#The useQuery Hook":"The useQuery hook is designed to handle asynchronous operations and manage the corresponding state, including loading, success, and error states. This section details how to use the useQuery hook, its parameters, and it's return.useQuery accepts two generic types: TQueryData and TError.","tquerydata--terror#TQueryData & TError":"TQueryData is a generic type parameter that specifies the expected shape of the data returned by the asynchronous function.\nTError is a generic type parameter that specifies the expected shape of the error object returned by the asynchronous function.","example-usage#Example Usage":"import React, { useEffect } from 'react';\nimport useDataProvider, { useQuery } from '@concepta/react-data-provider';\n// Define the type for the user data\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n// Define the type for the error object\ninterface FetchError {\n  message: string;\n  code: number;\n}\nconst UsersComponent = () => {\n  const { get } = useDataProvider();\n  // Define the async function using the \"get\" function from \"useDataProvider\"\n  const fetchUsers = get({ uri: '/users' }); // AsyncFunction\n  // Use useQuery hook with TQueryData specified as User[] and TError specified as FetchError\n  const { execute, status, isPending, data, error, refresh } = useQuery<\n    User[],\n    FetchError\n  >(fetchUsers, true, {\n    onError: (error) => console.error('Error fetching users:', error),\n    onSuccess: (data) => console.log('Fetched users:', data),\n    onFinish: (status) => console.log('Fetch finished with status:', status),\n  });\n  useEffect(() => {\n    execute();\n  }, [execute]);\n  return (\n    <div>\n      {isPending && <p>Loading...</p>}\n      {status === AsyncStatus.error && <p>Error: {error?.message}</p>}\n      {status === AsyncStatus.success && (\n        <ul>\n          {data?.map((user) => (\n            <li key={user.id}>\n              {user.name} - {user.email}\n            </li>\n          ))}\n        </ul>\n      )}\n      <button onClick={refresh}>Refresh</button>\n    </div>\n  );\n};\nexport default UsersComponent;","parameters#Parameters":"The useQuery hook accepts four parameters\nasyncFn (AsyncFunction): An asynchronous function that the useQuery hook will execute. This function returns a promise that resolves to the expected data type.\nimmediate (boolean): A boolean indicating whether the function should be executed immediately when the hook is called. Defaults to false.\noptions (object): An object containing various callback functions and data formatting options (more details below).\nargs (boolean): Optional arguments to be passed to the asynchronous function when it is executed.","the-options-parameters#The Options parameters:":"","onerror#onError":"A callback function that is called if the asynchronous function throws an error.\nonError: (error) => {\n  console.error('An error occurred:', error);\n};","onsuccess#onSuccess":"A callback function that is called when the asynchronous function successfully completes.\nonSuccess: (data) => {\n  console.log('Data fetched successfully:', data);\n};","onfinish#onFinish":"A callback function that is called when the asynchronous operation finishes, regardless of whether it was successful or resulted in an error.\nonFinish: (status) => {\n  console.log('Operation finished with status:', status);\n};","formatdata#formatData":"A function that formats the data returned by the asynchronous function before it is set in the state.\nformatData: (data) => {\n  return data.map((item) => ({\n    ...item,\n    formatted: true,\n  }));\n};","usequery-return#useQuery return":"The useQuery hook returns the following:\nexecute: A function that can be called to manually trigger the asynchronous function.\nstatus: The current status of the asynchronous operation. Can be idle, pending, success, or error.\nisPending: A boolean indicating whether the asynchronous operation is currently in progress.\ndata: The data returned by the asynchronous function, if the operation was successful.\nerror: The error thrown by the asynchronous function, if any.\nrefresh: A function that can be called to re-execute the asynchronous function with the same arguments.","example-usage-1#Example Usage":"Simple post with useDataProvider\nimport useDataProvider from '@concepta/react-data-provider';\nconst MyComponent = () => {\n  const { post } = useDataProvider();\n  const handleClick = () => {\n    post({\n      uri: '/todo-list',\n      body: { text: 'Buy tomatoes' },\n    });\n  };\n  return (\n    <div>\n      <Button variant=\"contained\" onClick={handleClick}>\n        Add tomatoes\n      </Button>\n    </div>\n  );\n};\nGet request with useQuery\nimport { useDataProvider } from '@concepta/react-data-provider';\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\nconst MyComponent = () => {\n  const { get } = useDataProvider();\n  const fetchUsers = () =>\n    get({\n      uri: `/user-list`,\n    });\n  const { execute, status, isPending, data, error, refresh } = useQuery<User[]>(\n    fetchUsers,\n    false, // immediate = false\n    {\n      onError: (error) => console.error('Error fetching users:', error),\n      onSuccess: (data) => console.log('Fetched users:', data),\n      onFinish: (status) => console.log('Fetch finished with status:', status),\n    },\n  );\n  return (\n    <div>\n      My Component\n      <button onClick={execute}>Get list</button>\n    </div>\n  );\n};"}},"/reference/rockets-react/react-data-provider/functions/ClientProvider":{"title":"Function: ClientProvider()","data":{"":"ClientProvider(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tProps","returns#Returns":"Element","defined-in#Defined in":"ClientProvider.tsx:28"}},"/reference/rockets-react/react-data-provider/functions/default":{"title":"Function: default()","data":{"":"default(): object","returns#Returns":"object\nName\tType\tdel\t<TQueryData>(requestParams) => Promise<TQueryData>\tget\t<TQueryData>(requestParams) => Promise<TQueryData>\tpatch\t<TRequestBody, TQueryData>(requestParams) => Promise<TQueryData>\tpost\t<TRequestBody, TQueryData>(requestParams) => Promise<TQueryData>\tput\t<TRequestBody, TQueryData>(requestParams) => Promise<TQueryData>","defined-in#Defined in":"useDataProvider.ts:22"}},"/reference/rockets-react/react-data-provider/globals":{"title":"@concepta/react-data-provider","data":{"functions#Functions":"ClientProvider\ndefault\nuseQuery"}},"/reference/rockets-react/react-data-provider/functions/useQuery":{"title":"Function: useQuery()","data":{"":"useQuery<TQueryData, TError>(asyncFn, immediate, options?, arg?): object","type-parameters#Type Parameters":"Type Parameter\tDefault type\tTQueryData\t-\tTError\tunknown","parameters#Parameters":"Parameter\tType\tDefault value\tasyncFn\tAsyncFunction\tundefined\timmediate\tboolean\tfalse\toptions?\tDataProviderRequestOptions<TQueryData, TError>\tundefined\targ?\tunknown\tundefined","returns#Returns":"object\nName\tType\tdata\tTQueryData\terror\tTError\texecute\t(_arg?) => Promise<void>\tisPending\tboolean\trefresh\t() => Promise<void>\tstatus\tAsyncStatus","defined-in#Defined in":"index.tsx:11"}},"/reference/rockets-react/react-material-ui/README":{"title":"@concepta/react-material-ui","data":{}},"/reference/rockets-react/react-material-ui/functions/AppBarDrawer":{"title":"Function: AppBarDrawer()","data":{"":"AppBarDrawer(props): Element\nThe list of the app routes rendered as a vertical navigation list on the Drawer component.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tDrawerProps\tDrawerProps","returns#Returns":"Element","see#See":"AppBar\nDrawer","defined-in#Defined in":"packages/react-material-ui/src/components/AppBar/AppBarDrawer.tsx:12"}},"/reference/rockets-react/react-material-ui/functions/AppBarMain":{"title":"Function: AppBarMain()","data":{"":"AppBarMain(boxProps): Element\nThe AppBarMain component serves as a wrapper for the navigation bar and page content.The AppBar.Main props extend from Material UI's Box\ncomponent props, so every prop is interchangeable between those two.","parameters#Parameters":"Parameter\tType\tDescription\tboxProps\tBoxProps<\"div\", object>\tMUI BoxProps","returns#Returns":"Element","see#See":"AppBar\nMUI Box Component","defined-in#Defined in":"packages/react-material-ui/src/components/AppBar/AppBarMain.tsx:14"}},"/reference/rockets-react/react-material-ui/functions/AppBarNav":{"title":"Function: AppBarNav()","data":{"":"AppBarNav(props): Element\nThe AppBarNav component renders the user info (Avatar and Name) and\na list of actions related to user and auth, such as Logout.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tNavbarProps\tNavbarProps","returns#Returns":"Element","see#See":"AppBar\nNavbar","defined-in#Defined in":"packages/react-material-ui/src/components/AppBar/AppBarNav.tsx:13"}},"/reference/rockets-react/react-material-ui/functions/AppBarRoot":{"title":"Function: AppBarRoot()","data":{"":"AppBarRoot(props): Element\nThe AppBarRoot component acts as a wrapper for the context API shared\nwith the other parts of the AppBar composition.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tAppBarRootProps\tComponent props.","returns#Returns":"Element","see#See":"AppBar","defined-in#Defined in":"packages/react-material-ui/src/components/AppBar/AppBarRoot.tsx:20"}},"/reference/rockets-react/react-material-ui/functions/AuthModule":{"title":"Function: AuthModule()","data":{"":"AuthModule(props): Element","parameters#Parameters":"Parameter\tType\tprops\tAuthModuleProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/modules/auth/index.tsx:45"}},"/reference/rockets-react/react-material-ui/functions/AutocompleteField":{"title":"Function: AutocompleteField()","data":{"":"AutocompleteField(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tAutocompleteFieldProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/AutocompleteField/AutocompleteField.tsx:34"}},"/reference/rockets-react/react-material-ui/functions/Avatar":{"title":"Function: Avatar()","data":{"":"Avatar(props): Element\nThe Avatar component is a UI element used to display a user's\nprofile picture or initials. It supports various features such as image\nsource handling, fallbacks (e.g., initials or default image),\nand customization options for styling and sizes.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tAvatarProps\tAvatar component props","returns#Returns":"Element","see#See":"Storybook - Avatar","example#Example":"<Avatar \n  src=\"https://example.com/nonexistent.jpg\"\n  alt=\"Annabel B\"\n  initials=\"AB\"\n  size={40}\n  backgroundColor=\"#789abc\"\n/>","defined-in#Defined in":"packages/react-material-ui/src/components/Avatar/Avatar.tsx:45"}},"/reference/rockets-react/react-material-ui/functions/Breadcrumbs":{"title":"Function: Breadcrumbs()","data":{"":"Breadcrumbs(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/Breadcrumbs/Breadcrumbs.tsx:17"}},"/reference/rockets-react/react-material-ui/functions/Checkbox":{"title":"Function: Checkbox()","data":{"":"Checkbox(props): Element","parameters#Parameters":"Parameter\tType\tprops\tCheckboxProps & Props","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/Checkbox/Checkbox.tsx:13"}},"/reference/rockets-react/react-material-ui/functions/ComposedTable":{"title":"Function: ComposedTable()","data":{"":"ComposedTable(props): Element","parameters#Parameters":"Parameter\tType\tprops\tComposedTableProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/ComposedTable/index.tsx:32"}},"/reference/rockets-react/react-material-ui/functions/CrudModule":{"title":"Function: CrudModule()","data":{"":"CrudModule(props): Element","parameters#Parameters":"Parameter\tType\tprops\tModuleProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/modules/crud/index.tsx:68"}},"/reference/rockets-react/react-material-ui/functions/Dialog":{"title":"Function: Dialog()","data":{"":"Dialog(props): Element\nThe Dialog component is a customizable modal dialog component. It integrates\nwith Material-UI's Dialog components and provides additional features like\nresponsive full-screen behavior and customizable titles and footers. It's\nprops extend from Material UI's Dialog component props, so every prop is interchangeable between those two.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tDialogProps\tDialog component props","returns#Returns":"Element","see#See":"MUI Dialog Component\nStorybook - Dialog","example#Example":"const [isOpen, setIsOpen] = useState(false);\n<Dialog\n  open={isOpen}\n  handleClose={() => setIsOpen(false)}\n  title=\"Dialog Title\"\n  dividers={true}\n  footer={<div>Footer Content</div>}\n>\n  <p>Dialog content goes here</p>\n</Dialog>","defined-in#Defined in":"packages/react-material-ui/src/components/Dialog/Dialog.tsx:53"}},"/reference/rockets-react/react-material-ui/functions/Drawer":{"title":"Function: Drawer()","data":{"":"Drawer(props): Element\nThe Drawer component is a sidebar with navigation items.\nIt supports various features such as collapsible sections,\ncustom toggles, and responsive design for mobile devices.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tDrawerProps\tDrawer component props","returns#Returns":"Element","see#See":"Storybook - Drawer","example#Example":"<Drawer\n  items={[\n    { id: 'item1', label: 'Item 1', onClick: () => console.log('Item 1 clicked') },\n    { id: 'item2', label: 'Item 2', onClick: () => console.log('Item 2 clicked') },\n  ]}\n  currentId=\"item1\"\n  logo=\"logo.png\"\n/>","defined-in#Defined in":"packages/react-material-ui/src/components/Drawer/Drawer.tsx:83"}},"/reference/rockets-react/react-material-ui/functions/Dropdown":{"title":"Function: Dropdown()","data":{"":"Dropdown(props): Element\nThe Dropdown component is a UI element that provides a dropdown menu\nwith customizable options. It supports horizontal or vertical toggle\ndirections, and customization options for each item, including text,\nicons, and their positions.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tDropdownProps\tDropdown component props","returns#Returns":"Element","see#See":"Storybook - Dropdown","example#Example":"<Dropdown\n  options={[\n    { key: '1', text: 'Option 1', onClick: () => console.log('Option 1 clicked') },\n    { key: '2', text: 'Option 2', icon: <SomeIcon />, iconPosition: 'right' },\n  ]}\n  toggleDirection=\"vertical\"\n/>","defined-in#Defined in":"packages/react-material-ui/src/components/Dropdown/Dropdown.tsx:63"}},"/reference/rockets-react/react-material-ui/functions/Filter":{"title":"Function: Filter()","data":{"":"Filter(props): Element","parameters#Parameters":"Parameter\tType\tprops\tFilterProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/Filter/Filter.tsx:208"}},"/reference/rockets-react/react-material-ui/functions/FormFieldSkeleton":{"title":"Function: FormFieldSkeleton()","data":{"":"FormFieldSkeleton(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tPropsWithChildren<FormFieldSkeletonProps>","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/FormFieldSkeleton/index.tsx:9"}},"/reference/rockets-react/react-material-ui/functions/FormTemplate":{"title":"Function: FormTemplate()","data":{"":"FormTemplate(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tFormTemplateProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/FormTemplate/FormTemplate.tsx:22"}},"/reference/rockets-react/react-material-ui/functions/HeaderAccount":{"title":"Function: HeaderAccount()","data":{"":"HeaderAccount(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tHeaderAccountProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/HeaderAccount/HeaderAccount.tsx:22"}},"/reference/rockets-react/react-material-ui/functions/Image":{"title":"Function: Image()","data":{"":"Image(props): Element\nThe Image component is a UI element used to display an image\nwith optional fluid resizing and error handling. It supports\nfeatures such as fallback to a default image on error and\ncustom event handlers for load and error events. It's props extend from\nMaterial UI's Box component props, so every prop is interchangeable between those two.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tImageProps\tImage component props","returns#Returns":"Element","see#See":"MUI Box Component\nStorybook - Image","example#Example":"<Image\n  src=\"https://example.com/nonexistent.jpg\"\n  alt=\"Example image\"\n  imgFluid={true}\n  defaultImage=\"https://example.com/default.jpg\"\n  onLoad={(event) => console.log('Image loaded', event)}\n  onError={(event) => console.log('Image failed to load', event)}\n/>","defined-in#Defined in":"packages/react-material-ui/src/components/Image/Image.tsx:46"}},"/reference/rockets-react/react-material-ui/functions/Link":{"title":"Function: Link()","data":{"":"Link(props): Element","parameters#Parameters":"Parameter\tType\tprops\tLinkProps<\"a\", object>","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/Link/Link.tsx:4"}},"/reference/rockets-react/react-material-ui/functions/Navbar":{"title":"Function: Navbar()","data":{"":"Navbar(props): Element\nThe Navbar component is a UI element used to display a navigation bar\nthat includes a menu icon for drawer toggling, notification icon, and\nuser account information.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tNavbarProps\tNavbar component props","returns#Returns":"Element","example#Example":"<Navbar\n  showNotifications={true}\n  notificationsNumber={5}\n  notificationsOnClick={handleNotificationsClick}\n  avatar=\"https://example.com/avatar.jpg\"\n  text=\"John Doe\"\n  subText=\"Administrator\"\n/>","defined-in#Defined in":"packages/react-material-ui/src/components/Navbar/Navbar.tsx:71"}},"/reference/rockets-react/react-material-ui/functions/Notifications":{"title":"Function: Notifications()","data":{"":"Notifications(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/Notifications/Notifications.tsx:11"}},"/reference/rockets-react/react-material-ui/functions/OrderableDropDown":{"title":"Function: OrderableDropDown()","data":{"":"OrderableDropDown(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/OrderableDropDown/OrderableDropDown.tsx:136"}},"/reference/rockets-react/react-material-ui/functions/RadioGroup":{"title":"Function: RadioGroup()","data":{"":"RadioGroup(props): Element","parameters#Parameters":"Parameter\tType\tprops\tCustomRadioGroupProps & RadioGroupProps & RadioProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/RadioGroup/RadioGroup.tsx:31"}},"/reference/rockets-react/react-material-ui/functions/OtpInput":{"title":"Function: OtpInput()","data":{"":"OtpInput(props): ReactElement<any, string | JSXElementConstructor<any>>\nNOTE: Exotic components are not callable.","parameters#Parameters":"Parameter\tType\tprops\tOmit<OtpInputProps, \"ref\"> & RefAttributes<HTMLDivElement>","returns#Returns":"ReactElement<any, string | JSXElementConstructor<any>>","defined-in#Defined in":"packages/react-material-ui/src/components/OtpInput/index.tsx:54"}},"/reference/rockets-react/react-material-ui/functions/SearchField":{"title":"Function: SearchField()","data":{"":"SearchField(props): Element\nThe SearchField component is a custom text field with additional functionality\nfor debounced search input and clearable input field. It supports customization\nof the search icon placement and integrates with Material-UI components.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tSearchFieldProps\tSearchField component props","returns#Returns":"Element","see#See":"Storybook - SearchField","example#Example":"<SearchField\n  searchIconPlacement=\"start\"\n  defaultValue=\"Initial search\"\n  wait={300}\n  onDebouncedSearchChange={(value) => console.log(value)}\n  onClear={() => console.log('Cleared')}\n  placeholder=\"Search something...\"\n/>","defined-in#Defined in":"packages/react-material-ui/src/components/SearchField/SearchField.tsx:65"}},"/reference/rockets-react/react-material-ui/functions/Select":{"title":"Function: Select()","data":{"":"Select(props): Element","parameters#Parameters":"Parameter\tType\tprops\tProps & FilledTextFieldProps | OutlinedTextFieldProps | StandardTextFieldProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/Select/Select.tsx:25"}},"/reference/rockets-react/react-material-ui/functions/SelectField":{"title":"Function: SelectField()","data":{"":"SelectField(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tSelectFieldProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/SelectField/SelectField.tsx:38"}},"/reference/rockets-react/react-material-ui/functions/SideModal":{"title":"Function: SideModal()","data":{"":"SideModal(props): Element\nThe SideModal component is a slide-out drawer used for displaying\nadditional content without navigating away from the current page. It\nsupports customization for styling, positioning, and content.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tSideModalProps\tSideModal component props","returns#Returns":"Element","see#See":"Storybook - SideModal","example#Example":"<SideModal\n  open={true}\n  toggleDrawer={() => setOpen(false)}\n  title=\"My Modal\"\n  backgroundColor=\"#fff\"\n  headerBackgroundColor=\"#3f51b5\"\n  closeIconColor=\"#f50057\"\n  width=\"400px\"\n  anchor=\"left\"\n>\n  <div>Content goes here</div>\n</SideModal>","defined-in#Defined in":"packages/react-material-ui/src/components/SideModal/SideModal.tsx:64"}},"/reference/rockets-react/react-material-ui/functions/SimpleForm":{"title":"Function: SimpleForm()","data":{"":"SimpleForm(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/SimpleForm/SimpleForm.tsx:79"}},"/reference/rockets-react/react-material-ui/functions/Switch":{"title":"Function: Switch()","data":{"":"Switch(props): Element","parameters#Parameters":"Parameter\tType\tprops\tProps & SwitchProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/components/Switch/Switch.tsx:13"}},"/reference/rockets-react/react-material-ui/functions/Text":{"title":"Function: Text()","data":{"":"Text(typographyProps): Element\nThe Text component is a wrapper around the Material-UI Typography component\nwith a default fontWeight of 300. It's props extend from Material UI's Typography\ncomponent props, so every prop is interchangeable between those two.","parameters#Parameters":"Parameter\tType\tDescription\ttypographyProps\tTypographyProps<\"span\", object>\tMUI TypographyProps","returns#Returns":"Element","see#See":"MUI Typography Component\nStorybook - Text","example#Example":"<Text variant=\"h6\" fontWeight=\"400\" fontSize='18px'>\n  Sample Text\n</Text>","defined-in#Defined in":"packages/react-material-ui/src/components/Text/Text.tsx:21"}},"/reference/rockets-react/react-material-ui/functions/UsersModule":{"title":"Function: UsersModule()","data":{"":"UsersModule(__namedParameters): Element","parameters#Parameters":"Parameter\tType\t__namedParameters\tUsersModuleProps","returns#Returns":"Element","defined-in#Defined in":"packages/react-material-ui/src/modules/users/index.tsx:14"}},"/reference/rockets-react/react-material-ui/functions/TextField":{"title":"Function: TextField()","data":{"":"TextField(props): Element\nTextField component for inputting text with support for password strength\nevaluation and visibility toggle. Integrates with MUI TextField and supports\ncustom rendering for password strength and rules. It's props extend from Material UI's TextField\ncomponent props, so every prop is interchangeable between those two.","parameters#Parameters":"Parameter\tType\tDescription\tprops\tTextFieldProps\tProperties to customize the TextField component","returns#Returns":"Element","see#See":"Storybook - TextField","example#Example":"<TextField\n  label=\"Password\"\n  type=\"password\"\n  passwordStrengthConfig={{\n    hideStrengthBar: false,\n    hideRulesText: false,\n  }}\n/>","defined-in#Defined in":"packages/react-material-ui/src/components/TextField/TextField.tsx:107"}},"/reference/rockets-react/react-material-ui/functions/descendingComparator":{"title":"Function: descendingComparator()","data":{"":"descendingComparator<T>(a, b, orderBy): -1 | 0 | 1","type-parameters#Type Parameters":"Type Parameter\tT","parameters#Parameters":"Parameter\tType\tDescription\ta\tT\tComparator A\tb\tT\tComparator B\torderBy\tkeyof T\tOrder By","returns#Returns":"-1 | 0 | 1","defined-in#Defined in":"packages/react-material-ui/src/components/Table/utils/descendingComparator.ts:6"}},"/reference/rockets-react/react-material-ui/functions/createTableStyles":{"title":"Function: createTableStyles()","data":{"":"createTableStyles<T>(styles): T","type-parameters#Type Parameters":"Type Parameter\tT extends StyleDefinition","parameters#Parameters":"Parameter\tType\tDescription\tstyles\tT\tAn object containing style definitions.","returns#Returns":"TThe generated style object with keys and corresponding style definitions.","defined-in#Defined in":"packages/react-material-ui/src/components/Table/utils/createTableStyles.ts:13"}},"/reference/rockets-react/react-material-ui/functions/getComparator":{"title":"Function: getComparator()","data":{"":"getComparator<Key>(order, orderBy): (a, b) => number","type-parameters#Type Parameters":"Type Parameter\tKey extends string | number | symbol","parameters#Parameters":"Parameter\tType\tDescription\torder\tOrder\tOrder\torderBy\tKey\tOrder by","returns#Returns":"Function","parameters-1#Parameters":"Parameter\tType\ta\t{ [key in Key]: number | string }\tb\t{ [key in Key]: number | string }","returns-1#Returns":"number","defined-in#Defined in":"packages/react-material-ui/src/components/Table/utils/getComparator.ts:8"}},"/reference/rockets-react/react-material-ui/functions/sortTable":{"title":"Function: sortTable()","data":{"":"sortTable(a, b, order, orderBy): number","parameters#Parameters":"Parameter\tType\ta\tRowProps\tb\tRowProps\torder\tOrder\torderBy\tstring","returns#Returns":"number","defined-in#Defined in":"packages/react-material-ui/src/components/Table/utils/sortTable.ts:25"}},"/reference/rockets-react/react-material-ui/globals":{"title":"@concepta/react-material-ui","data":{"interfaces#Interfaces":"ListItem","type-aliases#Type Aliases":"AppBarRootProps\nAvatarProps\nDialogProps\nDrawerItemProps\nDrawerProps\nDropdownItem\nDropdownProps\nFilterCommon\nFilterType\nFilterVariant\nHeaderAccountProps\nImageProps\nNavbarProps\nSchemaFormProps\nSideModalProps\nTextFieldProps\nTextFilter","variables#Variables":"AppBar\nSchemaForm\nTable","functions#Functions":"AppBarDrawer\nAppBarMain\nAppBarNav\nAppBarRoot\nAuthModule\nAutocompleteField\nAvatar\nBreadcrumbs\nCheckbox\nComposedTable\nCrudModule\nDialog\nDrawer\nDropdown\nFilter\nFormFieldSkeleton\nFormTemplate\nHeaderAccount\nImage\nLink\nNavbar\nNotifications\nOrderableDropDown\nOtpInput\nRadioGroup\nSearchField\nSelect\nSelectField\nSideModal\nSimpleForm\nSwitch\nText\nTextField\nUsersModule\ncreateTableStyles\ndescendingComparator\ngetComparator\nsortTable\nstableSort"}},"/reference/rockets-react/react-material-ui/functions/stableSort":{"title":"Function: stableSort()","data":{"":"stableSort<T>(array, comparator): T[]","type-parameters#Type Parameters":"Type Parameter\tT","parameters#Parameters":"Parameter\tType\tDescription\tarray\treadonly T[]\tThe Array being sorted\tcomparator\t(a, b) => number\tComparator callback","returns#Returns":"T[]","defined-in#Defined in":"packages/react-material-ui/src/components/Table/utils/stableSort.ts:5"}},"/reference/rockets-react/react-material-ui/interfaces/ListItem":{"title":"Interface: ListItem","data":{"indexable#Indexable":"[key: string]: unknown","properties#Properties":"Property\tType\thide?\tboolean\tid\tstring\tlabel\tstring\tresetFilters?\t() => void"}},"/reference/rockets-react/react-material-ui/type-aliases/AppBarRootProps":{"title":"Type Alias: AppBarRootProps","data":{"":"AppBarRootProps: object\nAppBarRoot component props.","type-declaration#Type declaration":"Name\tType\tDescription\tchildren\tReactNode\tChild nodes rendered inside the Main component","defined-in#Defined in":"packages/react-material-ui/src/components/AppBar/AppBarRoot.tsx:8"}},"/reference/rockets-react/react-material-ui/type-aliases/AvatarProps":{"title":"Type Alias: AvatarProps","data":{"":"AvatarProps: object\nAvatar component props.","type-declaration#Type declaration":"Name\tType\tDescription\talt\tstring\tAlternate attribute text\tbackgroundColor\tstring\tBackground color name or code\tinitials\tstring\tOptional and/or fallback initials to display with the avatar\tonClick\t() => void\tCustom onClick handler\tsize\tnumber\tSize in pixels\tsrc\tstring\tPath or URL to image file","defined-in#Defined in":"packages/react-material-ui/src/components/Avatar/Avatar.tsx:9"}},"/reference/rockets-react/react-material-ui/type-aliases/DrawerItemProps":{"title":"Type Alias: DrawerItemProps","data":{"":"DrawerItemProps: object & DrawerButtonProps","type-declaration#Type declaration":"Name\tType\tcomponent\tReact.ReactNode | (active?, collapsed?) => React.ReactNode\ticon\tReact.ReactNode | (active) => React.ReactNode\tid\tstring\tonClick\t() => void\ttemporary\tboolean\ttext\tstring\ttextProps\tTextProps","defined-in#Defined in":"packages/react-material-ui/src/components/Drawer/DrawerItem.tsx:13"}},"/reference/rockets-react/react-material-ui/type-aliases/DialogProps":{"title":"Type Alias: DialogProps","data":{"":"DialogProps: MuiDialogProps & object\nDialog component props.","type-declaration#Type declaration":"Name\tType\tDescription\tchildren\tReact.ReactNode\tContent to be displayed inside the dialog\tdividers\tboolean\tWhether to display dividers in the dialog content\tfooter\tReact.ReactNode\tFooter content to be displayed inside the dialog\thandleClose\t() => void\tFunction to handle closing of the dialog\topen\tboolean\tWhether the dialog is open\ttitle\tstring\tOptional title of the dialog","defined-in#Defined in":"packages/react-material-ui/src/components/Dialog/Dialog.tsx:12"}},"/reference/rockets-react/react-material-ui/type-aliases/DrawerProps":{"title":"Type Alias: DrawerProps","data":{"":"DrawerProps: object\nDrawer component props.","type-declaration#Type declaration":"Name\tType\tDescription\tactiveIconColor\tDrawerItemProps[\"activeIconColor\"]\tColor of the active drawer item icons\tbackgroundColor\tStyledDrawerProps[\"backgroundColor\"]\tBackground color of the drawer\tbuttonSx\tSxProps<Theme>\tCustom styles for drawer buttons, following the sx pattern.\tcollapsed\tboolean\tWhether the drawer is collapsed\tcollapsedWidth\tStyledDrawerProps[\"collapsedWidth\"]\tWidth of the drawer when collapsed\tcollapsible\tboolean\tWhether the drawer is collapsible\tcollapsibleIcon\tReactNode | (collapsed?) => ReactNode\tIcon to use for the collapsible button\tcollapsibleIconBgColor\tstring\tBackground color of the collapsible icon\tcollapsibleIconColor\tstring\tColor of the collapsible icon\tcurrentId\tstring\tID of the currently active item, changing the menu item to active when the page selected corresponds to the path name.\tcustomToggle\t(toggleDrawer, collapsed?) => ReactNode\tCustom node that can be rendered on the bottom of the Drawer, serving as toggle for expanded/collapsed state.\texpandedWidth\tStyledDrawerProps[\"expandedWidth\"]\tWidth of the drawer when expanded\thorizontal\tboolean\tWhether the drawer items should be displayed horizontally\ticonColor\tDrawerItemProps[\"iconColor\"]\tColor of the drawer item icons\titems\tDrawerItemProps[]\tArray of items to display in the drawer\tlogo\tstring | ReactNode | (collapsed?) => ReactNode\tLogo to display in the drawer header\tmobileIsOpen\tboolean\tWhether the drawer is open on mobile devices\tonCollapsedChange\t(collapsed) => void\tCallback function to handle changes to the collapsed state\tonMobileClose\t() => void\tCallback function to handle closing the drawer on mobile devices\tsx\tStyledDrawerProps[\"sx\"]\tCustom styles for the drawer, following the sx\ttextProps\tTextProps\tProps for text elements inside the drawer","defined-in#Defined in":"packages/react-material-ui/src/components/Drawer/Drawer.tsx:17"}},"/reference/rockets-react/react-material-ui/type-aliases/DropdownItem":{"title":"Type Alias: DropdownItem","data":{"":"DropdownItem: object\nDropdown item type definition.","type-declaration#Type declaration":"Name\tType\tDescription\ticon\tReactNode\tIcon to display alongside the dropdown item\ticonPosition\t\"left\" | \"right\"\tPosition of the icon relative to the text (left or right)\tkey\tstring\tUnique key for the dropdown item\tonClick\t() => void\tCustom onClick handler for the dropdown item\ttext\tstring\tText to display for the dropdown item","defined-in#Defined in":"packages/react-material-ui/src/components/Dropdown/Dropdown.tsx:17"}},"/reference/rockets-react/react-material-ui/type-aliases/DropdownProps":{"title":"Type Alias: DropdownProps","data":{"":"DropdownProps: object\nDropdown component props.","type-declaration#Type declaration":"Name\tType\tDescription\toptions\tDropdownItem[]\tList of dropdown items\ttextProps\tTextProps\tProps to pass to the Text component\ttoggleDirection\t\"horizontal\" | \"vertical\"\tDirection of the toggle button (horizontal or vertical)","defined-in#Defined in":"packages/react-material-ui/src/components/Dropdown/Dropdown.tsx:33"}},"/reference/rockets-react/react-material-ui/type-aliases/FilterCommon":{"title":"Type Alias: FilterCommon","data":{"":"FilterCommon: object\nCommon properties for all filters.","type-declaration#Type declaration":"Name\tType\tcolumns\tnumber\thide\tboolean\tid\tstring\tisLoading\tboolean\tlabel\tstring\tshowOnMount\tboolean\tsize\tSearchFieldProps[\"size\"] | SelectFieldProps[\"size\"]","defined-in#Defined in":"packages/react-material-ui/src/components/Filter/Filter.tsx:32"}},"/reference/rockets-react/react-material-ui/type-aliases/FilterType":{"title":"Type Alias: FilterType","data":{"":"FilterType: TextFilter | DateFilter | AutocompleteFilter | SelectFilter\nType for filter properties that can be text, date, autocomplete, or select.","defined-in#Defined in":"packages/react-material-ui/src/components/Filter/Filter.tsx:96"}},"/reference/rockets-react/react-material-ui/type-aliases/FilterVariant":{"title":"Type Alias: FilterVariant","data":{"":"FilterVariant: \"text\" | \"autocomplete\" | \"select\" | \"date\"\nType of filter variants available.","defined-in#Defined in":"packages/react-material-ui/src/components/Filter/Filter.tsx:27"}},"/reference/rockets-react/react-material-ui/type-aliases/HeaderAccountProps":{"title":"Type Alias: HeaderAccountProps","data":{"":"HeaderAccountProps: object","type-declaration#Type declaration":"Name\tType\tavatar\tstring\tavatarSize\tnumber\ticonColor\tstring\tmenuOptions\t(handleClose) => ReactNode\tonClick\t() => void\tsubText\tstring\tsubTextProps\tTextProps\ttext\tstring\ttextProps\tTextProps","defined-in#Defined in":"packages/react-material-ui/src/components/HeaderAccount/HeaderAccount.tsx:10"}},"/reference/rockets-react/react-material-ui/type-aliases/ImageProps":{"title":"Type Alias: ImageProps","data":{"":"ImageProps: BoxProps & object\nImage component props.","type-declaration#Type declaration":"Name\tType\tDescription\talt\tstring\tAlternate attribute text\tdefaultImage\tstring\tPath or URL to a fallback image\timgFluid\tboolean\tIf true, the image will be displayed as a fluid element, adapting to the size of its container\tonError\t(event) => void\tEvent handler for the image error event\tonLoad\t(event) => void\tEvent handler for the image load event\tsrc\tstring\tPath or URL to image file","defined-in#Defined in":"packages/react-material-ui/src/components/Image/Image.tsx:7"}},"/reference/rockets-react/react-material-ui/type-aliases/SchemaFormProps":{"title":"Type Alias: SchemaFormProps","data":{"":"SchemaFormProps: Omit<FormProps, \"schema\" | \"validator\"> & object\nSchemaForm component props.","type-declaration#Type declaration":"Name\tType\tDescription\tadvancedProperties\tRecord<string, AdvancedProperty>\tAdditional schema for fields that are out of the default string, number, integer, object, array, boolean and null set for the form schema. The field set for advanced properties contain the same types as the default one, but add other fields such as email, password, select, radio, checkbox, checkboxes and switch.\tadvancedPropertiesMapper\tAdvancedPropertiesMapper\tCustom mapper for the advanced properties. The default mapper for the form component is described in the example below. The rest of the SchemaForm props extend from react-jsonschema-form. Example { \"string\": \"string\", \"email\": \"string\", \"password\": \"string\", \"array\": \"array\", \"select\": \"string\", \"radio\": \"string\", \"checkbox\": \"boolean\", \"checkboxes\": \"array\", \"switch\": \"boolean\" }\tbuttonComponent\tComponentType<SubmitButtonProps<any, RJSFSchema, any>>\tCustom component for the form submit button\tbuttonTitle\tstring\tTitle for the form submit button\tschema\tRJSFSchema\tObject that defines the structure of the form, containing information about field names, properties and formatting. Comprehensive guide available at the schema docs.\ttitle\tReactNode\tThe title of the form, usually displayed on top of the fields\tvalidator\tFormProps[\"validator\"]\tValidation helper for the form structure. @rjsf/validator-ajvx provided by ajv, is generally used for this purpose. It is implemented on the form via the HTML5 Validation","defined-in#Defined in":"packages/react-material-ui/src/components/SchemaForm/SchemaForm.tsx:22"}},"/reference/rockets-react/react-material-ui/type-aliases/NavbarProps":{"title":"Type Alias: NavbarProps","data":{"":"NavbarProps: object\nProperties for the Navbar component.","type-declaration#Type declaration":"Name\tType\tDescription\tavatar\tstring\tSource of the user profile picture.\tdrawerToggle\t() => void\tHandler for click events on the Menu button.\theaderMenuOptions\tHeaderAccountProps[\"menuOptions\"]\tList of menu actions.\tnotificationsNumber\tnumber\tIndicator for notifications counter.\tnotificationsOnClick\t() => void\tHandler for click events on the notifications indicator.\tshowNotifications\tboolean\tFlag for showing or hiding the notifications indicator.\tsubText\tstring\tString rendered below the text content.\tsx\tSxProps<Theme>\tObject or array containing custom styles, following the sx pattern. See https://mui.com/system/getting-started/the-sx-prop/\ttext\tstring\tString that can contain the current user name or username.","defined-in#Defined in":"packages/react-material-ui/src/components/Navbar/Navbar.tsx:13"}},"/reference/rockets-react/react-material-ui/type-aliases/SideModalProps":{"title":"Type Alias: SideModalProps","data":{"":"SideModalProps: object\nSideModal component props.","type-declaration#Type declaration":"Name\tType\tDescription\tanchor\tDrawerProps[\"anchor\"]\tSide of the screen from which the drawer will appear (\"left\"\t\"top\"\t\"right\"\t\"bottom\")\tbackgroundColor\tstring\tBackground color of the drawer\tchildren\tReactNode\tContent to display inside the drawer\tcloseIconColor\tstring\tColor of the close icon\theaderBackgroundColor\tstring\tBackground color of the header\topen\tboolean\tWhether the drawer is open\tsx\tSxProps<Theme>\tCustom styles to apply to the drawer\ttextProps\tTextProps\tProps to pass to the Text component\ttitle\tstring\tOptional title text to display in the header\ttoggleDrawer\t() => void\tFunction to toggle the drawer open/close state\twidth\tstring | number\tWidth of the drawer","defined-in#Defined in":"packages/react-material-ui/src/components/SideModal/SideModal.tsx:14"}},"/reference/rockets-react/react-material-ui/type-aliases/TextFieldProps":{"title":"Type Alias: TextFieldProps","data":{"":"TextFieldProps: MuiTextFieldProps & object\nProps for the TextField component.","type-declaration#Type declaration":"Name\tType\tDescription\tcontainerProps\tBoxProps\tProps for the container Box\tlabelProps\tTypographyProps\tProps for the label Typography\toptions\tTextAreaProps\tOptions for the TextArea\tpasswordStrengthConfig\tPasswordStrengthConfig\tConfiguration for password strength display","defined-in#Defined in":"packages/react-material-ui/src/components/TextField/TextField.tsx:73"}},"/reference/rockets-react/react-material-ui/type-aliases/TextFilter":{"title":"Type Alias: TextFilter","data":{"":"TextFilter: object & FilterCommon\nProperties for the text filter.","type-declaration#Type declaration":"Name\tType\tdefaultValue\tstring\thelperText\tstring\tonChange\t(value) => void\tonDebouncedSearchChange\t(value) => void\tplaceholder\tstring\tsearchIconPlacement\tSearchFieldProps[\"searchIconPlacement\"]\ttype\t\"text\"\tvalue\tstring","defined-in#Defined in":"packages/react-material-ui/src/components/Filter/Filter.tsx:45"}},"/reference/rockets-react/react-material-ui/variables/AppBar":{"title":"Variable: AppBar","data":{"":"const AppBar: object\nThe AppBar component is a wrapper for the page content, that renders a\nlateral menu containing the list of pages rendered by the app and a top\nnavigation bar containing information related to the current user with a\ndropdown menu with a list of actions.It is composed by the AppBarRoot, AppBarDrawer,\nAppBarMain and AppBarNav components.A sandbox of this componet is available on our\nAppBar Story","type-declaration#Type declaration":"Name\tType\tDefault value\tDrawer\t(props) => Element\tAppBarDrawer\tMain\t(boxProps) => Element\tAppBarMain\tNav\t(props) => Element\tAppBarNav\tRoot\t(props) => Element\tAppBarRoot","example#Example":"import { AppBar } from '@concepta/react-material-ui';\n<AppBar.Root key={pathname}>\n  <AppBar.Drawer\n    currentId={pathname}\n    logo=\"/logo.svg\"\n    collapsable\n    items={[\n      {\n        id: '/users',\n        icon: <GroupsOutlinedIcon />,\n        text: 'Users',\n        onClick: () => router.push('/users'),\n      },\n      {\n        id: '/profile',\n        icon: <PersonOutlinedIcon />,\n        text: 'Profile',\n        onClick: () => router.push('/profile'),\n      },\n    ]}\n    expandedWidth={120}\n  />\n  <AppBar.Main>\n    <AppBar.Nav\n      text={user.fullName}\n      avatar=\"https://source.unsplash.com/random\"\n      headerMenuOptions={(handleClose) => (\n        <MenuItem\n          onClick={() => {\n            handleClose();\n            doLogout();\n            router.replace('/login');\n          }}\n        >\n          Sign Out\n        </MenuItem>\n      )}\n    />\n    <Container>{children}</Container>\n  </AppBar.Main>\n</AppBar.Root>;","see#See":"AppBarMain\nAppBarDrawer\nAppBarNav\nAppBarRoot\nStorybook - AppBar","defined-in#Defined in":"packages/react-material-ui/src/components/AppBar/index.ts:71"}},"/reference/rockets-react/react-material-ui/variables/SchemaForm":{"title":"Variable: SchemaForm","data":{"":"const SchemaForm: object\nSchemaForm component is a compound component that includes Form, Title, and Button.\nIt serves as an entry point for using the customized form components.","type-declaration#Type declaration":"Name\tType\tButton\t(__namedParameters) => Element\tForm\t(props) => Element\tTitle\t(__namedParameters) => Element","defined-in#Defined in":"packages/react-material-ui/src/components/SchemaForm/SchemaForm.tsx:217"}},"/reference/rockets-react/react-material-ui/variables/Table":{"title":"Variable: Table","data":{"":"const Table: object","type-declaration#Type declaration":"Name\tType\tDefault value\tBodyCell\t(props) => Element\tTableBodyCells\tBodyCheckboxes\t(props) => Element\tTableBodyCheckbox\tBodyOption\t(props) => Element\tTableBodyOption\tBodyRow\t(props) => Element\tTableBodyRow\tBodyRows\t(props) => Element\tTableBodyRows\tCellSkeleton\t() => Element\tTableCellSkeleton\tColumnOrderable\t(__namedParameters) => Element\tTableColumnOrderable\tHeaderCell\t(props) => Element\tTableHeaderCell\tHeaderCells\t(props) => Element\tTableHeaderCells\tHeaderCheckbox\t(props) => Element\tTableHeaderCheckbox\tHeaderOption\t() => Element\tTableHeaderOption\tPagination\t(props) => Element\tTablePagination\tPaginationNumbers\t(props) => Element\tTablePaginationNumbers\tRoot\t(props) => Element\tTableRoot\tRowSkeleton\t() => Element\tTableRowSkeleton\tTable\t(props) => Element\t-","defined-in#Defined in":"packages/react-material-ui/src/components/Table/index.ts:20"}},"/reference/rockets/README":{"title":"Rockets","data":{"project#Project":"Rapid Enterprise Development Toolkit\nA collection of NestJS modules\nthat were created for the rapid development of enterpise level APIs.All reasonable efforts have been made to provide loosely coupled interfaces,\noverridable services, and sane default implementations.","contributing#Contributing":"This project is currently in alpha testing, however, feedback is highly\nappreciated and encouraged!Pull requests will be gratefully accepted in the very near future,\nonce we have finalized our Contributor License Agreement.","modules#Modules":"Module\tSummary\tnestjs-access-control\tAdvanced access control guard for NestJS with optional per-request filtering.\tnestjs-auth-github\tAuthenticate requests using GitHub oAuth2 sign-on.\tnestjs-auth-jwt\tAuthenticate requests using JWT tokens passed via the request (headers, cookies, body, query, etc).\tnestjs-auth-local\tAuthenticate requests using username/email and password against a local or remote data source.\tnestjs-auth-refresh\tAuthenticate requests using JWT refresh tokens passed via the request (headers, cookies, body, query, etc).\tnestjs-authentication\tAuthenticate requests using one or more strategies (local, jwt, etc).\tnestjs-common\tThe common module is a dependency of all Rockets modules.\tnestjs-crud\tExtremely powerful CRUD module that is an extension/wrapper of the popular @nestjsx/crud module.\tnestjs-email\tEmail deliver module that supports most popular transports, as well as template based email bodies using handlebars syntax.\tnestjs-event\tAdvanced class based event dispatch/listener module.\tnestjs-exception\tProvide exception handling/normalization and error code mapping.\tnestjs-jwt\tA flexible JWT utilities module for signing and validating tokens.\tnestjs-logger\tDrop-in replacement for the core NestJS logger that provides additonal support for pushing log data to external log providers.\tnestjs-password\tA flexible Password utilities module that provides services for password strength, creation and storage.\tnestjs-swagger-ui\tExpose your OpenApi spec on your API using the powerful Swagger UI interface.\tnestjs-typeorm-ext\tExtension of the NestJS TypeOrm module that allows your dynamic modules to accept drop-in replacements of custom entities and repositories.\tnestjs-user\tA module for managing a basic User entity, including controller with full CRUD, DTOs, sample data factory and seeder."}},"/reference/rockets/nestjs-access-control/classes/AccessControlContext":{"title":"Class: AccessControlContext","data":{"implements#Implements":"AccessControlContextInterface","constructors#Constructors":"","new-accesscontrolcontext#new AccessControlContext()":"new AccessControlContext(ctxArgs): AccessControlContext","parameters#Parameters":"Parameter\tType\tctxArgs\tAccessControlContextArgsInterface","returns#Returns":"AccessControlContext","defined-in#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:7","methods#Methods":"","getaccesscontrol#getAccessControl()":"getAccessControl(): AccessControl","returns-1#Returns":"AccessControl","implementation-of#Implementation of":"AccessControlContextInterface.getAccessControl","defined-in-1#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:36","getexecutioncontext#getExecutionContext()":"getExecutionContext(): ExecutionContext","returns-2#Returns":"ExecutionContext","implementation-of-1#Implementation of":"AccessControlContextInterface.getExecutionContext","defined-in-2#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:40","getprop#getProp()":"protected getProp(obj, prop): unknown","parameters-1#Parameters":"Parameter\tType\tobj\tunknown\tprop\tstring","returns-3#Returns":"unknown","defined-in-3#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:18","getquery#getQuery()":"getQuery(): IQueryInfo","returns-4#Returns":"IQueryInfo","implementation-of-2#Implementation of":"AccessControlContextInterface.getQuery","defined-in-4#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:32","getrequest#getRequest()":"getRequest(property?): unknown","parameters-2#Parameters":"Parameter\tType\tproperty?\tstring","returns-5#Returns":"unknown","implementation-of-3#Implementation of":"AccessControlContextInterface.getRequest","defined-in-5#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:22","getuser#getUser()":"getUser(): unknown","returns-6#Returns":"unknown","implementation-of-4#Implementation of":"AccessControlContextInterface.getUser","defined-in-6#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:28","hasprop#hasProp()":"protected hasProp<K>(obj, key): obj is Record<K, unknown>","type-parameters#Type Parameters":"Type Parameter\tK extends string","parameters-3#Parameters":"Parameter\tType\tobj\tunknown\tkey\tK","returns-7#Returns":"obj is Record<K, unknown>","defined-in-7#Defined in":"packages/nestjs-access-control/src/access-control.context.ts:9"}},"/reference/rockets/nestjs-access-control/classes/AccessControlGuard":{"title":"Class: AccessControlGuard","data":{"implements#Implements":"CanActivate","constructors#Constructors":"","new-accesscontrolguard#new AccessControlGuard()":"new AccessControlGuard(settings, service, reflector, moduleRef): AccessControlGuard","parameters#Parameters":"Parameter\tType\tsettings\tAccessControlSettingsInterface\tservice\tAccessControlServiceInterface\treflector\tReflector\tmoduleRef\tModuleRef","returns#Returns":"AccessControlGuard","defined-in#Defined in":"packages/nestjs-access-control/src/access-control.guard.ts:29","methods#Methods":"","canactivate#canActivate()":"canActivate(context): Promise<boolean>","parameters-1#Parameters":"Parameter\tType\tDescription\tcontext\tExecutionContext\tCurrent execution context. Provides access to details about the current request pipeline.","returns-1#Returns":"Promise<boolean>Value indicating whether or not the current request is allowed to\nproceed.","implementation-of#Implementation of":"CanActivate.canActivate","defined-in-1#Defined in":"packages/nestjs-access-control/src/access-control.guard.ts:38","checkaccessgrants#checkAccessGrants()":"protected checkAccessGrants(context): Promise<boolean>","parameters-2#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-2#Returns":"Promise<boolean>","defined-in-2#Defined in":"packages/nestjs-access-control/src/access-control.guard.ts:43","checkaccessqueries#checkAccessQueries()":"protected checkAccessQueries(context, queriesPermitted): Promise<boolean>","parameters-3#Parameters":"Parameter\tType\tcontext\tExecutionContext\tqueriesPermitted\tIQueryInfo[]","returns-3#Returns":"Promise<boolean>","defined-in-3#Defined in":"packages/nestjs-access-control/src/access-control.guard.ts:93"}},"/reference/rockets/nestjs-access-control/classes/AccessControlModule":{"title":"Class: AccessControlModule","data":{"extends#Extends":"AccessControlModuleClass","constructors#Constructors":"","new-accesscontrolmodule#new AccessControlModule()":"new AccessControlModule(): AccessControlModule","returns#Returns":"AccessControlModule","inherited-from#Inherited from":"AccessControlModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tAccessControlOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-access-control/src/access-control.module.ts:29","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tAccessControlOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-access-control/src/access-control.module.ts:21","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tAccessControlAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-access-control/src/access-control.module.ts:25","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tAccessControlOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"AccessControlModuleClass.register","defined-in-4#Defined in":"packages/nestjs-access-control/src/access-control.module.ts:13","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tAccessControlAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"AccessControlModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-access-control/src/access-control.module.ts:17"}},"/reference/rockets/nestjs-access-control/classes/AccessControlService":{"title":"Class: AccessControlService","data":{"implements#Implements":"AccessControlServiceInterface","constructors#Constructors":"","new-accesscontrolservice#new AccessControlService()":"new AccessControlService(): AccessControlService","returns#Returns":"AccessControlService","methods#Methods":"","getuser#getUser()":"getUser<T>(context): Promise<T>","type-parameters#Type Parameters":"Type Parameter\tT","parameters#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-1#Returns":"Promise<T>","implementation-of#Implementation of":"AccessControlServiceInterface.getUser","defined-in#Defined in":"packages/nestjs-access-control/src/services/access-control.service.ts:18","getuserroles#getUserRoles()":"getUserRoles(context): Promise<string | string[]>","parameters-1#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-2#Returns":"Promise<string | string[]>","implementation-of-1#Implementation of":"AccessControlServiceInterface.getUserRoles","defined-in-1#Defined in":"packages/nestjs-access-control/src/services/access-control.service.ts:22"}},"/reference/rockets/nestjs-access-control/enumerations/PossessionEnum":{"title":"Enumeration: PossessionEnum","data":{"enumeration-members#Enumeration Members":"Enumeration Member\tValue\tANY\t\"any\"\tOWN\t\"own\""}},"/reference/rockets/nestjs-access-control/enumerations/ActionEnum":{"title":"Enumeration: ActionEnum","data":{"enumeration-members#Enumeration Members":"Enumeration Member\tValue\tCREATE\t\"create\"\tDELETE\t\"delete\"\tREAD\t\"read\"\tUPDATE\t\"update\""}},"/reference/rockets/nestjs-access-control/functions/AccessControlCreateMany":{"title":"Function: AccessControlCreateMany()","data":{"":"AccessControlCreateMany(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCreate many resource grant shortcut.","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-create-many.decorator.ts:8"}},"/reference/rockets/nestjs-access-control/functions/AccessControlCreateOne":{"title":"Function: AccessControlCreateOne()","data":{"":"AccessControlCreateOne(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"FunctionDecorator function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-create-one.decorator.ts:11"}},"/reference/rockets/nestjs-access-control/functions/AccessControlGrant":{"title":"Function: AccessControlGrant()","data":{"":"AccessControlGrant(...acGrants): CustomDecorator<unknown>","parameters#Parameters":"Parameter\tType\tDescription\t...acGrants\tAccessControlGrantOptionInterface[]\tArray of access control grants.","returns#Returns":"CustomDecorator<unknown>Decorator function.","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-grant.decorator.ts:11"}},"/reference/rockets/nestjs-access-control/functions/AccessControlQuery":{"title":"Function: AccessControlQuery()","data":{"":"AccessControlQuery(...queryOptions): CustomDecorator<unknown>","parameters#Parameters":"Parameter\tType\tDescription\t...queryOptions\tAccessControlQueryOptionInterface[]\tArray of access control query options.","returns#Returns":"CustomDecorator<unknown>Decorator function.","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-query.decorator.ts:11"}},"/reference/rockets/nestjs-access-control/functions/AccessControlDeleteOne":{"title":"Function: AccessControlDeleteOne()","data":{"":"AccessControlDeleteOne(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"FunctionDecorator function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-delete-one.decorator.ts:11"}},"/reference/rockets/nestjs-access-control/functions/AccessControlReadMany":{"title":"Function: AccessControlReadMany()","data":{"":"AccessControlReadMany(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"FunctionDecorator function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-read-many.decorator.ts:11"}},"/reference/rockets/nestjs-access-control/functions/AccessControlReadOne":{"title":"Function: AccessControlReadOne()","data":{"":"AccessControlReadOne(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"FunctionDecorator function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-read-one.decorator.ts:11"}},"/reference/rockets/nestjs-access-control/functions/AccessControlRecoverOne":{"title":"Function: AccessControlRecoverOne()","data":{"":"AccessControlRecoverOne(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nRecover one resource grant shortcut.","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-recover-one.decorator.ts:8"}},"/reference/rockets/nestjs-access-control/functions/AccessControlReplaceOne":{"title":"Function: AccessControlReplaceOne()","data":{"":"AccessControlReplaceOne(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nUpdate one resource grant shortcut.","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-replace-one.decorator.ts:8"}},"/reference/rockets/nestjs-access-control/functions/AccessControlUpdateOne":{"title":"Function: AccessControlUpdateOne()","data":{"":"AccessControlUpdateOne(resource): <TFunction, Y>(target, propertyKey?, descriptor?) => void","parameters#Parameters":"Parameter\tType\tDescription\tresource\tstring\tThe grant resource.","returns#Returns":"FunctionDecorator function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-access-control/src/decorators/access-control-update-one.decorator.ts:11"}},"/reference/rockets/nestjs-access-control/globals":{"title":"@concepta/nestjs-access-control","data":{"references#References":"","accesscontrolaction#AccessControlAction":"Renames and re-exports ActionEnum","enumerations#Enumerations":"ActionEnum\nPossessionEnum","classes#Classes":"AccessControlContext\nAccessControlGuard\nAccessControlModule\nAccessControlService","interfaces#Interfaces":"AccessControlContextInterface\nAccessControlGrantOptionInterface\nAccessControlMetadataInterface\nAccessControlOptionsInterface\nAccessControlQueryOptionInterface\nAccessControlServiceInterface\nCanAccess","functions#Functions":"AccessControlCreateMany\nAccessControlCreateOne\nAccessControlDeleteOne\nAccessControlGrant\nAccessControlQuery\nAccessControlReadMany\nAccessControlReadOne\nAccessControlRecoverOne\nAccessControlReplaceOne\nAccessControlUpdateOne"}},"/reference/rockets/nestjs-access-control/interfaces/AccessControlContextInterface":{"title":"Interface: AccessControlContextInterface","data":{"methods#Methods":"","getaccesscontrol#getAccessControl()":"getAccessControl(): AccessControl","returns#Returns":"AccessControl","defined-in#Defined in":"packages/nestjs-access-control/src/interfaces/access-control-context.interface.ts:8","getexecutioncontext#getExecutionContext()":"getExecutionContext(): ExecutionContext","returns-1#Returns":"ExecutionContext","defined-in-1#Defined in":"packages/nestjs-access-control/src/interfaces/access-control-context.interface.ts:9","getquery#getQuery()":"getQuery(): IQueryInfo","returns-2#Returns":"IQueryInfo","defined-in-2#Defined in":"packages/nestjs-access-control/src/interfaces/access-control-context.interface.ts:7","getrequest#getRequest()":"getRequest(property?): unknown","parameters#Parameters":"Parameter\tType\tproperty?\tstring","returns-3#Returns":"unknown","defined-in-3#Defined in":"packages/nestjs-access-control/src/interfaces/access-control-context.interface.ts:5","getuser#getUser()":"getUser(): unknown","returns-4#Returns":"unknown","defined-in-4#Defined in":"packages/nestjs-access-control/src/interfaces/access-control-context.interface.ts:6"}},"/reference/rockets/nestjs-access-control/interfaces/AccessControlMetadataInterface":{"title":"Interface: AccessControlMetadataInterface","data":{"properties#Properties":"Property\tType\tservice?\tType<AccessControlServiceInterface>"}},"/reference/rockets/nestjs-access-control/interfaces/AccessControlGrantOptionInterface":{"title":"Interface: AccessControlGrantOptionInterface","data":{"properties#Properties":"Property\tType\taction\tActionEnum\tresource\tstring"}},"/reference/rockets/nestjs-access-control/interfaces/AccessControlOptionsInterface":{"title":"Interface: AccessControlOptionsInterface","data":{"properties#Properties":"Property\tType\tappGuard?\tfalse | CanActivate\tservice?\tAccessControlServiceInterface\tsettings\tAccessControlSettingsInterface"}},"/reference/rockets/nestjs-access-control/interfaces/AccessControlQueryOptionInterface":{"title":"Interface: AccessControlQueryOptionInterface","data":{"properties#Properties":"Property\tType\tDescription\tservice\tType<CanAccess>\tService used for advanced validation"}},"/reference/rockets/nestjs-access-control/interfaces/AccessControlServiceInterface":{"title":"Interface: AccessControlServiceInterface","data":{"methods#Methods":"","getuser#getUser()":"getUser(context): Promise<unknown>","parameters#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns#Returns":"Promise<unknown>","defined-in#Defined in":"packages/nestjs-access-control/src/interfaces/access-control-service.interface.ts:4","getuserroles#getUserRoles()":"getUserRoles(context): Promise<string | string[]>","parameters-1#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-1#Returns":"Promise<string | string[]>","defined-in-1#Defined in":"packages/nestjs-access-control/src/interfaces/access-control-service.interface.ts:5"}},"/reference/rockets/nestjs-access-control/interfaces/CanAccess":{"title":"Interface: CanAccess","data":{"methods#Methods":"","canaccess#canAccess()":"canAccess(context): Promise<boolean>","parameters#Parameters":"Parameter\tType\tcontext\tAccessControlContextInterface","returns#Returns":"Promise<boolean>","defined-in#Defined in":"packages/nestjs-access-control/src/interfaces/can-access.interface.ts:4"}},"/reference/rockets/nestjs-auth-github/classes/AuthGithubController":{"title":"Class: AuthGithubController","data":{"":"Github controllerFlow of how github works:\nClient call auth/github/login to be redirected to github login page to require authentication\nAfter authorized by github, the user will be redirected to the callback url defined in the config\nThe auth/github/callback url will be called with the code as a query parameter\nThe code will be used to get the access token and user profile from github\nThe user profile will be used to create a new user or return the existing user from federated module\nThe user will be authenticated and a token will be issued\nThe token will be returned to the client\nThe client can use the token to make requests to the protected resources","constructors#Constructors":"","new-authgithubcontroller#new AuthGithubController()":"new AuthGithubController(issueTokenService): AuthGithubController","parameters#Parameters":"Parameter\tType\tissueTokenService\tIssueTokenServiceInterface","returns#Returns":"AuthGithubController","defined-in#Defined in":"packages/nestjs-auth-github/src/auth-github.controller.ts:37","methods#Methods":"","get#get()":"get(user): Promise<AuthenticationResponseInterface>","parameters-1#Parameters":"Parameter\tType\tuser\tAuthenticatedUserInterface","returns-1#Returns":"Promise<AuthenticationResponseInterface>","defined-in-1#Defined in":"packages/nestjs-auth-github/src/auth-github.controller.ts:60","login#login()":"login(): void\nLogin","returns-2#Returns":"void","defined-in-2#Defined in":"packages/nestjs-auth-github/src/auth-github.controller.ts:49"}},"/reference/rockets/nestjs-auth-github/classes/AuthGithubGuard":{"title":"Class: AuthGithubGuard","data":{"extends#Extends":"object","constructors#Constructors":"","new-authgithubguard#new AuthGithubGuard()":"new AuthGithubGuard(authenticationSettings, reflector): AuthGithubGuard","parameters#Parameters":"Parameter\tType\tauthenticationSettings\tAuthenticationSettingsInterface\treflector\tReflector","returns#Returns":"AuthGithubGuard","inherited-from#Inherited from":"AuthGuard(AUTH_GITHUB_STRATEGY_NAME, { canDisable: false, }).constructor","defined-in#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:6","properties#Properties":"Property\tModifier\tType\tInherited from\tauthenticationSettings\treadonly\tAuthenticationSettingsInterface\tAuthGuard(AUTH_GITHUB_STRATEGY_NAME, { canDisable: false, }).authenticationSettings\toptions\treadonly\tAuthGuardOptions\tAuthGuard(AUTH_GITHUB_STRATEGY_NAME, { canDisable: false, }).options\treflector\treadonly\tReflector\tAuthGuard(AUTH_GITHUB_STRATEGY_NAME, { canDisable: false, }).reflector","methods#Methods":"","canactivate#canActivate()":"canActivate(context): boolean | Promise<boolean> | Observable<boolean>","parameters-1#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-1#Returns":"boolean | Promise<boolean> | Observable<boolean>","inherited-from-1#Inherited from":"AuthGuard(AUTH_GITHUB_STRATEGY_NAME, { canDisable: false, }).canActivate","defined-in-1#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:10"}},"/reference/rockets/nestjs-auth-github/README":{"title":"Rockets NestJS GitHub Federated Authentication","data":{"":"Authenticate requests using GitHub OAuth2","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-auth-github"}},"/reference/rockets/nestjs-auth-github/classes/AuthGithubLoginDto":{"title":"Class: AuthGithubLoginDto","data":{"implements#Implements":"AuthenticationCodeInterface","constructors#Constructors":"","new-authgithublogindto#new AuthGithubLoginDto()":"new AuthGithubLoginDto(): AuthGithubLoginDto","returns#Returns":"AuthGithubLoginDto","properties#Properties":"Property\tType\tDefault value\tcode\tstring\t''"}},"/reference/rockets/nestjs-auth-github/classes/AuthGithubModule":{"title":"Class: AuthGithubModule","data":{"":"Auth GitHub module","extends#Extends":"AuthGithubModuleClass","constructors#Constructors":"","new-authgithubmodule#new AuthGithubModule()":"new AuthGithubModule(): AuthGithubModule","returns#Returns":"AuthGithubModule","inherited-from#Inherited from":"AuthGithubModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tAuthGithubOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-auth-github/src/auth-github.module.ts:34","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tAuthGithubOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-auth-github/src/auth-github.module.ts:26","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tAuthGithubAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-auth-github/src/auth-github.module.ts:30","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tAuthGithubOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"AuthGithubModuleClass.register","defined-in-4#Defined in":"packages/nestjs-auth-github/src/auth-github.module.ts:18","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tAuthGithubAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"AuthGithubModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-auth-github/src/auth-github.module.ts:22"}},"/reference/rockets/nestjs-auth-github/globals":{"title":"@concepta/nestjs-auth-github","data":{"references#References":"","githubauthguard#GithubAuthGuard":"Renames and re-exports AuthGithubGuard","classes#Classes":"AuthGithubController\nAuthGithubGuard\nAuthGithubLoginDto\nAuthGithubModule"}},"/reference/rockets/nestjs-auth-jwt/classes/AuthJwtGuard":{"title":"Class: AuthJwtGuard","data":{"extends#Extends":"object","constructors#Constructors":"","new-authjwtguard#new AuthJwtGuard()":"new AuthJwtGuard(authenticationSettings, reflector): AuthJwtGuard","parameters#Parameters":"Parameter\tType\tauthenticationSettings\tAuthenticationSettingsInterface\treflector\tReflector","returns#Returns":"AuthJwtGuard","inherited-from#Inherited from":"AuthGuard(AUTH_JWT_STRATEGY_NAME, { canDisable: true, }).constructor","defined-in#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:6","properties#Properties":"Property\tModifier\tType\tInherited from\tauthenticationSettings\treadonly\tAuthenticationSettingsInterface\tAuthGuard(AUTH_JWT_STRATEGY_NAME, { canDisable: true, }).authenticationSettings\toptions\treadonly\tAuthGuardOptions\tAuthGuard(AUTH_JWT_STRATEGY_NAME, { canDisable: true, }).options\treflector\treadonly\tReflector\tAuthGuard(AUTH_JWT_STRATEGY_NAME, { canDisable: true, }).reflector","methods#Methods":"","canactivate#canActivate()":"canActivate(context): boolean | Promise<boolean> | Observable<boolean>","parameters-1#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-1#Returns":"boolean | Promise<boolean> | Observable<boolean>","inherited-from-1#Inherited from":"AuthGuard(AUTH_JWT_STRATEGY_NAME, { canDisable: true, }).canActivate","defined-in-1#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:10","handlerequest#handleRequest()":"handleRequest<T>(err, user, info?): NonNullable<T>","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceIdInterface<string>","parameters-2#Parameters":"Parameter\tType\terr\tundefined | Error\tuser\tT\tinfo?\tError","returns-2#Returns":"NonNullable<T>","defined-in-2#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.guard.ts:11"}},"/reference/rockets/nestjs-auth-jwt/globals":{"title":"@concepta/nestjs-auth-jwt","data":{"references#References":"","jwtauthguard#JwtAuthGuard":"Renames and re-exports AuthJwtGuard","classes#Classes":"AuthJwtGuard\nAuthJwtModule\nAuthJwtStrategy"}},"/reference/rockets/nestjs-auth-jwt/classes/AuthJwtModule":{"title":"Class: AuthJwtModule","data":{"":"Auth local module","extends#Extends":"AuthJwtModuleClass","constructors#Constructors":"","new-authjwtmodule#new AuthJwtModule()":"new AuthJwtModule(): AuthJwtModule","returns#Returns":"AuthJwtModule","inherited-from#Inherited from":"AuthJwtModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tAuthJwtOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.module.ts:33","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tAuthJwtOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.module.ts:25","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tAuthJwtAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.module.ts:29","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tAuthJwtOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"AuthJwtModuleClass.register","defined-in-4#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.module.ts:17","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tAuthJwtAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"AuthJwtModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.module.ts:21"}},"/reference/rockets/nestjs-auth-jwt/classes/AuthJwtStrategy":{"title":"Class: AuthJwtStrategy","data":{"extends#Extends":"JwtStrategy<this>","constructors#Constructors":"","new-authjwtstrategy#new AuthJwtStrategy()":"new AuthJwtStrategy(settings, verifyTokenService, userLookupService): AuthJwtStrategy","parameters#Parameters":"Parameter\tType\tsettings\tPartial<AuthJwtSettingsInterface>\tverifyTokenService\tVerifyTokenServiceInterface\tuserLookupService\tAuthJwtUserLookupServiceInterface","returns#Returns":"AuthJwtStrategy","overrides#Overrides":"JwtStrategy.constructor","defined-in#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.strategy.ts:30","methods#Methods":"","authenticate#authenticate()":"authenticate(...args): void\nPerforms authentication for the request.\nNote: Virtual function - re-implement in the strategy.","parameters-1#Parameters":"Parameter\tType\t...args\t[Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, any]","returns-1#Returns":"void","inherited-from#Inherited from":"JwtStrategy.authenticate","defined-in-1#Defined in":"packages/nestjs-jwt/dist/jwt.strategy.d.ts:8","error#error()":"error(err): void\nInternal error while performing authentication.Strategies should call this function when an internal error occurs\nduring the process of performing authentication; for example, if the\nuser directory is not available.","parameters-2#Parameters":"Parameter\tType\terr\tError","returns-2#Returns":"void","api#Api":"public","inherited-from-1#Inherited from":"JwtStrategy.error","defined-in-2#Defined in":"node_modules/@types/passport-strategy/index.d.ts:90","fail#fail()":"","failchallenge-status#fail(challenge, status)":"fail(challenge, status): void\nFail authentication, with optional challenge and status, defaulting\nto 401.Strategies should call this function to fail an authentication attempt.","parameters-3#Parameters":"Parameter\tType\tDescription\tchallenge\tany\t(Can also be an object with 'message' and 'type' fields).\tstatus\tnumber\t-","returns-3#Returns":"void","api-1#Api":"public","inherited-from-2#Inherited from":"JwtStrategy.fail","defined-in-3#Defined in":"node_modules/@types/passport-strategy/index.d.ts:54","failstatus#fail(status)":"fail(status): void","parameters-4#Parameters":"Parameter\tType\tstatus\tnumber","returns-4#Returns":"void","inherited-from-3#Inherited from":"JwtStrategy.fail","defined-in-4#Defined in":"node_modules/@types/passport-strategy/index.d.ts:55","pass#pass()":"pass(): void\nPass without making a success or fail decision.Under most circumstances, Strategies should not need to call this\nfunction.  It exists primarily to allow previous authentication state\nto be restored, for example from an HTTP session.","returns-5#Returns":"void","api-2#Api":"public","inherited-from-4#Inherited from":"JwtStrategy.pass","defined-in-5#Defined in":"node_modules/@types/passport-strategy/index.d.ts:78","redirect#redirect()":"redirect(url, status?): void\nRedirect to url with optional status, defaulting to 302.Strategies should call this function to redirect the user (via their\nuser agent) to a third-party website for authentication.","parameters-5#Parameters":"Parameter\tType\turl\tstring\tstatus?\tnumber","returns-6#Returns":"void","api-3#Api":"public","inherited-from-5#Inherited from":"JwtStrategy.redirect","defined-in-6#Defined in":"node_modules/@types/passport-strategy/index.d.ts:67","success#success()":"success(user, info?): void\nAuthenticate user, with optional info.Strategies should call this function to successfully authenticate a\nuser.  user should be an object supplied by the application after it\nhas been given an opportunity to verify credentials.  info is an\noptional argument containing additional user information.  This is\nuseful for third-party authentication strategies to pass profile\ndetails.","parameters-6#Parameters":"Parameter\tType\tuser\tany\tinfo?\tany","returns-7#Returns":"void","api-4#Api":"public","inherited-from-6#Inherited from":"JwtStrategy.success","defined-in-7#Defined in":"node_modules/@types/passport-strategy/index.d.ts:42","validate#validate()":"validate(payload, queryOptions?): Promise<ReferenceIdInterface<string>>\nValidate the user based on payload sub","parameters-7#Parameters":"Parameter\tType\tDescription\tpayload\tAuthorizationPayloadInterface\tThe payload to validate\tqueryOptions?\tQueryOptionsInterface\t-","returns-8#Returns":"Promise<ReferenceIdInterface<string>>","defined-in-8#Defined in":"packages/nestjs-auth-jwt/src/auth-jwt.strategy.ts:51"}},"/reference/rockets/nestjs-auth-local/classes/AuthLocalController":{"title":"Class: AuthLocalController","data":{"":"Auth Local controller","constructors#Constructors":"","new-authlocalcontroller#new AuthLocalController()":"new AuthLocalController(issueTokenService): AuthLocalController","parameters#Parameters":"Parameter\tType\tissueTokenService\tIssueTokenServiceInterface","returns#Returns":"AuthLocalController","defined-in#Defined in":"packages/nestjs-auth-local/src/auth-local.controller.ts:30","methods#Methods":"","login#login()":"login(user): Promise<AuthenticationResponseInterface>\nLogin","parameters-1#Parameters":"Parameter\tType\tuser\tAuthenticatedUserInterface","returns-1#Returns":"Promise<AuthenticationResponseInterface>","defined-in-1#Defined in":"packages/nestjs-auth-local/src/auth-local.controller.ts:48"}},"/reference/rockets/nestjs-auth-local/classes/AuthLocalGuard":{"title":"Class: AuthLocalGuard","data":{"extends#Extends":"object","constructors#Constructors":"","new-authlocalguard#new AuthLocalGuard()":"new AuthLocalGuard(authenticationSettings, reflector): AuthLocalGuard","parameters#Parameters":"Parameter\tType\tauthenticationSettings\tAuthenticationSettingsInterface\treflector\tReflector","returns#Returns":"AuthLocalGuard","inherited-from#Inherited from":"AuthGuard(AUTH_LOCAL_STRATEGY_NAME, { canDisable: false, }).constructor","defined-in#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:6","properties#Properties":"Property\tModifier\tType\tInherited from\tauthenticationSettings\treadonly\tAuthenticationSettingsInterface\tAuthGuard(AUTH_LOCAL_STRATEGY_NAME, { canDisable: false, }).authenticationSettings\toptions\treadonly\tAuthGuardOptions\tAuthGuard(AUTH_LOCAL_STRATEGY_NAME, { canDisable: false, }).options\treflector\treadonly\tReflector\tAuthGuard(AUTH_LOCAL_STRATEGY_NAME, { canDisable: false, }).reflector","methods#Methods":"","canactivate#canActivate()":"canActivate(context): boolean | Promise<boolean> | Observable<boolean>","parameters-1#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-1#Returns":"boolean | Promise<boolean> | Observable<boolean>","inherited-from-1#Inherited from":"AuthGuard(AUTH_LOCAL_STRATEGY_NAME, { canDisable: false, }).canActivate","defined-in-1#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:10"}},"/reference/rockets/nestjs-auth-local/classes/AuthLocalLoginDto":{"title":"Class: AuthLocalLoginDto","data":{"":"Password plain text interface","implements#Implements":"AuthenticationLoginInterface","constructors#Constructors":"","new-authlocallogindto#new AuthLocalLoginDto()":"new AuthLocalLoginDto(): AuthLocalLoginDto","returns#Returns":"AuthLocalLoginDto","properties#Properties":"Property\tType\tDefault value\tDescription\tpassword\tstring\t''\tPassword\tusername\tstring\t''\t-"}},"/reference/rockets/nestjs-auth-local/classes/AuthLocalModule":{"title":"Class: AuthLocalModule","data":{"":"Auth local module","extends#Extends":"AuthLocalModuleClass","constructors#Constructors":"","new-authlocalmodule#new AuthLocalModule()":"new AuthLocalModule(): AuthLocalModule","returns#Returns":"AuthLocalModule","inherited-from#Inherited from":"AuthLocalModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tAuthLocalOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-auth-local/src/auth-local.module.ts:33","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tAuthLocalOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-auth-local/src/auth-local.module.ts:25","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tAuthLocalAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-auth-local/src/auth-local.module.ts:29","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tAuthLocalOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"AuthLocalModuleClass.register","defined-in-4#Defined in":"packages/nestjs-auth-local/src/auth-local.module.ts:17","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tAuthLocalAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"AuthLocalModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-auth-local/src/auth-local.module.ts:21"}},"/reference/rockets/nestjs-auth-local/classes/AuthLocalValidateUserService":{"title":"Class: AuthLocalValidateUserService","data":{"extends#Extends":"ValidateUserService<[AuthLocalValidateUserInterface]>","implements#Implements":"AuthLocalValidateUserServiceInterface","constructors#Constructors":"","new-authlocalvalidateuserservice#new AuthLocalValidateUserService()":"new AuthLocalValidateUserService(userLookupService, passwordValidationService): AuthLocalValidateUserService","parameters#Parameters":"Parameter\tType\tuserLookupService\tAuthLocalUserLookupServiceInterface\tpasswordValidationService\tPasswordValidationServiceInterface","returns#Returns":"AuthLocalValidateUserService","overrides#Overrides":"ValidateUserService.constructor","defined-in#Defined in":"packages/nestjs-auth-local/src/services/auth-local-validate-user.service.ts:18","properties#Properties":"Property\tModifier\tType\tpasswordValidationService\treadonly\tPasswordValidationServiceInterface\tuserLookupService\treadonly\tAuthLocalUserLookupServiceInterface","methods#Methods":"","isactive#isActive()":"isActive(user): Promise<boolean>\nReturns true if user is considered valid for authentication purposes.","parameters-1#Parameters":"Parameter\tType\tuser\tReferenceIdInterface<string> & ReferenceActiveInterface<boolean>","returns-1#Returns":"Promise<boolean>","implementation-of#Implementation of":"AuthLocalValidateUserServiceInterface.isActive","inherited-from#Inherited from":"ValidateUserService.isActive","defined-in-1#Defined in":"packages/nestjs-authentication/dist/services/validate-user.service.d.ts:5","validateuser#validateUser()":"validateUser(dto): Promise<ReferenceIdInterface<string>>\nReturns true if user is considered valid for authentication purposes.","parameters-2#Parameters":"Parameter\tType\tdto\tAuthLocalValidateUserInterface","returns-2#Returns":"Promise<ReferenceIdInterface<string>>","implementation-of-1#Implementation of":"AuthLocalValidateUserServiceInterface.validateUser","overrides-1#Overrides":"ValidateUserService.validateUser","defined-in-2#Defined in":"packages/nestjs-auth-local/src/services/auth-local-validate-user.service.ts:30"}},"/reference/rockets/nestjs-auth-local/globals":{"title":"@concepta/nestjs-auth-local","data":{"references#References":"","localauthguard#LocalAuthGuard":"Renames and re-exports AuthLocalGuard","classes#Classes":"AuthLocalController\nAuthLocalGuard\nAuthLocalLoginDto\nAuthLocalModule\nAuthLocalValidateUserService","interfaces#Interfaces":"AuthLocalCredentialsInterface\nAuthLocalUserLookupServiceInterface\nAuthLocalValidateUserInterface\nAuthLocalValidateUserServiceInterface"}},"/reference/rockets/nestjs-auth-local/interfaces/AuthLocalCredentialsInterface":{"title":"Interface: AuthLocalCredentialsInterface","data":{"":"Credentials Interface","extends#Extends":"ReferenceIdInterface.ReferenceUsernameInterface.ReferenceActiveInterface.PasswordStorageInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tactive\tboolean\t-\tReferenceActiveInterface.active\tid\tstring\t-\tReferenceIdInterface.id\tpasswordHash\tnull | string\tHashed password\tPasswordStorageInterface.passwordHash\tpasswordSalt\tnull | string\tSalt used to hash password\tPasswordStorageInterface.passwordSalt\tusername\tstring\t-\tReferenceUsernameInterface.username"}},"/reference/rockets/nestjs-auth-local/interfaces/AuthLocalUserLookupServiceInterface":{"title":"Interface: AuthLocalUserLookupServiceInterface","data":{"extends#Extends":"LookupUsernameInterface<ReferenceUsername, AuthLocalCredentialsInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tbyUsername\t(username: string, options?: QueryOptionsInterface) => Promise<null | AuthLocalCredentialsInterface>\tLookupUsernameInterface.byUsername"}},"/reference/rockets/nestjs-auth-local/interfaces/AuthLocalValidateUserInterface":{"title":"Interface: AuthLocalValidateUserInterface","data":{"properties#Properties":"Property\tType\tpassword\tstring\tusername\tstring"}},"/reference/rockets/nestjs-auth-local/interfaces/AuthLocalValidateUserServiceInterface":{"title":"Interface: AuthLocalValidateUserServiceInterface","data":{"extends#Extends":"ValidateUserServiceInterface<[AuthLocalValidateUserInterface]>","properties#Properties":"Property\tType\tOverrides\tInherited from\tisActive\t(user: ReferenceIdInterface<string> & ReferenceActiveInterface<boolean>) => Promise<boolean>\t-\tValidateUserServiceInterface.isActive\tvalidateUser\t(dto: AuthLocalValidateUserInterface) => Promise<ReferenceIdInterface<string>>\tValidateUserServiceInterface.validateUser\t-"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryController":{"title":"Class: AuthRecoveryController","data":{"constructors#Constructors":"","new-authrecoverycontroller#new AuthRecoveryController()":"new AuthRecoveryController(authRecoveryService): AuthRecoveryController","parameters#Parameters":"Parameter\tType\tauthRecoveryService\tAuthRecoveryService","returns#Returns":"AuthRecoveryController","defined-in#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.controller.ts:29","methods#Methods":"","recoverlogin#recoverLogin()":"recoverLogin(recoverLoginDto): Promise<void>","parameters-1#Parameters":"Parameter\tType\trecoverLoginDto\tAuthRecoveryRecoverLoginDto","returns-1#Returns":"Promise<void>","defined-in-1#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.controller.ts:41","recoverpassword#recoverPassword()":"recoverPassword(recoverPasswordDto): Promise<void>","parameters-2#Parameters":"Parameter\tType\trecoverPasswordDto\tAuthRecoveryRecoverPasswordDto","returns-2#Returns":"Promise<void>","defined-in-2#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.controller.ts:57","updatepassword#updatePassword()":"updatePassword(updatePasswordDto): Promise<void>","parameters-3#Parameters":"Parameter\tType\tupdatePasswordDto\tAuthRecoveryUpdatePasswordDto","returns-3#Returns":"Promise<void>","defined-in-3#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.controller.ts:87","validatepasscode#validatePasscode()":"validatePasscode(passcode): Promise<void>","parameters-4#Parameters":"Parameter\tType\tpasscode\tstring","returns-4#Returns":"Promise<void>","defined-in-4#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.controller.ts:69"}},"/reference/rockets/nestjs-auth-recovery/README":{"title":"Rockets NestJS Auth recovery Authentication","data":{"":"Recover user password using email","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-auth-recovery"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryModule":{"title":"Class: AuthRecoveryModule","data":{"extends#Extends":"AuthRecoveryModuleClass","constructors#Constructors":"","new-authrecoverymodule#new AuthRecoveryModule()":"new AuthRecoveryModule(): AuthRecoveryModule","returns#Returns":"AuthRecoveryModule","inherited-from#Inherited from":"AuthRecoveryModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tAuthRecoveryOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.module.ts:31","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tAuthRecoveryOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.module.ts:23","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tAuthRecoveryAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.module.ts:27","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tAuthRecoveryOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"AuthRecoveryModuleClass.register","defined-in-4#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.module.ts:15","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tAuthRecoveryAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"AuthRecoveryModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-auth-recovery/src/auth-recovery.module.ts:19"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryRecoverLoginDto":{"title":"Class: AuthRecoveryRecoverLoginDto","data":{"constructors#Constructors":"","new-authrecoveryrecoverlogindto#new AuthRecoveryRecoverLoginDto()":"new AuthRecoveryRecoverLoginDto(): AuthRecoveryRecoverLoginDto","returns#Returns":"AuthRecoveryRecoverLoginDto","properties#Properties":"Property\tType\tDefault value\temail\tstring\t''"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryNotificationService":{"title":"Class: AuthRecoveryNotificationService","data":{"implements#Implements":"AuthRecoveryNotificationServiceInterface","constructors#Constructors":"","new-authrecoverynotificationservice#new AuthRecoveryNotificationService()":"new AuthRecoveryNotificationService(settings, emailService): AuthRecoveryNotificationService","parameters#Parameters":"Parameter\tType\tsettings\tAuthRecoverySettingsInterface\temailService\tAuthRecoveryEmailServiceInterface","returns#Returns":"AuthRecoveryNotificationService","defined-in#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery-notification.service.ts:16","methods#Methods":"","sendemail#sendEmail()":"sendEmail(sendMailOptions): Promise<void>","parameters-1#Parameters":"Parameter\tType\tsendMailOptions\tEmailSendOptionsInterface","returns-1#Returns":"Promise<void>","implementation-of#Implementation of":"AuthRecoveryNotificationServiceInterface.sendEmail","defined-in-1#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery-notification.service.ts:23","sendpasswordupdatedsuccefullyemail#sendPasswordUpdatedSuccefullyEmail()":"sendPasswordUpdatedSuccefullyEmail(email): Promise<void>","parameters-2#Parameters":"Parameter\tType\temail\tstring","returns-2#Returns":"Promise<void>","implementation-of-1#Implementation of":"AuthRecoveryNotificationServiceInterface.sendPasswordUpdatedSuccefullyEmail","defined-in-2#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery-notification.service.ts:50","sendrecoverloginemail#sendRecoverLoginEmail()":"sendRecoverLoginEmail(email, username): Promise<void>","parameters-3#Parameters":"Parameter\tType\temail\tstring\tusername\tstring","returns-3#Returns":"Promise<void>","implementation-of-2#Implementation of":"AuthRecoveryNotificationServiceInterface.sendRecoverLoginEmail","defined-in-3#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery-notification.service.ts:61","sendrecoverpasswordemail#sendRecoverPasswordEmail()":"sendRecoverPasswordEmail(email, passcode, resetTokenExp): Promise<void>","parameters-4#Parameters":"Parameter\tType\temail\tstring\tpasscode\tstring\tresetTokenExp\tDate","returns-4#Returns":"Promise<void>","implementation-of-3#Implementation of":"AuthRecoveryNotificationServiceInterface.sendRecoverPasswordEmail","defined-in-4#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery-notification.service.ts:27"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryRecoverPasswordDto":{"title":"Class: AuthRecoveryRecoverPasswordDto","data":{"constructors#Constructors":"","new-authrecoveryrecoverpassworddto#new AuthRecoveryRecoverPasswordDto()":"new AuthRecoveryRecoverPasswordDto(): AuthRecoveryRecoverPasswordDto","returns#Returns":"AuthRecoveryRecoverPasswordDto","properties#Properties":"Property\tType\tDefault value\temail\tstring\t''"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryService":{"title":"Class: AuthRecoveryService","data":{"implements#Implements":"AuthRecoveryServiceInterface","constructors#Constructors":"","new-authrecoveryservice#new AuthRecoveryService()":"new AuthRecoveryService(config, otpService, userLookupService, userMutateService, notificationService, entityManagerProxy): AuthRecoveryService","parameters#Parameters":"Parameter\tType\tconfig\tAuthRecoverySettingsInterface\totpService\tAuthRecoveryOtpServiceInterface\tuserLookupService\tAuthRecoveryUserLookupServiceInterface\tuserMutateService\tAuthRecoveryUserMutateServiceInterface\tnotificationService\tAuthRecoveryNotificationService\tentityManagerProxy\tEntityManagerProxy","returns#Returns":"AuthRecoveryService","defined-in#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery.service.ts:27","methods#Methods":"","recoverlogin#recoverLogin()":"recoverLogin(email, queryOptions?): Promise<void>\nRecover lost username providing an email and send the username by email.","parameters-1#Parameters":"Parameter\tType\tDescription\temail\tstring\tuser email\tqueryOptions?\tQueryOptionsInterface\t-","returns-1#Returns":"Promise<void>","implementation-of#Implementation of":"AuthRecoveryServiceInterface.recoverLogin","defined-in-1#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery.service.ts:46","recoverpassword#recoverPassword()":"recoverPassword(email, queryOptions?): Promise<void>\nRecover lost password providing an email and send the passcode token by email.","parameters-2#Parameters":"Parameter\tType\tDescription\temail\tstring\tuser email\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<void>","implementation-of-1#Implementation of":"AuthRecoveryServiceInterface.recoverPassword","defined-in-2#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery.service.ts:71","revokealluserpasswordrecoveries#revokeAllUserPasswordRecoveries()":"revokeAllUserPasswordRecoveries(email, queryOptions?): Promise<void>\nRecover lost password providing an email and send the passcode token by email.","parameters-3#Parameters":"Parameter\tType\tDescription\temail\tstring\tuser email\tqueryOptions?\tQueryOptionsInterface\t-","returns-3#Returns":"Promise<void>","implementation-of-2#Implementation of":"AuthRecoveryServiceInterface.revokeAllUserPasswordRecoveries","defined-in-3#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery.service.ts:190","updatepassword#updatePassword()":"updatePassword(passcode, newPassword, queryOptions?): Promise<null | ReferenceIdInterface<string>>\nChange user's password by providing it's OTP passcode and the new password.","parameters-4#Parameters":"Parameter\tType\tDescription\tpasscode\tstring\tOTP user's passcode\tnewPassword\tstring\tnew user password\tqueryOptions?\tQueryOptionsInterface\t-","returns-4#Returns":"Promise<null | ReferenceIdInterface<string>>","implementation-of-3#Implementation of":"AuthRecoveryServiceInterface.updatePassword","defined-in-4#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery.service.ts:137","validatepasscode#validatePasscode()":"validatePasscode(passcode, deleteIfValid, queryOptions?): Promise<null | ReferenceAssigneeInterface<ReferenceIdInterface<string>>>\nValidate passcode and return it's user.","parameters-5#Parameters":"Parameter\tType\tDefault value\tDescription\tpasscode\tstring\tundefined\tuser's passcode\tdeleteIfValid\tboolean\tfalse\tflag to delete if valid or not\tqueryOptions?\tQueryOptionsInterface\tundefined\t-","returns-5#Returns":"Promise<null | ReferenceAssigneeInterface<ReferenceIdInterface<string>>>","implementation-of-4#Implementation of":"AuthRecoveryServiceInterface.validatePasscode","defined-in-5#Defined in":"packages/nestjs-auth-recovery/src/services/auth-recovery.service.ts:114"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryUpdatePasswordDto":{"title":"Class: AuthRecoveryUpdatePasswordDto","data":{"constructors#Constructors":"","new-authrecoveryupdatepassworddto#new AuthRecoveryUpdatePasswordDto()":"new AuthRecoveryUpdatePasswordDto(): AuthRecoveryUpdatePasswordDto","returns#Returns":"AuthRecoveryUpdatePasswordDto","properties#Properties":"Property\tType\tDefault value\tnewPassword\tstring\t''\tpasscode\tstring\t''"}},"/reference/rockets/nestjs-auth-recovery/classes/AuthRecoveryValidatePasscodeDto":{"title":"Class: AuthRecoveryValidatePasscodeDto","data":{"constructors#Constructors":"","new-authrecoveryvalidatepasscodedto#new AuthRecoveryValidatePasscodeDto()":"new AuthRecoveryValidatePasscodeDto(): AuthRecoveryValidatePasscodeDto","returns#Returns":"AuthRecoveryValidatePasscodeDto","properties#Properties":"Property\tType\tDefault value\tpasscode\tstring\t''"}},"/reference/rockets/nestjs-auth-recovery/globals":{"title":"@concepta/nestjs-auth-recovery","data":{"classes#Classes":"AuthRecoveryController\nAuthRecoveryModule\nAuthRecoveryNotificationService\nAuthRecoveryRecoverLoginDto\nAuthRecoveryRecoverPasswordDto\nAuthRecoveryService\nAuthRecoveryUpdatePasswordDto\nAuthRecoveryValidatePasscodeDto"}},"/reference/rockets/nestjs-auth-refresh/classes/AuthRefreshDto":{"title":"Class: AuthRefreshDto","data":{"implements#Implements":"AuthenticationRefreshInterface","constructors#Constructors":"","new-authrefreshdto#new AuthRefreshDto()":"new AuthRefreshDto(): AuthRefreshDto","returns#Returns":"AuthRefreshDto","properties#Properties":"Property\tType\tDefault value\trefreshToken\tstring\t''"}},"/reference/rockets/nestjs-auth-refresh/classes/AuthRefreshModule":{"title":"Class: AuthRefreshModule","data":{"":"Auth Refresh module","extends#Extends":"AuthRefreshModuleClass","constructors#Constructors":"","new-authrefreshmodule#new AuthRefreshModule()":"new AuthRefreshModule(): AuthRefreshModule","returns#Returns":"AuthRefreshModule","inherited-from#Inherited from":"AuthRefreshModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tAuthRefreshOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-auth-refresh/src/auth-refresh.module.ts:34","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tAuthRefreshOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-auth-refresh/src/auth-refresh.module.ts:26","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tAuthRefreshAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-auth-refresh/src/auth-refresh.module.ts:30","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tAuthRefreshOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"AuthRefreshModuleClass.register","defined-in-4#Defined in":"packages/nestjs-auth-refresh/src/auth-refresh.module.ts:18","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tAuthRefreshAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"AuthRefreshModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-auth-refresh/src/auth-refresh.module.ts:22"}},"/reference/rockets/nestjs-auth-refresh/classes/AuthRefreshGuard":{"title":"Class: AuthRefreshGuard","data":{"extends#Extends":"object","constructors#Constructors":"","new-authrefreshguard#new AuthRefreshGuard()":"new AuthRefreshGuard(authenticationSettings, reflector): AuthRefreshGuard","parameters#Parameters":"Parameter\tType\tauthenticationSettings\tAuthenticationSettingsInterface\treflector\tReflector","returns#Returns":"AuthRefreshGuard","inherited-from#Inherited from":"AuthGuard( AUTH_REFRESH_MODULE_STRATEGY_NAME, { canDisable: false, }, ).constructor","defined-in#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:6","properties#Properties":"Property\tModifier\tType\tInherited from\tauthenticationSettings\treadonly\tAuthenticationSettingsInterface\tAuthGuard( AUTH_REFRESH_MODULE_STRATEGY_NAME, { canDisable: false, }, ).authenticationSettings\toptions\treadonly\tAuthGuardOptions\tAuthGuard( AUTH_REFRESH_MODULE_STRATEGY_NAME, { canDisable: false, }, ).options\treflector\treadonly\tReflector\tAuthGuard( AUTH_REFRESH_MODULE_STRATEGY_NAME, { canDisable: false, }, ).reflector","methods#Methods":"","canactivate#canActivate()":"canActivate(context): boolean | Promise<boolean> | Observable<boolean>","parameters-1#Parameters":"Parameter\tType\tcontext\tExecutionContext","returns-1#Returns":"boolean | Promise<boolean> | Observable<boolean>","inherited-from-1#Inherited from":"AuthGuard( AUTH_REFRESH_MODULE_STRATEGY_NAME, { canDisable: false, }, ).canActivate","defined-in-1#Defined in":"packages/nestjs-authentication/dist/guards/auth.guard.d.ts:10"}},"/reference/rockets/nestjs-auth-refresh/globals":{"title":"@concepta/nestjs-auth-refresh","data":{"references#References":"","refreshauthguard#RefreshAuthGuard":"Renames and re-exports AuthRefreshGuard","classes#Classes":"AuthRefreshDto\nAuthRefreshGuard\nAuthRefreshModule"}},"/reference/rockets/nestjs-authentication/classes/AuthenticationJwtResponseDto":{"title":"Class: AuthenticationJwtResponseDto","data":{"":"Authentication response interface","implements#Implements":"AuthenticationResponseInterface","constructors#Constructors":"","new-authenticationjwtresponsedto#new AuthenticationJwtResponseDto()":"new AuthenticationJwtResponseDto(): AuthenticationJwtResponseDto","returns#Returns":"AuthenticationJwtResponseDto","properties#Properties":"Property\tType\tDefault value\tDescription\taccessToken\tstring\t''\tThe access token.\trefreshToken\tstring\t''\t-"}},"/reference/rockets/nestjs-authentication/classes/AuthenticationModule":{"title":"Class: AuthenticationModule","data":{"":"Authentication module","extends#Extends":"AuthenticationModuleClass","constructors#Constructors":"","new-authenticationmodule#new AuthenticationModule()":"new AuthenticationModule(): AuthenticationModule","returns#Returns":"AuthenticationModule","inherited-from#Inherited from":"AuthenticationModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tAuthenticationOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-authentication/src/authentication.module.ts:33","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tAuthenticationOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-authentication/src/authentication.module.ts:25","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tAuthenticationAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-authentication/src/authentication.module.ts:29","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tAuthenticationOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"AuthenticationModuleClass.register","defined-in-4#Defined in":"packages/nestjs-authentication/src/authentication.module.ts:17","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tAuthenticationAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"AuthenticationModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-authentication/src/authentication.module.ts:21"}},"/reference/rockets/nestjs-authentication/classes/IssueTokenService":{"title":"Class: IssueTokenService","data":{"implements#Implements":"IssueTokenServiceInterface","constructors#Constructors":"","new-issuetokenservice#new IssueTokenService()":"new IssueTokenService(jwtIssueService): IssueTokenService","parameters#Parameters":"Parameter\tType\tjwtIssueService\tJwtIssueService","returns#Returns":"IssueTokenService","defined-in#Defined in":"packages/nestjs-authentication/src/services/issue-token.service.ts:10","properties#Properties":"Property\tModifier\tType\tjwtIssueService\treadonly\tJwtIssueService","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<string>\nGenerate access token for a payload.","parameters-1#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns-1#Returns":"Promise<string>","implementation-of#Implementation of":"IssueTokenServiceInterface.accessToken","defined-in-1#Defined in":"packages/nestjs-authentication/src/services/issue-token.service.ts:15","refreshtoken#refreshToken()":"refreshToken(...args): Promise<string>\nGenerate refresh token for a payload.","parameters-2#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns-2#Returns":"Promise<string>","implementation-of-1#Implementation of":"IssueTokenServiceInterface.refreshToken","defined-in-2#Defined in":"packages/nestjs-authentication/src/services/issue-token.service.ts:22","responsepayload#responsePayload()":"responsePayload(id): Promise<AuthenticationResponseInterface>\nGenerate the response payload.","parameters-3#Parameters":"Parameter\tType\tDescription\tid\tstring\tuser id or name for sub claim","returns-3#Returns":"Promise<AuthenticationResponseInterface>","implementation-of-2#Implementation of":"IssueTokenServiceInterface.responsePayload","defined-in-3#Defined in":"packages/nestjs-authentication/src/services/issue-token.service.ts:31"}},"/reference/rockets/nestjs-authentication/classes/ValidateUserService":{"title":"Class: abstract ValidateUserService<T, R>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT extends unknown[]\tunknown[]\tR extends ReferenceIdInterface\tReferenceIdInterface","implements#Implements":"ValidateUserServiceInterface<T, R>","constructors#Constructors":"","new-validateuserservice#new ValidateUserService()":"new ValidateUserService<T, R>(): ValidateUserService<T, R>","returns#Returns":"ValidateUserService<T, R>","methods#Methods":"","isactive#isActive()":"isActive(user): Promise<boolean>\nReturns true if user is considered valid for authentication purposes.","parameters#Parameters":"Parameter\tType\tuser\tReferenceIdInterface<string> & ReferenceActiveInterface<boolean>","returns-1#Returns":"Promise<boolean>","implementation-of#Implementation of":"ValidateUserServiceInterface.isActive","defined-in#Defined in":"packages/nestjs-authentication/src/services/validate-user.service.ts:22","validateuser#validateUser()":"abstract validateUser(...rest): Promise<R>\nReturns validated user","parameters-1#Parameters":"Parameter\tType\t...rest\tT","returns-2#Returns":"Promise<R>","implementation-of-1#Implementation of":"ValidateUserServiceInterface.validateUser","defined-in-1#Defined in":"packages/nestjs-authentication/src/services/validate-user.service.ts:17"}},"/reference/rockets/nestjs-authentication/classes/VerifyTokenService":{"title":"Class: VerifyTokenService","data":{"implements#Implements":"VerifyTokenServiceInterface","constructors#Constructors":"","new-verifytokenservice#new VerifyTokenService()":"new VerifyTokenService(jwtVerifyService, validateTokenService?): VerifyTokenService","parameters#Parameters":"Parameter\tType\tjwtVerifyService\tJwtVerifyService\tvalidateTokenService?\tValidateTokenServiceInterface","returns#Returns":"VerifyTokenService","defined-in#Defined in":"packages/nestjs-authentication/src/services/verify-token.service.ts:14","properties#Properties":"Property\tModifier\tType\tjwtVerifyService\treadonly\tJwtVerifyService\tvalidateTokenService?\treadonly\tValidateTokenServiceInterface","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<any>\nVerify an access token.","parameters-1#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns-1#Returns":"Promise<any>","implementation-of#Implementation of":"VerifyTokenServiceInterface.accessToken","defined-in-1#Defined in":"packages/nestjs-authentication/src/services/verify-token.service.ts:24","refreshtoken#refreshToken()":"refreshToken(...args): Promise<any>\nVerify a refresh token.","parameters-2#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns-2#Returns":"Promise<any>","implementation-of-1#Implementation of":"VerifyTokenServiceInterface.refreshToken","defined-in-2#Defined in":"packages/nestjs-authentication/src/services/verify-token.service.ts:41"}},"/reference/rockets/nestjs-authentication/functions/AuthGuard":{"title":"Function: AuthGuard()","data":{"":"AuthGuard(strategyName, options): typeof AuthGuard\nA Guard to use passport for express or fastify","parameters#Parameters":"Parameter\tType\tstrategyName\tstring\toptions\tAuthGuardOptions","returns#Returns":"typeof AuthGuard","example#Example":"@UseGuards(AuthGuard('local'))\n@Post('login')\nasync authenticateWithGuard(\n  @AuthUser() user: CredentialLookupInterface,\n): Promise<AuthenticationResponseInterface> {\n  const token = this.issueTokenService.issueAccessToken(user.username);\n  return {\n    ...user,\n    ...token,\n  };\n}","defined-in#Defined in":"packages/nestjs-authentication/src/guards/auth.guard.ts:37"}},"/reference/rockets/nestjs-authentication/functions/AuthPublic":{"title":"Function: AuthPublic()","data":{"":"AuthPublic(): CustomDecorator<string>\nDisable ONLY AuthGuards that have the canDisable option set to true.","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-authentication/src/decorators/auth-public.decorator.ts:7"}},"/reference/rockets/nestjs-authentication/functions/AuthUser":{"title":"Function: AuthUser()","data":{"":"AuthUser(...dataOrPipes): ParameterDecorator","parameters#Parameters":"Parameter\tType\t...dataOrPipes\t(string | PipeTransform<any, any> | Type<PipeTransform<any, any>>)[]","returns#Returns":"ParameterDecorator","defined-in#Defined in":"packages/nestjs-common/dist/decorators/auth-user.decorator.d.ts:1"}},"/reference/rockets/nestjs-authentication/functions/PassportStrategyFactory":{"title":"Function: PassportStrategyFactory()","data":{"":"PassportStrategyFactory<T>(strategy, strategyName): (...args) => T","type-parameters#Type Parameters":"Type Parameter\tT extends Strategy<T>","parameters#Parameters":"Parameter\tType\tstrategy\tType<T>\tstrategyName\tstring","returns#Returns":"Function","parameters-1#Parameters":"Parameter\tType\t...args\tany[]","returns-1#Returns":"T","defined-in#Defined in":"packages/nestjs-authentication/src/factories/passport-strategy.factory.ts:5"}},"/reference/rockets/nestjs-authentication/functions/authenticationDefaultConfig":{"title":"Function: authenticationDefaultConfig()","data":{"":"authenticationDefaultConfig(): AuthenticationSettingsInterface","returns#Returns":"AuthenticationSettingsInterface","defined-in#Defined in":"packages/nestjs-authentication/src/config/authentication-default.config.ts:7"}},"/reference/rockets/nestjs-authentication/globals":{"title":"@concepta/nestjs-authentication","data":{"classes#Classes":"AuthenticationJwtResponseDto\nAuthenticationModule\nIssueTokenService\nValidateUserService\nVerifyTokenService","interfaces#Interfaces":"AuthGuardOptions\nAuthenticationOptionsInterface\nIssueTokenServiceInterface\nValidateUserServiceInterface\nVerifyTokenServiceInterface","type-aliases#Type Aliases":"AuthGuardCtr","functions#Functions":"AuthGuard\nAuthPublic\nAuthUser\nPassportStrategyFactory\nauthenticationDefaultConfig"}},"/reference/rockets/nestjs-authentication/interfaces/AuthGuardOptions":{"title":"Interface: AuthGuardOptions","data":{"properties#Properties":"Property\tType\tcanDisable?\tboolean"}},"/reference/rockets/nestjs-authentication/interfaces/ValidateUserServiceInterface":{"title":"Interface: ValidateUserServiceInterface<T, R>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT extends unknown[]\tunknown[]\tR extends ReferenceIdInterface\tReferenceIdInterface","properties#Properties":"Property\tType\tisActive\t(user: R & ReferenceActiveInterface<boolean>) => Promise<boolean>\tvalidateUser\t(..._: T) => Promise<R>"}},"/reference/rockets/nestjs-authentication/interfaces/AuthenticationOptionsInterface":{"title":"Interface: AuthenticationOptionsInterface","data":{"":"Authentication module configuration options interface","properties#Properties":"Property\tType\tissueTokenService?\tIssueTokenServiceInterface\tsettings?\tAuthenticationSettingsInterface\tvalidateTokenService?\tValidateTokenServiceInterface\tverifyTokenService?\tVerifyTokenServiceInterface"}},"/reference/rockets/nestjs-authentication/interfaces/IssueTokenServiceInterface":{"title":"Interface: IssueTokenServiceInterface","data":{"extends#Extends":"JwtIssueServiceInterface","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<string>","parameters#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns#Returns":"Promise<string>","inherited-from#Inherited from":"JwtIssueServiceInterface.accessToken","defined-in#Defined in":"packages/nestjs-jwt/dist/interfaces/jwt-issue-service.interface.d.ts:3","refreshtoken#refreshToken()":"refreshToken(...args): Promise<string>","parameters-1#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns-1#Returns":"Promise<string>","inherited-from-1#Inherited from":"JwtIssueServiceInterface.refreshToken","defined-in-1#Defined in":"packages/nestjs-jwt/dist/interfaces/jwt-issue-service.interface.d.ts:4","responsepayload#responsePayload()":"responsePayload(id): Promise<AuthenticationResponseInterface>","parameters-2#Parameters":"Parameter\tType\tid\tstring","returns-2#Returns":"Promise<AuthenticationResponseInterface>","defined-in-2#Defined in":"packages/nestjs-authentication/src/interfaces/issue-token-service.interface.ts:6"}},"/reference/rockets/nestjs-authentication/interfaces/VerifyTokenServiceInterface":{"title":"Interface: VerifyTokenServiceInterface","data":{"extends#Extends":"JwtVerifyServiceInterface","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<object>","parameters#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns#Returns":"Promise<object>","inherited-from#Inherited from":"JwtVerifyServiceInterface.accessToken","defined-in#Defined in":"packages/nestjs-jwt/dist/interfaces/jwt-verify-service.interface.d.ts:3","refreshtoken#refreshToken()":"refreshToken(...args): Promise<object>","parameters-1#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns-1#Returns":"Promise<object>","inherited-from-1#Inherited from":"JwtVerifyServiceInterface.refreshToken","defined-in-1#Defined in":"packages/nestjs-jwt/dist/interfaces/jwt-verify-service.interface.d.ts:4"}},"/reference/rockets/nestjs-authentication/type-aliases/AuthGuardCtr":{"title":"Type Alias: AuthGuardCtr()","data":{"":"AuthGuardCtr: (strategyName, options) => CanActivate","parameters#Parameters":"Parameter\tType\tstrategyName\tstring\toptions\tAuthGuardOptions","returns#Returns":"CanActivate","defined-in#Defined in":"packages/nestjs-authentication/src/authentication.types.ts:7"}},"/reference/rockets/nestjs-cache/classes/CacheCreateDto":{"title":"Class: CacheCreateDto","data":{"":"Cache Create DTO","extends#Extends":"Pick<CacheDto, \"expiresIn\" | \"key\" | \"type\" | \"data\" | \"assignee\">","implements#Implements":"CacheCreatableInterface","constructors#Constructors":"","new-cachecreatedto#new CacheCreateDto()":"new CacheCreateDto(...args): CacheCreateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"CacheCreateDto","inherited-from#Inherited from":"PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tassignee\tpublic\tReferenceIdInterface<string>\tundefined\tAssignee\tCacheCreatableInterface.assignee PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).assignee\tdata\tpublic\tnull | string\tundefined\tdata\tCacheCreatableInterface.data PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).data\texpiresIn\tpublic\tnull | string\tundefined\tExpressed in seconds or a string describing a time span zeit/ms. Eg: 60, \"2 days\", \"10h\", \"7d\"\tCacheCreatableInterface.expiresIn PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).expiresIn\tkey\tpublic\tstring\t''\tkey\tCacheCreatableInterface.key PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).key\ttype\tpublic\tstring\t''\ttype\tCacheCreatableInterface.type PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).type\targuments\tstatic\tany\tundefined\t-\tPickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).arguments\tcaller\tstatic\tFunction\tundefined\t-\tPickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).caller\tlength\treadonly\tnumber\tundefined\t-\tPickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(CacheDto, [ 'key', 'data', 'type', 'expiresIn', 'assignee', ] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-cache/classes/CacheDto":{"title":"Class: CacheDto","data":{"":"Cache Create DTO","extends#Extends":"CommonEntityDto","implements#Implements":"CacheInterface","constructors#Constructors":"","new-cachedto#new CacheDto()":"new CacheDto(): CacheDto","returns#Returns":"CacheDto","inherited-from#Inherited from":"CommonEntityDto.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tundefined\tAssignee\t-\tdata\tnull | string\tundefined\tdata\t-\tdateCreated\tDate\tundefined\tDate created\tCacheInterface.dateCreated CommonEntityDto.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted\tCacheInterface.dateDeleted CommonEntityDto.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated\tCacheInterface.dateUpdated CommonEntityDto.dateUpdated\texpirationDate\tnull | Date\tundefined\texpirationDate\t-\texpiresIn\tnull | string\tundefined\tExpressed in seconds or a string describing a time span zeit/ms. Eg: 60, \"2 days\", \"10h\", \"7d\"\t-\tid\tstring\tundefined\t-\tCacheInterface.id CommonEntityDto.id\tkey\tstring\t''\tkey\t-\ttype\tstring\t''\ttype\t-\tversion\tnumber\tundefined\tVersion\tCacheInterface.version CommonEntityDto.version"}},"/reference/rockets/nestjs-cache/classes/CacheModule":{"title":"Class: CacheModule","data":{"":"Cache Module","extends#Extends":"CacheModuleClass","constructors#Constructors":"","new-cachemodule#new CacheModule()":"new CacheModule(): CacheModule","returns#Returns":"CacheModule","inherited-from#Inherited from":"CacheModuleClass.constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tCacheOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/cache.module.ts:33","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tCacheOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/cache.module.ts:25","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tCacheAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/cache.module.ts:29","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tCacheOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"CacheModuleClass.register","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/cache.module.ts:17","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tCacheAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"CacheModuleClass.registerAsync","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/cache.module.ts:21"}},"/reference/rockets/nestjs-cache/classes/CachePostgresEntity":{"title":"Class: abstract CachePostgresEntity","data":{"":"Cache Postgres Entity","extends#Extends":"CommonPostgresEntity","implements#Implements":"CacheInterface","constructors#Constructors":"","new-cachepostgresentity#new CachePostgresEntity()":"new CachePostgresEntity(): CachePostgresEntity","returns#Returns":"CachePostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tShould be overwrite by the table it will be assigned to\t-\tdata\tnull | string\tdata of the cache\t-\tdateCreated\tDate\tDate created.\tCacheInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tCacheInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tCacheInterface.dateUpdated CommonPostgresEntity.dateUpdated\texpirationDate\tnull | Date\tDate it will expire\t-\tid\tstring\t-\tCacheInterface.id CommonPostgresEntity.id\tkey\tstring\tkey to be used as reference for the cache data\t-\ttype\tstring\tType of the passcode\t-\tversion\tnumber\tVersion\tCacheInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-cache/classes/CacheService":{"title":"Class: CacheService","data":{"implements#Implements":"CacheServiceInterface","constructors#Constructors":"","new-cacheservice#new CacheService()":"new CacheService(allCacheRepos, settings): CacheService","parameters#Parameters":"Parameter\tType\tallCacheRepos\tRecord<string, Repository<CacheInterface>>\tsettings\tCacheSettingsInterface","returns#Returns":"CacheService","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:28","properties#Properties":"Property\tModifier\tType\tsettings\treadonly\tCacheSettingsInterface","methods#Methods":"","clear#clear()":"clear(assignment, cache, queryOptions?): Promise<void>\nClear all caches for a given assignee.","parameters-1#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the repository\tcache\tPick<CacheInterface, \"assignee\">\tThe cache to clear\tqueryOptions?\tQueryOptionsInterface\t-","returns-1#Returns":"Promise<void>","implementation-of#Implementation of":"CacheServiceInterface.clear","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:196","create#create()":"create(assignment, cache, queryOptions?): Promise<CacheInterface>\nCreate a cache with a for the given assignee.","parameters-2#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe cache assignment\tcache\tCacheCreateDto\tThe data to create\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<CacheInterface>","implementation-of-1#Implementation of":"CacheServiceInterface.create","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:41","delete#delete()":"delete(assignment, cache, queryOptions?): Promise<void>\nDelete a cache based on params","parameters-3#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe cache assignment\tcache\tPick<CacheInterface, \"key\" | \"type\" | \"assignee\">\tThe cache to delete\tqueryOptions?\tQueryOptionsInterface\t-","returns-3#Returns":"Promise<void>","implementation-of-2#Implementation of":"CacheServiceInterface.delete","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:126","deletecache#deleteCache()":"protected deleteCache(assignment, id, queryOptions?): Promise<void>\nInternalDelete CACHE based on assignment","parameters-4#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment to delete id from\tid\tstring | string[]\tThe id or ids to delete\tqueryOptions?\tQueryOptionsInterface\t-","returns-4#Returns":"Promise<void>","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:224","findcache#findCache()":"protected findCache(repoProxy, cache, queryOptions?): Promise<null | CacheInterface>","parameters-5#Parameters":"Parameter\tType\trepoProxy\tRepositoryProxy<CacheInterface>\tcache\tPick<CacheInterface, \"key\" | \"type\" | \"assignee\">\tqueryOptions?\tQueryOptionsInterface","returns-5#Returns":"Promise<null | CacheInterface>","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:278","get#get()":"get(assignment, cache, queryOptions?): Promise<null | CacheInterface>","parameters-6#Parameters":"Parameter\tType\tassignment\tstring\tcache\tPick<CacheInterface, \"key\" | \"type\" | \"assignee\">\tqueryOptions?\tQueryOptionsInterface","returns-6#Returns":"Promise<null | CacheInterface>","implementation-of-3#Implementation of":"CacheServiceInterface.get","defined-in-6#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:176","getassignedcaches#getAssignedCaches()":"getAssignedCaches(assignment, cache, queryOptions?): Promise<CacheInterface[]>\nGet all CACHEs for assignee.","parameters-7#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the check\tcache\tPick<CacheInterface, \"assignee\">\tThe cache to get assignments\tqueryOptions?\tQueryOptionsInterface\t-","returns-7#Returns":"Promise<CacheInterface[]>","implementation-of-4#Implementation of":"CacheServiceInterface.getAssignedCaches","defined-in-7#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:145","getassignmentrepo#getAssignmentRepo()":"protected getAssignmentRepo(assignment): Repository<CacheInterface>\nInternalGet the assignment repo for the given assignment.","parameters-8#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe cache assignment","returns-8#Returns":"Repository<CacheInterface>","defined-in-8#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:312","update#update()":"update(assignment, cache, queryOptions?): Promise<CacheInterface>","parameters-9#Parameters":"Parameter\tType\tassignment\tstring\tcache\tCacheUpdatableInterface\tqueryOptions?\tQueryOptionsInterface","returns-9#Returns":"Promise<CacheInterface>","implementation-of-5#Implementation of":"CacheServiceInterface.update","defined-in-9#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:78","updateorcreate#updateOrCreate()":"updateOrCreate(assignment, cache, queryOptions?): Promise<CacheInterface>","parameters-10#Parameters":"Parameter\tType\tassignment\tstring\tcache\tCacheCreateDto\tqueryOptions?\tQueryOptionsInterface","returns-10#Returns":"Promise<CacheInterface>","implementation-of-6#Implementation of":"CacheServiceInterface.updateOrCreate","defined-in-10#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:242","validatedto#validateDto()":"protected validateDto<T>(type, data): Promise<T>","type-parameters#Type Parameters":"Type Parameter\tT extends DeepPartial<CacheInterface>","parameters-11#Parameters":"Parameter\tType\ttype\tType<T>\tdata\tT","returns-11#Returns":"Promise<T>","defined-in-11#Defined in":".tmp/repos/rockets/packages/nestjs-cache/src/services/cache.service.ts:256"}},"/reference/rockets/nestjs-cache/classes/CacheSqliteEntity":{"title":"Class: abstract CacheSqliteEntity","data":{"":"Cache Sqlite Entity","extends#Extends":"CommonSqliteEntity","implements#Implements":"CacheInterface","constructors#Constructors":"","new-cachesqliteentity#new CacheSqliteEntity()":"new CacheSqliteEntity(): CacheSqliteEntity","returns#Returns":"CacheSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tShould be overwrite by the table it will be assigned to\t-\tdata\tstring\tdata of the cache\t-\tdateCreated\tDate\tDate created.\tCacheInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tCacheInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tCacheInterface.dateUpdated CommonSqliteEntity.dateUpdated\texpirationDate\tnull | Date\tDate it will expire\t-\tid\tstring\t-\tCacheInterface.id CommonSqliteEntity.id\tkey\tstring\tkey to be used as reference for the cache data\t-\ttype\tstring\tType of the passcode\t-\tversion\tnumber\tVersion\tCacheInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-cache/classes/CacheUpdateDto":{"title":"Class: CacheUpdateDto","data":{"":"Cache Create DTO","extends#Extends":"Pick<CacheDto, \"expiresIn\" | \"key\" | \"type\" | \"data\" | \"assignee\">","implements#Implements":"CacheUpdatableInterface","constructors#Constructors":"","new-cacheupdatedto#new CacheUpdateDto()":"new CacheUpdateDto(...args): CacheUpdateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"CacheUpdateDto","inherited-from#Inherited from":"PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tassignee\tpublic\tReferenceIdInterface<string>\tundefined\tAssignee\tCacheUpdatableInterface.assignee PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).assignee\tdata\tpublic\tnull | string\tundefined\tdata\tCacheUpdatableInterface.data PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).data\texpiresIn\tpublic\tnull | string\tundefined\tExpressed in seconds or a string describing a time span zeit/ms. Eg: 60, \"2 days\", \"10h\", \"7d\"\tCacheUpdatableInterface.expiresIn PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).expiresIn\tkey\tpublic\tstring\t''\tkey\tCacheUpdatableInterface.key PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).key\ttype\tpublic\tstring\t''\ttype\tCacheUpdatableInterface.type PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).type\targuments\tstatic\tany\tundefined\t-\tPickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).arguments\tcaller\tstatic\tFunction\tundefined\t-\tPickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).caller\tlength\treadonly\tnumber\tundefined\t-\tPickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(CacheDto, [ 'key', 'type', 'assignee', 'data', 'expiresIn', ] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-cache/globals":{"title":"@concepta/nestjs-cache","data":{"classes#Classes":"CacheCreateDto\nCacheDto\nCacheModule\nCachePostgresEntity\nCacheService\nCacheSqliteEntity\nCacheUpdateDto"}},"/reference/rockets/nestjs-common/README":{"title":"Rockets NestJS Common","data":{"":"The common module contains commonly used utilities, DTOs, etc.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-common"}},"/reference/rockets/nestjs-common/classes/AuditDto":{"title":"Class: AuditDto","data":{"":"Audit DTO","extended-by#Extended by":"CommonEntityDto","implements#Implements":"AuditInterface","constructors#Constructors":"","new-auditdto#new AuditDto()":"new AuditDto(): AuditDto","returns#Returns":"AuditDto","properties#Properties":"Property\tType\tDescription\tdateCreated\tDate\tDate created\tdateDeleted\tAuditDateDeleted\tDate deleted\tdateUpdated\tDate\tDate updated\tversion\tnumber\tVersion"}},"/reference/rockets/nestjs-common/classes/CommonEntityDto":{"title":"Class: CommonEntityDto","data":{"":"User DTO","extends#Extends":"AuditDto","extended-by#Extended by":"","implements#Implements":"ReferenceIdInterface\nAuditInterface","constructors#Constructors":"","new-commonentitydto#new CommonEntityDto()":"new CommonEntityDto(): CommonEntityDto","returns#Returns":"CommonEntityDto","inherited-from#Inherited from":"AuditDto.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tdateCreated\tDate\tundefined\tDate created\tAuditInterface.dateCreated AuditDto.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted\tAuditInterface.dateDeleted AuditDto.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated\tAuditInterface.dateUpdated AuditDto.dateUpdated\tid\tstring\t''\t-\t-\tversion\tnumber\tundefined\tVersion\tAuditInterface.version AuditDto.version"}},"/reference/rockets/nestjs-common/classes/ReferenceIdDto":{"title":"Class: ReferenceIdDto","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","implements#Implements":"ReferenceIdInterface","constructors#Constructors":"","new-referenceiddto#new ReferenceIdDto()":"new ReferenceIdDto(): ReferenceIdDto","returns#Returns":"ReferenceIdDto","properties#Properties":"Property\tType\tDefault value\tid\tstring\t''"}},"/reference/rockets/nestjs-common/functions/AuthUser":{"title":"Function: AuthUser()","data":{"":"AuthUser(...dataOrPipes): ParameterDecorator\nDecorator that takes a property name as key, and returns the\nassociated value if it exists (or undefined if it doesn't exist,\nor if the user object has not been created).","parameters#Parameters":"Parameter\tType\t...dataOrPipes\t(string | PipeTransform<any, any> | Type<PipeTransform<any, any>>)[]","returns#Returns":"ParameterDecorator","example#Example":"@Get()\nasync findOne(@AuthUser('firstName') firstName: string) {\n  console.log(`Hello ${firstName}`);\n}","defined-in#Defined in":"packages/nestjs-common/src/decorators/auth-user.decorator.ts:17"}},"/reference/rockets/nestjs-common/functions/createSettingsProvider":{"title":"Function: createSettingsProvider()","data":{"":"createSettingsProvider<ModuleSettingsType, ModuleOptionsType>(options): Provider","type-parameters#Type Parameters":"Type Parameter\tModuleSettingsType\tModuleOptionsType extends ModuleOptionsSettingsInterface<ModuleSettingsType, ModuleOptionsType>","parameters#Parameters":"Parameter\tType\toptions\tobject\toptions.optionsOverrides?\tModuleOptionsType\toptions.optionsToken\tInjectionToken\toptions.settingsKey\tstring\toptions.settingsToken\tstring","returns#Returns":"Provider","defined-in#Defined in":"packages/nestjs-common/src/modules/utils/create-settings-provider.ts:4"}},"/reference/rockets/nestjs-common/globals":{"title":"@concepta/nestjs-common","data":{"classes#Classes":"AuditDto\nCommonEntityDto\nReferenceIdDto","functions#Functions":"AuthUser\ncreateSettingsProvider"}},"/reference/rockets/nestjs-core/README":{"title":"Rockets NestJS Core","data":{"":"The core module is a dependency of all Rockets modules.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-core","configuration#Configuration":"Available configuration options:"}},"/reference/rockets/nestjs-core/globals":{"title":"@concepta/nestjs-core","data":{"interfaces#Interfaces":"ModuleOptionsControllerInterface\nModuleOptionsSettingsInterface"}},"/reference/rockets/nestjs-core/interfaces/ModuleOptionsControllerInterface":{"title":"Interface: ModuleOptionsControllerInterface","data":{"properties#Properties":"Property\tType\tcontroller?\tfalse | Type<any> | Type<any>[]"}},"/reference/rockets/nestjs-core/interfaces/ModuleOptionsSettingsInterface":{"title":"Interface: ModuleOptionsSettingsInterface<T>","data":{"type-parameters#Type Parameters":"Type Parameter\tT","properties#Properties":"Property\tType\tsettings?\tT\tsettingsTransform?\t(settings?: T, defaultSettings?: T) => T"}},"/reference/rockets/nestjs-crud/README":{"title":"Rockets NestJS CRUD","data":{"":"Extremely powerful CRUD module that is an extension/wrapper of the popular @nestjsx/crud module.We love the original module, but in many cases it was not flexible enough. We have retained all of the options and signatures, but pushed\nthe options from the controller level down to the method level.","project#Project":"","installation#Installation":"Prerequisites\nyarn add pg typeorm class-transformer class-validatorThe crud module\nyarn add @concepta/nestjs-crud"}},"/reference/rockets/nestjs-crud/classes/CrudCreateManyDto":{"title":"Class: CrudCreateManyDto<T>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tT","implements#Implements":"CrudCreateManyInterface<T>","constructors#Constructors":"","new-crudcreatemanydto#new CrudCreateManyDto()":"new CrudCreateManyDto<T>(): CrudCreateManyDto<T>","returns#Returns":"CrudCreateManyDto<T>","properties#Properties":"Property\tType\tDefault value\tbulk\tT[]\t[]"}},"/reference/rockets/nestjs-crud/classes/CrudModule":{"title":"Class: CrudModule","data":{"extends#Extends":"CrudModuleClass","constructors#Constructors":"","new-crudmodule#new CrudModule()":"new CrudModule(): CrudModule","returns#Returns":"CrudModule","inherited-from#Inherited from":"CrudModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tCrudOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-crud/src/crud.module.ts:29","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tCrudOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-crud/src/crud.module.ts:21","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tCrudAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-crud/src/crud.module.ts:25","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tCrudOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"CrudModuleClass.register","defined-in-4#Defined in":"packages/nestjs-crud/src/crud.module.ts:13","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tCrudAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"CrudModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-crud/src/crud.module.ts:17"}},"/reference/rockets/nestjs-crud/classes/CrudQueryHelper":{"title":"Class: CrudQueryHelper","data":{"constructors#Constructors":"","new-crudqueryhelper#new CrudQueryHelper()":"new CrudQueryHelper(): CrudQueryHelper","returns#Returns":"CrudQueryHelper","methods#Methods":"","addsearch#addSearch()":"addSearch(req, search?): void","parameters#Parameters":"Parameter\tType\treq\tCrudRequest\tsearch?\tSCondition","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/util/crud-query.helper.ts:39","mergeoptions#mergeOptions()":"mergeOptions(req, options): void","parameters-1#Parameters":"Parameter\tType\treq\tCrudRequest\toptions\tOmit<CrudQueryOptionsInterface, \"filter\">","returns-2#Returns":"void","defined-in-1#Defined in":"packages/nestjs-crud/src/util/crud-query.helper.ts:20","modifyrequest#modifyRequest()":"modifyRequest(req, options?): void","parameters-2#Parameters":"Parameter\tType\treq\tCrudRequest\toptions?\tCrudQueryOptionsInterface","returns-3#Returns":"void","defined-in-2#Defined in":"packages/nestjs-crud/src/util/crud-query.helper.ts:8"}},"/reference/rockets/nestjs-crud/classes/CrudResponsePaginatedDto":{"title":"Class: CrudResponsePaginatedDto<T>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tT","implements#Implements":"CrudResponsePaginatedInterface<T>","constructors#Constructors":"","new-crudresponsepaginateddto#new CrudResponsePaginatedDto()":"new CrudResponsePaginatedDto<T>(): CrudResponsePaginatedDto<T>","returns#Returns":"CrudResponsePaginatedDto<T>","properties#Properties":"Property\tType\tDefault value\tcount\tnumber\t0\tdata\tT[]\t[]\tpage\tnumber\t0\tpageCount\tnumber\t0\ttotal\tnumber\t0"}},"/reference/rockets/nestjs-crud/classes/TypeOrmCrudService":{"title":"Class: TypeOrmCrudService<T>","data":{"extends#Extends":"TypeOrmCrudService<T>","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tT extends ObjectLiteral","constructors#Constructors":"","new-typeormcrudservice#new TypeOrmCrudService()":"new TypeOrmCrudService<T>(repo): TypeOrmCrudService<T>","parameters#Parameters":"Parameter\tType\trepo\tRepository<T>","returns#Returns":"TypeOrmCrudService<T>","overrides#Overrides":"xTypeOrmCrudService<T>.constructor","defined-in#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:20","properties#Properties":"Property\tModifier\tType\tInherited from\talias\treadonly\tstring\txTypeOrmCrudService.alias\tcount\treadonly\t(options?: FindManyOptions<T>) => Promise<number>\txTypeOrmCrudService.count\tcrudQueryHelper\treadonly\tCrudQueryHelper\t-\tdbName\tprotected\t\"mysql\" | \"mariadb\" | \"postgres\" | \"cockroachdb\" | \"sqlite\" | \"mssql\" | \"sap\" | \"oracle\" | \"cordova\" | \"nativescript\" | \"react-native\" | \"sqljs\" | \"mongodb\" | \"aurora-mysql\" | \"aurora-postgres\" | \"expo\" | \"better-sqlite3\" | \"capacitor\" | \"spanner\"\txTypeOrmCrudService.dbName\tentityColumns\tprotected\tstring[]\txTypeOrmCrudService.entityColumns\tentityColumnsHash\tprotected\tObjectLiteral\txTypeOrmCrudService.entityColumnsHash\tentityHasDeleteColumn\tprotected\tboolean\txTypeOrmCrudService.entityHasDeleteColumn\tentityPrimaryColumns\tprotected\tstring[]\txTypeOrmCrudService.entityPrimaryColumns\tentityRelationsHash\tprotected\tMap<string, IAllowedRelation>\txTypeOrmCrudService.entityRelationsHash\tentityType\treadonly\tClassType<T>\txTypeOrmCrudService.entityType\tfind\treadonly\t(options?: FindManyOptions<T>) => Promise<T[]>\txTypeOrmCrudService.find\tfindOne\treadonly\t(options: FindOneOptions<T>) => Promise<null | T>\txTypeOrmCrudService.findOne\trepo\tprotected\tRepository<T>\txTypeOrmCrudService.repo\tsqlInjectionRegEx\tprotected\tRegExp[]\txTypeOrmCrudService.sqlInjectionRegEx","methods#Methods":"","builderaddbrackets#builderAddBrackets()":"protected builderAddBrackets(builder, condition, brackets): void","parameters-1#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<T>\tcondition\tSConditionKey\tbrackets\tBrackets","returns-1#Returns":"void","inherited-from#Inherited from":"xTypeOrmCrudService.builderAddBrackets","defined-in-1#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:53","buildersetwhere#builderSetWhere()":"protected builderSetWhere(builder, condition, field, value, operator?): void","parameters-2#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<T>\tcondition\tSConditionKey\tfield\tstring\tvalue\tany\toperator?\tComparisonOperator","returns-2#Returns":"void","inherited-from-1#Inherited from":"xTypeOrmCrudService.builderSetWhere","defined-in-2#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:54","createbuilder#createBuilder()":"createBuilder(parsed, options, many?, withDeleted?): Promise<SelectQueryBuilder<T>>","parameters-3#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions\tmany?\tboolean\twithDeleted?\tboolean","returns-3#Returns":"Promise<SelectQueryBuilder<T>>","inherited-from-2#Inherited from":"xTypeOrmCrudService.createBuilder","defined-in-3#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:38","createmany#createMany()":"createMany(req, dto, queryOptions?): Promise<T[]>","parameters-4#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tCreateManyDto<DeepPartial<T>>\tqueryOptions?\tCrudQueryOptionsInterface","returns-4#Returns":"Promise<T[]>","overrides-1#Overrides":"xTypeOrmCrudService.createMany","defined-in-4#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:70","createone#createOne()":"createOne(req, dto, queryOptions?): Promise<T>","parameters-5#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<T>\tqueryOptions?\tCrudQueryOptionsInterface","returns-5#Returns":"Promise<T>","overrides-2#Overrides":"xTypeOrmCrudService.createOne","defined-in-5#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:85","createpageinfo#createPageInfo()":"createPageInfo(data, total, limit, offset): GetManyDefaultResponse<T>","parameters-6#Parameters":"Parameter\tType\tdata\tT[]\ttotal\tnumber\tlimit\tnumber\toffset\tnumber","returns-6#Returns":"GetManyDefaultResponse<T>","inherited-from-3#Inherited from":"xTypeOrmCrudService.createPageInfo","defined-in-6#Defined in":"node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:15","decidepagination#decidePagination()":"decidePagination(parsed, options): boolean","parameters-7#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions","returns-7#Returns":"boolean","inherited-from-4#Inherited from":"xTypeOrmCrudService.decidePagination","defined-in-7#Defined in":"node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:16","deleteone#deleteOne()":"deleteOne(req, queryOptions?): Promise<void | T>","parameters-8#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-8#Returns":"Promise<void | T>","overrides-3#Overrides":"xTypeOrmCrudService.deleteOne","defined-in-8#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:130","dogetmany#doGetMany()":"protected doGetMany(builder, query, options): Promise<GetManyDefaultResponse<T> | T[]>","parameters-9#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<T>\tquery\tParsedRequestParams\toptions\tCrudRequestOptions","returns-9#Returns":"Promise<GetManyDefaultResponse<T> | T[]>","inherited-from-5#Inherited from":"xTypeOrmCrudService.doGetMany","defined-in-9#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:39","getallowedcolumns#getAllowedColumns()":"protected getAllowedColumns(columns, options): string[]","parameters-10#Parameters":"Parameter\tType\tcolumns\tstring[]\toptions\tQueryOptions","returns-10#Returns":"string[]","inherited-from-6#Inherited from":"xTypeOrmCrudService.getAllowedColumns","defined-in-10#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:43","getentitycolumns#getEntityColumns()":"protected getEntityColumns(entityMetadata): object","parameters-11#Parameters":"Parameter\tType\tentityMetadata\tEntityMetadata","returns-11#Returns":"object\nName\tType\tcolumns\tstring[]\tprimaryColumns\tstring[]","inherited-from-7#Inherited from":"xTypeOrmCrudService.getEntityColumns","defined-in-11#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:44","getfieldwithalias#getFieldWithAlias()":"protected getFieldWithAlias(field, sort?): string","parameters-12#Parameters":"Parameter\tType\tfield\tstring\tsort?\tboolean","returns-12#Returns":"string","inherited-from-8#Inherited from":"xTypeOrmCrudService.getFieldWithAlias","defined-in-12#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:58","getmany#getMany()":"getMany(req, queryOptions?): Promise<T[] | CrudResultPaginatedInterface<T>>","parameters-13#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-13#Returns":"Promise<T[] | CrudResultPaginatedInterface<T>>","overrides-4#Overrides":"xTypeOrmCrudService.getMany","defined-in-13#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:26","getone#getOne()":"getOne(req, queryOptions?): Promise<T>","parameters-14#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-14#Returns":"Promise<T>","overrides-5#Overrides":"xTypeOrmCrudService.getOne","defined-in-14#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:56","getoneorfail#getOneOrFail()":"protected getOneOrFail(req, shallow?, withDeleted?): Promise<T>","parameters-15#Parameters":"Parameter\tType\treq\tCrudRequest\tshallow?\tboolean\twithDeleted?\tboolean","returns-15#Returns":"Promise<T>","inherited-from-9#Inherited from":"xTypeOrmCrudService.getOneOrFail","defined-in-15#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:41","getparamfilters#getParamFilters()":"getParamFilters(parsed): ObjectLiteral","parameters-16#Parameters":"Parameter\tType\tparsed\tParsedRequestParams","returns-16#Returns":"ObjectLiteral","inherited-from-10#Inherited from":"xTypeOrmCrudService.getParamFilters","defined-in-16#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:37","getprimaryparams#getPrimaryParams()":"getPrimaryParams(options): string[]","parameters-17#Parameters":"Parameter\tType\toptions\tCrudRequestOptions","returns-17#Returns":"string[]","inherited-from-11#Inherited from":"xTypeOrmCrudService.getPrimaryParams","defined-in-17#Defined in":"node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:19","getrelationmetadata#getRelationMetadata()":"protected getRelationMetadata(field, options): IAllowedRelation","parameters-18#Parameters":"Parameter\tType\tfield\tstring\toptions\tJoinOption","returns-18#Returns":"IAllowedRelation","inherited-from-12#Inherited from":"xTypeOrmCrudService.getRelationMetadata","defined-in-18#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:48","getselect#getSelect()":"protected getSelect(query, options): string[]","parameters-19#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-19#Returns":"string[]","overrides-6#Overrides":"xTypeOrmCrudService.getSelect","defined-in-19#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:210","getskip#getSkip()":"getSkip(query, take): null | number","parameters-20#Parameters":"Parameter\tType\tquery\tParsedRequestParams\ttake\tnumber","returns-20#Returns":"null | number","inherited-from-13#Inherited from":"xTypeOrmCrudService.getSkip","defined-in-20#Defined in":"node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:18","getsort#getSort()":"protected getSort(query, options): ObjectLiteral","parameters-21#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-21#Returns":"ObjectLiteral","inherited-from-14#Inherited from":"xTypeOrmCrudService.getSort","defined-in-21#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:57","gettake#getTake()":"getTake(query, options): null | number","parameters-22#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-22#Returns":"null | number","inherited-from-15#Inherited from":"xTypeOrmCrudService.getTake","defined-in-22#Defined in":"node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:17","mapoperatorstoquery#mapOperatorsToQuery()":"protected mapOperatorsToQuery(cond, param): object","parameters-23#Parameters":"Parameter\tType\tcond\tQueryFilter\tparam\tany","returns-23#Returns":"object\nName\tType\tparams\tObjectLiteral\tstr\tstring","inherited-from-16#Inherited from":"xTypeOrmCrudService.mapOperatorsToQuery","defined-in-23#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:60","mapsort#mapSort()":"protected mapSort(sort): ObjectLiteral","parameters-24#Parameters":"Parameter\tType\tsort\tQuerySort[]","returns-24#Returns":"ObjectLiteral","inherited-from-17#Inherited from":"xTypeOrmCrudService.mapSort","defined-in-24#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:59","oninitmapentitycolumns#onInitMapEntityColumns()":"protected onInitMapEntityColumns(): void","returns-25#Returns":"void","inherited-from-18#Inherited from":"xTypeOrmCrudService.onInitMapEntityColumns","defined-in-25#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:40","prepareentitybeforesave#prepareEntityBeforeSave()":"protected prepareEntityBeforeSave(dto, parsed): T","parameters-25#Parameters":"Parameter\tType\tdto\tDeepPartial<T>\tparsed\tParsedRequestParams","returns-26#Returns":"T","inherited-from-19#Inherited from":"xTypeOrmCrudService.prepareEntityBeforeSave","defined-in-26#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:42","recoverone#recoverOne()":"recoverOne(req, queryOptions?): Promise<T>","parameters-26#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-27#Returns":"Promise<T>","overrides-7#Overrides":"xTypeOrmCrudService.recoverOne","defined-in-27#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:144","replaceone#replaceOne()":"replaceOne(req, dto, queryOptions?): Promise<T>","parameters-27#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<T>\tqueryOptions?\tCrudQueryOptionsInterface","returns-28#Returns":"Promise<T>","overrides-8#Overrides":"xTypeOrmCrudService.replaceOne","defined-in-28#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:115","setandwhere#setAndWhere()":"protected setAndWhere(cond, i, builder): void","parameters-28#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<T> | WhereExpression","returns-29#Returns":"void","inherited-from-20#Inherited from":"xTypeOrmCrudService.setAndWhere","defined-in-29#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:50","setjoin#setJoin()":"protected setJoin(cond, joinOptions, builder): boolean","parameters-29#Parameters":"Parameter\tType\tcond\tQueryJoin\tjoinOptions\tJoinOptions\tbuilder\tSelectQueryBuilder<T>","returns-30#Returns":"boolean","overrides-9#Overrides":"xTypeOrmCrudService.setJoin","defined-in-30#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:162","setorwhere#setOrWhere()":"protected setOrWhere(cond, i, builder): void","parameters-30#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<T> | WhereExpression","returns-31#Returns":"void","inherited-from-21#Inherited from":"xTypeOrmCrudService.setOrWhere","defined-in-31#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:51","setsearchcondition#setSearchCondition()":"protected setSearchCondition(builder, search, condition?): void","parameters-31#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<T>\tsearch\tSCondition\tcondition?\tSConditionKey","returns-32#Returns":"void","inherited-from-22#Inherited from":"xTypeOrmCrudService.setSearchCondition","defined-in-32#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:52","setsearchfieldobjectcondition#setSearchFieldObjectCondition()":"protected setSearchFieldObjectCondition(builder, condition, field, object): void","parameters-32#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<T>\tcondition\tSConditionKey\tfield\tstring\tobject\tany","returns-33#Returns":"void","inherited-from-23#Inherited from":"xTypeOrmCrudService.setSearchFieldObjectCondition","defined-in-33#Defined in":"node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:55","throwbadrequestexception#throwBadRequestException()":"throwBadRequestException(msg?): BadRequestException","parameters-33#Parameters":"Parameter\tType\tmsg?\tany","returns-34#Returns":"BadRequestException","inherited-from-24#Inherited from":"xTypeOrmCrudService.throwBadRequestException","defined-in-34#Defined in":"node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:13","thrownotfoundexception#throwNotFoundException()":"throwNotFoundException(name): NotFoundException","parameters-34#Parameters":"Parameter\tType\tname\tstring","returns-35#Returns":"NotFoundException","inherited-from-25#Inherited from":"xTypeOrmCrudService.throwNotFoundException","defined-in-35#Defined in":"node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:14","transaction#transaction()":"transaction(options?): TransactionProxy","parameters-35#Parameters":"Parameter\tType\toptions?\tSafeTransactionOptionsInterface","returns-36#Returns":"TransactionProxy","defined-in-36#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:158","updateone#updateOne()":"updateOne(req, dto, queryOptions?): Promise<T>","parameters-36#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<T>\tqueryOptions?\tCrudQueryOptionsInterface","returns-37#Returns":"Promise<T>","overrides-10#Overrides":"xTypeOrmCrudService.updateOne","defined-in-37#Defined in":"packages/nestjs-crud/src/services/typeorm-crud.service.ts:100"}},"/reference/rockets/nestjs-crud/functions/CrudAction":{"title":"Function: CrudAction()","data":{"":"CrudAction(action): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD action route decorator","parameters#Parameters":"Parameter\tType\taction\tCrudActions","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-action.decorator.ts:9"}},"/reference/rockets/nestjs-crud/functions/CrudAllow":{"title":"Function: CrudAllow()","data":{"":"CrudAllow(fields): CustomDecorator<string>\nCRUD allow route decorator.Set the CRUD allow query option.","parameters#Parameters":"Parameter\tType\tfields\tundefined | QueryFields","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-allow.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudAlwaysPaginate":{"title":"Function: CrudAlwaysPaginate()","data":{"":"CrudAlwaysPaginate(alwaysPaginate): CustomDecorator<string>\nCRUD always paginate route decorator.Set the CRUD always paginate query option.","parameters#Parameters":"Parameter\tType\talwaysPaginate\tundefined | boolean","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-always-paginate.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudBody":{"title":"Function: CrudBody()","data":{"":"CrudBody(options?): ParameterDecorator\n@CrudBody() parameter decorator","parameters#Parameters":"Parameter\tType\toptions?\tCrudBodyOptionsInterface","returns#Returns":"ParameterDecorator","defined-in#Defined in":"packages/nestjs-crud/src/decorators/params/crud-body.decorator.ts:11"}},"/reference/rockets/nestjs-crud/functions/CrudCache":{"title":"Function: CrudCache()","data":{"":"CrudCache(cache): CustomDecorator<string>\nCRUD cache route decorator.Set the CRUD cache query option.","parameters#Parameters":"Parameter\tType\tcache\tundefined | number | false","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-cache.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudController":{"title":"Function: CrudController()","data":{"":"CrudController(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD controller decoratorThis decorator is a helper for calling the most common controller level decorators.","parameters#Parameters":"Parameter\tType\toptions\tCrudControllerOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/controller/crud-controller.decorator.ts:20"}},"/reference/rockets/nestjs-crud/functions/CrudCreateMany":{"title":"Function: CrudCreateMany()","data":{"":"CrudCreateMany(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Create Many route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudCreateManyOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-create-many.decorator.ts:14"}},"/reference/rockets/nestjs-crud/functions/CrudCreateOne":{"title":"Function: CrudCreateOne()","data":{"":"CrudCreateOne(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Create One route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudCreateOneOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-create-one.decorator.ts:14"}},"/reference/rockets/nestjs-crud/functions/CrudDeleteOne":{"title":"Function: CrudDeleteOne()","data":{"":"CrudDeleteOne(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Delete One route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudDeleteOneOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-delete-one.decorator.ts:18"}},"/reference/rockets/nestjs-crud/functions/CrudExclude":{"title":"Function: CrudExclude()","data":{"":"CrudExclude(fields): CustomDecorator<string>\nCRUD exclude route decorator.Set the CRUD exclude query option.","parameters#Parameters":"Parameter\tType\tfields\tundefined | QueryFields","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-exclude.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudFilter":{"title":"Function: CrudFilter()","data":{"":"CrudFilter(filters): CustomDecorator<string>\nCRUD filter route decorator.Set the CRUD filter query option.","parameters#Parameters":"Parameter\tType\tfilters\tundefined | SCondition","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-filter.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudJoin":{"title":"Function: CrudJoin()","data":{"":"CrudJoin(joins): CustomDecorator<string>\nCRUD join route decorator.Set the CRUD join query option.","parameters#Parameters":"Parameter\tType\tjoins\tundefined | JoinOptions","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-join.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudLimit":{"title":"Function: CrudLimit()","data":{"":"CrudLimit(limit): CustomDecorator<string>\nCRUD limit route decorator.Set the CRUD limit query option.","parameters#Parameters":"Parameter\tType\tlimit\tundefined | number","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-limit.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudMaxLimit":{"title":"Function: CrudMaxLimit()","data":{"":"CrudMaxLimit(maxLimit): CustomDecorator<string>\nCRUD max limit route decorator.Set the CRUD max limit query option.","parameters#Parameters":"Parameter\tType\tmaxLimit\tundefined | number","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-max-limit.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudModel":{"title":"Function: CrudModel()","data":{"":"CrudModel(options): CustomDecorator<string>\nCRUD Model route decorator.Set the CRUD model, or override the model set by the @CrudController decorator.","parameters#Parameters":"Parameter\tType\toptions\tCrudModelOptionsInterface","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-model.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudParams":{"title":"Function: CrudParams()","data":{"":"CrudParams(params): CustomDecorator<string>\nCRUD Params route decorator.Set the CRUD params.","parameters#Parameters":"Parameter\tType\tparams\tParamsOptions","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-params.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudReadAll":{"title":"Function: CrudReadAll()","data":{"":"CrudReadAll(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Read All route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudReadAllOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-read-all.decorator.ts:14"}},"/reference/rockets/nestjs-crud/functions/CrudReadMany":{"title":"Function: CrudReadMany()","data":{"":"CrudReadMany(...args): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Read Many route decorator (alias for Read All)","parameters#Parameters":"Parameter\tType\t...args\t[CrudReadAllOptionsInterface]","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-read-many.decorator.ts:6"}},"/reference/rockets/nestjs-crud/functions/CrudReadOne":{"title":"Function: CrudReadOne()","data":{"":"CrudReadOne(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Read One route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudReadOneOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-read-one.decorator.ts:16"}},"/reference/rockets/nestjs-crud/functions/CrudRecoverOne":{"title":"Function: CrudRecoverOne()","data":{"":"CrudRecoverOne(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Recover One route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudRecoverOneOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-recover-one.decorator.ts:18"}},"/reference/rockets/nestjs-crud/functions/CrudReplaceOne":{"title":"Function: CrudReplaceOne()","data":{"":"CrudReplaceOne(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Replace One route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudReplaceOneOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-replace-one.decorator.ts:18"}},"/reference/rockets/nestjs-crud/functions/CrudRequest":{"title":"Function: CrudRequest()","data":{"":"CrudRequest(...dataOrPipes): ParameterDecorator\n@CrudRequest() parameter decorator","parameters#Parameters":"Parameter\tType\t...dataOrPipes\t(PipeTransform<any, any> | Type<PipeTransform<any, any>> | CrudRequestInterface)[]","returns#Returns":"ParameterDecorator","defined-in#Defined in":"packages/nestjs-crud/src/decorators/params/crud-request.decorator.ts:8"}},"/reference/rockets/nestjs-crud/functions/CrudSerialize":{"title":"Function: CrudSerialize()","data":{"":"CrudSerialize(options?): CustomDecorator<string>\nCRUD serialize route decorator","parameters#Parameters":"Parameter\tType\toptions?\tCrudSerializationOptionsInterface","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-serialize.decorator.ts:8"}},"/reference/rockets/nestjs-crud/functions/CrudSoftDelete":{"title":"Function: CrudSoftDelete()","data":{"":"CrudSoftDelete(softDelete): CustomDecorator<string>\nCRUD soft delete route decorator.Set the CRUD soft delete query option.","parameters#Parameters":"Parameter\tType\tsoftDelete\tundefined | boolean","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-soft-delete.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudSort":{"title":"Function: CrudSort()","data":{"":"CrudSort(sort): CustomDecorator<string>\nCRUD sort route decorator.Set the CRUD sort query option.","parameters#Parameters":"Parameter\tType\tsort\tundefined | QuerySort[]","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-sort.decorator.ts:10"}},"/reference/rockets/nestjs-crud/functions/CrudUpdateOne":{"title":"Function: CrudUpdateOne()","data":{"":"CrudUpdateOne(options): <TFunction, Y>(target, propertyKey?, descriptor?) => void\nCRUD Update One route decorator","parameters#Parameters":"Parameter\tType\toptions\tCrudUpdateOneOptionsInterface","returns#Returns":"Function","type-parameters#Type Parameters":"Type Parameter\tTFunction extends Function\tY","parameters-1#Parameters":"Parameter\tType\ttarget\tobject | TFunction\tpropertyKey?\tstring | symbol\tdescriptor?\tTypedPropertyDescriptor<Y>","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-crud/src/decorators/actions/crud-update-one.decorator.ts:18"}},"/reference/rockets/nestjs-crud/functions/CrudValidate":{"title":"Function: CrudValidate()","data":{"":"CrudValidate(options?): CustomDecorator<string>\nCrud validate options decorator.Set the fallback ValidationPipe options for all method\nparameters called with the CrudBody decorator.If this decorator is used on a controller, it will use the given options to\nevery controller method's Crud param that does NOT have validations explicitly set.If this decorator is used on a method, it will use the given options for\nevery Crud parameter on the method that does NOT have validations explicitly set.","parameters#Parameters":"Parameter\tType\tDescription\toptions?\tfalse | ValidationPipeOptions\tcrud validation options","returns#Returns":"CustomDecorator<string>","defined-in#Defined in":"packages/nestjs-crud/src/decorators/routes/crud-validate.decorator.ts:19"}},"/reference/rockets/nestjs-crud/interfaces/CrudControllerInterface":{"title":"Interface: CrudControllerInterface<Entity, Creatable, Updatable, Replaceable>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tEntity\t-\tCreatable extends DeepPartial<Entity>\t-\tUpdatable extends DeepPartial<Entity>\t-\tReplaceable extends Creatable\tCreatable","properties#Properties":"Property\tType\tcreateMany?\t(crudRequest: CrudRequestInterface, dto: CreateManyDto<Creatable>, ...rest: AdditionalCrudMethodArgs) => Promise<Entity[]>\tcreateOne?\t(crudRequest: CrudRequestInterface, dto: Creatable, ...rest: AdditionalCrudMethodArgs) => Promise<Entity>\tdeleteOne?\t(crudRequest: CrudRequestInterface, ...rest: AdditionalCrudMethodArgs) => Promise<void | Entity>\tgetMany?\t(crudRequest: CrudRequestInterface, ...rest: AdditionalCrudMethodArgs) => Promise<CrudResponsePaginatedInterface<Entity> | Entity[]>\tgetOne?\t(crudRequest: CrudRequestInterface, ...rest: AdditionalCrudMethodArgs) => Promise<Entity>\trecoverOne?\t(crudRequest: CrudRequestInterface, ...rest: AdditionalCrudMethodArgs) => Promise<Entity>\treplaceOne?\t(crudRequest: CrudRequestInterface, dto: Replaceable, ...rest: AdditionalCrudMethodArgs) => Promise<Entity>\tupdateOne?\t(crudRequest: CrudRequestInterface, dto: Updatable, ...rest: AdditionalCrudMethodArgs) => Promise<Entity>"}},"/reference/rockets/nestjs-crud/globals":{"title":"@concepta/nestjs-crud","data":{"classes#Classes":"CrudCreateManyDto\nCrudModule\nCrudQueryHelper\nCrudResponsePaginatedDto\nTypeOrmCrudService","interfaces#Interfaces":"CrudControllerInterface\nCrudCreateManyInterface\nCrudRequestInterface\nCrudResponsePaginatedInterface","functions#Functions":"CrudAction\nCrudAllow\nCrudAlwaysPaginate\nCrudBody\nCrudCache\nCrudController\nCrudCreateMany\nCrudCreateOne\nCrudDeleteOne\nCrudExclude\nCrudFilter\nCrudJoin\nCrudLimit\nCrudMaxLimit\nCrudModel\nCrudParams\nCrudReadAll\nCrudReadMany\nCrudReadOne\nCrudRecoverOne\nCrudReplaceOne\nCrudRequest\nCrudSerialize\nCrudSoftDelete\nCrudSort\nCrudUpdateOne\nCrudValidate"}},"/reference/rockets/nestjs-crud/interfaces/CrudCreateManyInterface":{"title":"Interface: CrudCreateManyInterface<T>","data":{"extends#Extends":"CreateManyDto<T>","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tunknown","properties#Properties":"Property\tType\tOverrides\tbulk\tT[]\tCreateManyDto.bulk"}},"/reference/rockets/nestjs-crud/interfaces/CrudRequestInterface":{"title":"Interface: CrudRequestInterface","data":{"extends#Extends":"CrudRequest","properties#Properties":"Property\tType\tInherited from\toptions\tCrudRequestOptions\txCrudRequest.options\tparsed\tParsedRequestParams\txCrudRequest.parsed"}},"/reference/rockets/nestjs-crud/interfaces/CrudResponsePaginatedInterface":{"title":"Interface: CrudResponsePaginatedInterface<T>","data":{"extends#Extends":"GetManyDefaultResponse<T>","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tunknown","properties#Properties":"Property\tType\tInherited from\tcount\tnumber\tGetManyDefaultResponse.count\tdata\tT[]\tGetManyDefaultResponse.data\tpage\tnumber\tGetManyDefaultResponse.page\tpageCount\tnumber\tGetManyDefaultResponse.pageCount\ttotal\tnumber\tGetManyDefaultResponse.total"}},"/reference/rockets/nestjs-email/README":{"title":"Rockets NestJS Email","data":{"":"Email deliver module that supports the popular @nestjs-modules/mailer module.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-emailyarn add @nestjs-modules/mailer handlebars"}},"/reference/rockets/nestjs-email/classes/EmailModule":{"title":"Class: EmailModule","data":{"":"Email module","extends#Extends":"EmailModuleClass","constructors#Constructors":"","new-emailmodule#new EmailModule()":"new EmailModule(): EmailModule","returns#Returns":"EmailModule","inherited-from#Inherited from":"EmailModuleClass.constructor","defined-in#Defined in":"nestjs-email/node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tEmailOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"nestjs-email/src/email.module.ts:33","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tEmailOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"nestjs-email/src/email.module.ts:25","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tEmailAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"nestjs-email/src/email.module.ts:29","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tEmailOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"EmailModuleClass.register","defined-in-4#Defined in":"nestjs-email/src/email.module.ts:17","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tEmailAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"EmailModuleClass.registerAsync","defined-in-5#Defined in":"nestjs-email/src/email.module.ts:21"}},"/reference/rockets/nestjs-email/classes/EmailService":{"title":"Class: EmailService","data":{"implements#Implements":"EmailServiceInterface","constructors#Constructors":"","new-emailservice#new EmailService()":"new EmailService(logger, mailerService): EmailService","parameters#Parameters":"Parameter\tType\tlogger\tLogger\tmailerService\tEmailServiceInterface","returns#Returns":"EmailService","defined-in#Defined in":"nestjs-email/src/email.service.ts:13","properties#Properties":"Property\tModifier\tType\tlogger\treadonly\tLogger\tmailerService\treadonly\tEmailServiceInterface","methods#Methods":"","sendmail#sendMail()":"sendMail(dto): Promise<void>","parameters-1#Parameters":"Parameter\tType\tdto\tEmailSendOptionsInterface","returns-1#Returns":"Promise<void>","implementation-of#Implementation of":"EmailServiceInterface.sendMail","defined-in-1#Defined in":"nestjs-email/src/email.service.ts:19"}},"/reference/rockets/nestjs-email/globals":{"title":"@concepta/nestjs-email","data":{"classes#Classes":"EmailModule\nEmailService","interfaces#Interfaces":"EmailOptionsInterface\nEmailServiceInterface"}},"/reference/rockets/nestjs-email/interfaces/EmailOptionsInterface":{"title":"Interface: EmailOptionsInterface","data":{"properties#Properties":"Property\tType\tmailerService\tEmailServiceInterface\tsettings?\tEmailSettingsInterface"}},"/reference/rockets/nestjs-email/interfaces/EmailServiceInterface":{"title":"Interface: EmailServiceInterface","data":{"extends#Extends":"EmailSendInterface","methods#Methods":"","sendmail#sendMail()":"sendMail(sendMailOptions): Promise<void>","parameters#Parameters":"Parameter\tType\tsendMailOptions\tEmailSendOptionsInterface","returns#Returns":"Promise<void>","inherited-from#Inherited from":"EmailSendInterface.sendMail","defined-in#Defined in":"ts-common/dist/email/interfaces/email-send.interface.d.ts:3"}},"/reference/rockets/nestjs-event/README":{"title":"Rockets NestJS Events","data":{"":"Advanced class based event dispatch/listener module.This module extends/wraps the eventemitter2 module.The goal is to enable a pattern where modules can export re-usable events and listener classes that can be easily consumed by their dependent modules.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-event","todo#TODO":"Add class/method decorators"}},"/reference/rockets/nestjs-event/classes/Event":{"title":"Class: abstract Event<P, R>","data":{"":"Abstract event class.To create a custom event, extend the Event class.You must implement one of the EventSyncInterface or EventAsyncInterface\ninterfaces.There are additional abstract classes available which have implemented the\nsync and async event types for your convenience. They are EventSync\nand EventAsync.","example#Example":"// event payload type\ntype MyPayloadType = {id: number, active: boolean};\n// event class\nclass MyEvent extends Event<MyPayloadType>\n  implements EventSyncInterface<MyPayloadType>\n{}\n// create an event\nconst myEvent = new MyEvent({id: 1234, active: true});","extended-by#Extended by":"EventSync\nEventAsync","type-parameters#Type Parameters":"Type Parameter\tDefault type\tP\tundefined\tR\tP","implements#Implements":"EventInterface<P, R>","constructors#Constructors":"","new-event#new Event()":"new Event<P, R>(payload?): Event<P, R>\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tpayload?\tP\tPayload to emit when the event is dispatched.","returns#Returns":"Event<P, R>","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:69","properties#Properties":"Property\tModifier\tType\tDescription\texpectsReturnOf\treadonly\tR\tInternal Expects return of payload","accessors#Accessors":"","key#key":"get key(): string\nEvent key.","returns-1#Returns":"stringThe event key string.","implementation-of#Implementation of":"EventInterface.key","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:55","payload#payload":"get payload(): P\nReturns payload that was passed to the Event constructor.","returns-2#Returns":"PThe event payload.","implementation-of-1#Implementation of":"EventInterface.payload","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:85","key-1#key":"get static key(): string\nEvent key.","returns-3#Returns":"stringThe event key string.","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:46"}},"/reference/rockets/nestjs-event/classes/EventAsync":{"title":"Class: abstract EventAsync<P, R>","data":{"":"Abstract async event class.To create a custom async event, extend the\nEventAsync class.You can override and customize the [payload]Event#payload getter\nif desired. Please read the documentation for the abstract Event class\nfor the complete documentation.For synchronous events, see the EventSync abstract class.","example#Example":"// event payload type\ntype MyPayloadType = {id: number, active: boolean};\n// event class\nclass MyEvent extends EventAsync<MyPayloadType> {}\n// create an event\nconst myEvent = new MyEvent({id: 1234, active: true});","extends#Extends":"Event<P, Promise<R>>","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tP\tundefined\tR\tP","implements#Implements":"EventAsyncInterface<P, R>","constructors#Constructors":"","new-eventasync#new EventAsync()":"new EventAsync<P, R>(payload?): EventAsync<P, R>\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tpayload?\tP\tPayload to emit when the event is dispatched.","returns#Returns":"EventAsync<P, R>","inherited-from#Inherited from":"Event.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:69","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\texpectsReturnOf\treadonly\tPromise<R>\tInternal Expects return of payload\tEventAsyncInterface.expectsReturnOf Event.expectsReturnOf","accessors#Accessors":"","key#key":"get key(): string\nEvent key.","returns-1#Returns":"stringThe event key string.","implementation-of#Implementation of":"EventAsyncInterface.key","inherited-from-1#Inherited from":"Event.key","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:55","payload#payload":"get payload(): P\nReturns payload that was passed to the Event constructor.","returns-2#Returns":"PThe event payload.","implementation-of-1#Implementation of":"EventAsyncInterface.payload","inherited-from-2#Inherited from":"Event.payload","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:85","key-1#key":"get static key(): string\nEvent key.","returns-3#Returns":"stringThe event key string.","inherited-from-3#Inherited from":"Event.key","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:46"}},"/reference/rockets/nestjs-event/classes/EventDispatchException":{"title":"Class: EventDispatchException<P, R>","data":{"":"Thrown when an error is caught when dispatching an Event.","extends#Extends":"Error","type-parameters#Type Parameters":"Type Parameter\tP\tR","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-eventdispatchexception#new EventDispatchException()":"new EventDispatchException<P, R>(event, originalError, message): EventDispatchException<P, R>","parameters#Parameters":"Parameter\tType\tDefault value\tevent\tEventInterface<P, R>\tundefined\toriginalError\tunknown\tundefined\tmessage\tstring\t'Error while trying to dispatch the event with key %s'","returns#Returns":"EventDispatchException<P, R>","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/exceptions/event-dispatch.exception.ts:19","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.event\tpublic\tEventInterface<P, R>\tundefined\t-\t-\tcontext.originalError\tpublic\tError\tundefined\t-\t-\terrorCode\tpublic\tstring\t'EVENT_DISPATCH_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/nestjs-event/classes/EventDispatchService":{"title":"Class: EventDispatchService","data":{"":"Event Dispatch ServiceThis service coordinates the dispatching of events to the NestJS EventEmitter module.","constructors#Constructors":"","new-eventdispatchservice#new EventDispatchService()":"new EventDispatchService(eventEmitter): EventDispatchService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\teventEmitter\tEventEmitter2\tInjected event emitter instance","returns#Returns":"EventDispatchService","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/services/event-dispatch.service.ts:20","methods#Methods":"","async#async()":"async<E>(event): Promise<EventReturnPayload<E, EventReturnType<E>>[]>\nDispatch an event asynchronously.Asynchronously calls each of the listeners registered for the event,\nin the order they were registered, passing the event arguments to each.","type-parameters#Type Parameters":"Type Parameter\tE","parameters-1#Parameters":"Parameter\tType\tDescription\tevent\tE & EventAsyncInstance<E>\tThe event being dispatched.","returns-1#Returns":"Promise<EventReturnPayload<E, EventReturnType<E>>[]>An array of return payloads, one for each listener that subscribed to the event.","example#Example":"import { Injectable } from '@nestjs/common';\nimport { EventDispatchService, EventAsync } from '@concepta/nestjs-events';\n// expected object\nexport type MyPayloadType = {id: number, active: boolean};\n// event class\nexport class MyEvent extends EventAsync<MyPayloadType> {}\n@Injectable()\nclass MyClass {\nconstructor(private eventDispatchService: EventDispatchService) {}\n// allow any listener to activate object\nasync maybeActivate(myPayloadType: MyPayloadType): MyPayloadType {\n// event instance\nconst myEvent = new MyEvent({...myPayloadType, active: false});\n// dispatch the event\nconst allPayloads: MyPayloadType[] =\nawait this.eventDispatchService.async(myEvent);\n// merge it\nallPayloads.forEach((payload) => {\n// did any listener set it to true?\nif (payload.active) {\nmyPayloadType.active = true;\n}\n});\n// return possibly modified object\nreturn myPayloadType;\n}\n}","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/services/event-dispatch.service.ts:111","sync#sync()":"sync<P>(event): boolean\nDispatch an event synchronously.Synchronously calls each of the listeners registered for the event,\nin the order they were registered, passing the event arguments to each.","type-parameters-1#Type Parameters":"Type Parameter\tP","parameters-2#Parameters":"Parameter\tType\tDescription\tevent\tEventSyncInterface<P>\tThe event being dispatched.","returns-2#Returns":"booleanboolean Returns true if the event had listeners, false otherwise.","example-1#Example":"import { Injectable } from '@nestjs/common';\nimport { EventDispatchService, EventSync } from '@concepta/nestjs-events';\n// event payload type\nexport type MyPayloadType = {id: number};\n// event class\nexport class MyEvent extends EventSync<MyPayloadType> {}\n@Injectable()\nclass MyClass {\nconstructor(private eventDispatchService: EventDispatchService) {}\ndidSomething() {\n// event instance\nconst myEvent = new MyEvent({id: 1234});\n// dispatch the event\nthis.eventDispatchService.sync(myEvent);\n}\n}","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/services/event-dispatch.service.ts:58"}},"/reference/rockets/nestjs-event/classes/EventListenException":{"title":"Class: EventListenException<E>","data":{"":"Thrown when an error is caught when listening on an EventListenOn.","extends#Extends":"Error","type-parameters#Type Parameters":"Type Parameter\tE","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-eventlistenexception#new EventListenException()":"new EventListenException<E>(listener, originalError, message): EventListenException<E>","parameters#Parameters":"Parameter\tType\tDefault value\tlistener\tEventListenOnInterface<E>\tundefined\toriginalError\tunknown\tundefined\tmessage\tstring\t'Error while trying to listen on an event'","returns#Returns":"EventListenException<E>","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/exceptions/event-listen.exception.ts:18","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.listener\tpublic\tEventListenOnInterface<E>\tundefined\t-\t-\tcontext.originalError\tpublic\tError\tundefined\t-\t-\terrorCode\tpublic\tstring\t'EVENT_LISTEN_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/nestjs-event/classes/EventListenService":{"title":"Class: EventListenService","data":{"":"Event Listen ServiceThis service coordinates the registering of listeners on dispatched events to the NestJS EventEmitter module.","constructors#Constructors":"","new-eventlistenservice#new EventListenService()":"new EventListenService(eventEmitter): EventListenService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\teventEmitter\tEventEmitter2\tInjected event emitter instance","returns#Returns":"EventListenService","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/services/event-listen.service.ts:26","methods#Methods":"","createlistenwrapper#createListenWrapper()":"protected createListenWrapper<E>(listener): (e) => EventReturnType<E>\nInternal","type-parameters#Type Parameters":"Type Parameter\tE","parameters-1#Parameters":"Parameter\tType\tlistener\tEventListenOnInterface<E>","returns-1#Returns":"Function","parameters-2#Parameters":"Parameter\tType\te\tEventInstance<E>","returns-2#Returns":"EventReturnType<E>","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/services/event-listen.service.ts:107","on#on()":"on<E>(eventClass, listener, options): void\nAdds a listener to the end of the listeners list for the specified event.See the EventEmitter2.on\ndocumentation for more details about the underlying emitter API.","type-parameters-1#Type Parameters":"Type Parameter\tE","parameters-3#Parameters":"Parameter\tType\tDescription\teventClass\tEventClassInterface<E>\tThe event class to subscribe to. This is the class, NOT an instance.\tlistener\tEventListenOnInterface<E>\tInstance of the event listener class to attach to the event.\toptions\tEventListenOnOptionsInterface\tOverriding options.","returns-3#Returns":"void","example#Example":"import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { EventListenService, EventListenerOn } from '@concepta/nestjs-events';\nimport { TargetEvent } from 'target-module';\nclass MyListener extends EventListenerOn<TargetEvent> {\n  listen(event: TargetEvent) {\n    console.log(event.payload);\n  }\n}\n@Injectable()\nclass MyClass implements OnModuleInit {\nconstructor(private eventListenService: EventListenService) {}\nonModuleInit() {\n// listener instance\nconst listener = new MyListener();\n// register the listener\nthis.eventListenService.on(TargetEvent, listener);\n}\n}","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/services/event-listen.service.ts:66"}},"/reference/rockets/nestjs-event/classes/EventListener":{"title":"Class: abstract EventListener<E>","data":{"":"Abstract event listener class.To create a custom event listener, extend the EventListener class and implement the\n[listen]EventListener#listen method. The [listen]EventListener#listen\nmethod will receive the payload dispatched by EventDispatchService.You will also need to implement one of the interfaces that is enforced by the\nEventListenService method you intend to use. For example\n[EventListenService.on]EventListenService#on requires the EventListenOnInterface interface.There are additional abstract classes available which have implemented the basic types\nfor you. So far we have EventListenerOn... more to come!","example#Example":"// event payload type\ntype MyEventPayload = {id: number, active: boolean};\n// example event class\nclass MyEvent extends EventSync<MyEventPayload> {}\n// example listener class\nclass MyListenOn extends EventListener<MyEvent>\n  implements EventListenOnInterface\n{\n  // default options\n  options = {};\n  // custom handler\n  listen(event: MyEvent): void {\n    console.log(event.payload);\n  }\n}\n// new listener\nconst myListener = new MyListener();\n// subscribe to the event\nEventListenService.on(MyEvent, myListener);\n// and you can remove the listener easily\nlistener.remove();","extended-by#Extended by":"EventListenerOn","type-parameters#Type Parameters":"Type Parameter\tE","implements#Implements":"EventListenerInterface<E>","constructors#Constructors":"","new-eventlistener#new EventListener()":"new EventListener<E>(): EventListener<E>","returns#Returns":"EventListener<E>","methods#Methods":"","listen#listen()":"abstract listen(event): EventReturnType<E>\nListen to an event.","parameters#Parameters":"Parameter\tType\tevent\tEventInstance<E>","returns-1#Returns":"EventReturnType<E>","implementation-of#Implementation of":"EventListenerInterface.listen","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener.ts:60","remove#remove()":"remove(): void\nRemove the subscription.","returns-2#Returns":"void","implementation-of-1#Implementation of":"EventListenerInterface.remove","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener.ts:85","subscription#subscription()":"subscription(emitterListener): void\nInternalCalled after successful subscription.","parameters-1#Parameters":"Parameter\tType\tDescription\temitterListener\tListener\tThe Listener object returned by EventEmitter2","returns-3#Returns":"void","implementation-of-2#Implementation of":"EventListenerInterface.subscription","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener.ts:68"}},"/reference/rockets/nestjs-event/classes/EventListenerOn":{"title":"Class: abstract EventListenerOn<E>","data":{"":"Abstract event listen on class.To create a custom event listener, extend the EventListenerOn class and implement the\n[listen]EventListenerOn#listen method. The [listen]EventListenerOn#listen\nmethod will receive the payload dispatched by EventDispatchService.","example#Example":"// event payload type\ntype MyPayloadType = {id: number, active: boolean};\n// example event class\nclass MyEvent extends EventSync<MyPayloadType> {}\n// example listener class\nclass MyListenOn extends EventListenerOn<MyEvent> {\n  // custom handler\n  listen(event: MyEvent): void {\n    console.log(event.payload);\n  }\n}\n// new listener\nconst myListener = new MyListenOn();\n// subscribe to the event\nEventListenService.on(MyEvent, myListener);\n// and you can remove the listener easily\nlistener.remove();","extends#Extends":"EventListener<E>","type-parameters#Type Parameters":"Type Parameter\tE","implements#Implements":"EventListenOnInterface<E>","constructors#Constructors":"","new-eventlisteneron#new EventListenerOn()":"new EventListenerOn<E>(_options): EventListenerOn<E>\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\t_options\tEventListenOnOptionsInterface\tListener options","returns#Returns":"EventListenerOn<E>","overrides#Overrides":"EventListener.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener-on.ts:47","accessors#Accessors":"","options#options":"get options(): EventListenOnOptionsInterface\nDefault listener options.","returns-1#Returns":"EventListenOnOptionsInterfaceThe default listener options.","implementation-of#Implementation of":"EventListenOnInterface.options","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener-on.ts:56","methods#Methods":"","listen#listen()":"abstract listen(event): EventReturnType<E>\nListen to an event.","parameters-1#Parameters":"Parameter\tType\tevent\tEventInstance<E>","returns-2#Returns":"EventReturnType<E>","implementation-of-1#Implementation of":"EventListenOnInterface.listen","inherited-from#Inherited from":"EventListener.listen","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener.ts:60","remove#remove()":"remove(): void\nRemove the subscription.","returns-3#Returns":"void","implementation-of-2#Implementation of":"EventListenOnInterface.remove","inherited-from-1#Inherited from":"EventListener.remove","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener.ts:85","subscription#subscription()":"subscription(emitterListener): void\nInternalCalled after successful subscription.","parameters-2#Parameters":"Parameter\tType\tDescription\temitterListener\tListener\tThe Listener object returned by EventEmitter2","returns-4#Returns":"void","implementation-of-3#Implementation of":"EventListenOnInterface.subscription","inherited-from-2#Inherited from":"EventListener.subscription","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/event-listener.ts:68"}},"/reference/rockets/nestjs-event/classes/EventModule":{"title":"Class: EventModule","data":{"":"Event module","extends#Extends":"EventModuleClass","constructors#Constructors":"","new-eventmodule#new EventModule()":"new EventModule(): EventModule","returns#Returns":"EventModule","inherited-from#Inherited from":"EventModuleClass.constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tEventOptions","returns-1#Returns":"DynamicModule","overrides#Overrides":"EventModuleClass.forRoot","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/event.module.ts:14","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tEventAsyncOptions","returns-2#Returns":"DynamicModule","overrides-1#Overrides":"EventModuleClass.forRootAsync","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/event.module.ts:18"}},"/reference/rockets/nestjs-event/globals":{"title":"@concepta/nestjs-event","data":{"classes#Classes":"Event\nEventAsync\nEventDispatchException\nEventDispatchService\nEventListenException\nEventListenService\nEventListener\nEventListenerException\nEventListenerOn\nEventModule\nEventSync","interfaces#Interfaces":"EventAsyncInterface\nEventClassInterface\nEventInterface\nEventListenOnInterface\nEventListenOnOptionsInterface\nEventListenerInterface\nEventOptionsInterface\nEventSyncInterface","variables#Variables":"\nEVENT_MODULE_EMITTER_SERVICE_TOKEN\nEVENT_MODULE_EVENT_KEY_PREFIX\nEVENT_MODULE_SETTINGS_TOKEN"}},"/reference/rockets/nestjs-event/interfaces/EventAsyncInterface":{"title":"Interface: EventAsyncInterface<P, R>","data":{"":"The interface that all async events must adhere to","extends#Extends":"EventInterface<P, Promise<R>>","type-parameters#Type Parameters":"Type Parameter\tDefault type\tP\tundefined\tR\tP","properties#Properties":"Property\tType\tDescription\tInherited from\texpectsReturnOf\tPromise<R>\t-\tEventInterface.expectsReturnOf\tkey\tstring\tEvent key.\tEventInterface.key\tpayload\tP\tReturn the payload that should be emitted.\tEventInterface.payload"}},"/reference/rockets/nestjs-event/classes/EventSync":{"title":"Class: abstract EventSync<P>","data":{"":"Abstract synchronous event class.To create a custom event, extend the\nEventSync class.You can override and customize the [payload]Event#payload getter\nif desired. Please read the documentation for the abstract Event class\nfor the complete documentation.For asynchronous events, see the EventAsync abstract class.","example#Example":"// event payload type\ntype MyPayloadType = {id: number, active: boolean};\n// event class\nclass MyEvent extends Event<MyPayloadType> {}\n// create an event\nconst myEvent = new MyEvent({id: 1234, active: true});","extends#Extends":"Event<P, void>","type-parameters#Type Parameters":"Type Parameter\tDefault type\tP\tundefined","implements#Implements":"EventSyncInterface<P>","constructors#Constructors":"","new-eventsync#new EventSync()":"new EventSync<P>(payload?): EventSync<P>\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tpayload?\tP\tPayload to emit when the event is dispatched.","returns#Returns":"EventSync<P>","inherited-from#Inherited from":"Event.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:69","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\texpectsReturnOf\treadonly\tvoid\tInternal Expects return of payload\tEventSyncInterface.expectsReturnOf Event.expectsReturnOf","accessors#Accessors":"","key#key":"get key(): string\nEvent key.","returns-1#Returns":"stringThe event key string.","implementation-of#Implementation of":"EventSyncInterface.key","inherited-from-1#Inherited from":"Event.key","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:55","payload#payload":"get payload(): P\nReturns payload that was passed to the Event constructor.","returns-2#Returns":"PThe event payload.","implementation-of-1#Implementation of":"EventSyncInterface.payload","inherited-from-2#Inherited from":"Event.payload","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:85","key-1#key":"get static key(): string\nEvent key.","returns-3#Returns":"stringThe event key string.","inherited-from-3#Inherited from":"Event.key","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/event.ts:46"}},"/reference/rockets/nestjs-event/interfaces/EventInterface":{"title":"Interface: EventInterface<P, R>","data":{"":"The interface that defines Event key and payload signatures.","extends#Extends":"EventKeyInterface.EventExpectsReturnOfInterface<R>","extended-by#Extended by":"EventSyncInterface\nEventAsyncInterface","type-parameters#Type Parameters":"Type Parameter\tDefault type\tP\tundefined\tR\tP","properties#Properties":"Property\tType\tDescription\tInherited from\texpectsReturnOf\tR\t-\tEventExpectsReturnOfInterface.expectsReturnOf\tkey\tstring\tEvent key.\tEventKeyInterface.key\tpayload\tP\tReturn the payload that should be emitted.\t-"}},"/reference/rockets/nestjs-event/interfaces/EventClassInterface":{"title":"Interface: EventClassInterface<E>","data":{"":"Interface defining static signature of newable events.","extends#Extends":"EventKeyInterface","type-parameters#Type Parameters":"Type Parameter\tE","constructors#Constructors":"","new-eventclassinterface#new EventClassInterface()":"new EventClassInterface(payload?): E & EventInstance<E>\nInternal","parameters#Parameters":"Parameter\tType\tpayload?\tE & EventInstance<E>[\"payload\"]","returns#Returns":"E & EventInstance<E>","inherited-from#Inherited from":"EventKeyInterface.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/events/interfaces/event-class.interface.ts:11","properties#Properties":"Property\tType\tDescription\tInherited from\tkey\tstring\tEvent key.\tEventKeyInterface.key"}},"/reference/rockets/nestjs-event/interfaces/EventListenOnInterface":{"title":"Interface: EventListenOnInterface<E>","data":{"":"The interface that defines Event Listen On signature.","extends#Extends":"EventListenerInterface<E>","type-parameters#Type Parameters":"Type Parameter\tE","properties#Properties":"Property\tType\tDescription\toptions\tEventListenOnOptionsInterface\tOptions to be passed to Event Emitter 2 at the time of subscription.","methods#Methods":"","listen#listen()":"listen(event): EventReturnType<E>\nListener handler.","parameters#Parameters":"Parameter\tType\tDescription\tevent\tEventInstance<E>\tAn event instance","returns#Returns":"EventReturnType<E>","inherited-from#Inherited from":"EventListenerInterface.listen","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/interfaces/event-listener.interface.ts:13","remove#remove()":"remove(): void\nRemove the subscription.","returns-1#Returns":"void","inherited-from-1#Inherited from":"EventListenerInterface.remove","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/interfaces/event-listener.interface.ts:25","subscription#subscription()":"subscription(emitterListener): void\nCalled after successful subscription.","parameters-1#Parameters":"Parameter\tType\tDescription\temitterListener\tListener\tThe Listener object returned by EventEmitter2","returns-2#Returns":"void","inherited-from-2#Inherited from":"EventListenerInterface.subscription","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/interfaces/event-listener.interface.ts:20"}},"/reference/rockets/nestjs-event/interfaces/EventOptionsInterface":{"title":"Interface: EventOptionsInterface","data":{"":"Event module options interface","properties#Properties":"Property\tType\tsettings?\tEventSettingsInterface"}},"/reference/rockets/nestjs-event/interfaces/EventListenOnOptionsInterface":{"title":"Interface: EventListenOnOptionsInterface","data":{"":"Interfaces defining public options object for \"listen on\" style events.","extends#Extends":"Partial<Pick<OnOptions, \"async\" | \"nextTick\">>","properties#Properties":"Property\tType\tInherited from\tasync?\tboolean\tPartial.async\tnextTick?\tboolean\tPartial.nextTick"}},"/reference/rockets/nestjs-event/interfaces/EventSyncInterface":{"title":"Interface: EventSyncInterface<P>","data":{"":"The interface that all sync events must adhere to","extends#Extends":"EventInterface<P, void>","type-parameters#Type Parameters":"Type Parameter\tDefault type\tP\tundefined","properties#Properties":"Property\tType\tDescription\tInherited from\texpectsReturnOf\tvoid\t-\tEventInterface.expectsReturnOf\tkey\tstring\tEvent key.\tEventInterface.key\tpayload\tP\tReturn the payload that should be emitted.\tEventInterface.payload"}},"/reference/rockets/nestjs-event/interfaces/EventListenerInterface":{"title":"Interface: EventListenerInterface<E>","data":{"":"The interface that defines Event Listener signature.","extended-by#Extended by":"EventListenOnInterface","type-parameters#Type Parameters":"Type Parameter\tE","methods#Methods":"","listen#listen()":"listen(event): EventReturnType<E>\nListener handler.","parameters#Parameters":"Parameter\tType\tDescription\tevent\tEventInstance<E>\tAn event instance","returns#Returns":"EventReturnType<E>","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/interfaces/event-listener.interface.ts:13","remove#remove()":"remove(): void\nRemove the subscription.","returns-1#Returns":"void","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/interfaces/event-listener.interface.ts:25","subscription#subscription()":"subscription(emitterListener): void\nCalled after successful subscription.","parameters-1#Parameters":"Parameter\tType\tDescription\temitterListener\tListener\tThe Listener object returned by EventEmitter2","returns-2#Returns":"void","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/listeners/interfaces/event-listener.interface.ts:20"}},"/reference/rockets/nestjs-event/variables/EVENT_MODULE_DEFAULT_EMITTER_SERVICE_SETTINGS_TOKEN":{"title":"Variable: EVENT_MODULE_DEFAULT_EMITTER_SERVICE_SETTINGS_TOKEN","data":{"":"const : \"\" = ''\nThis is the token into which the default event emitter settings are injected.","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/event-constants.ts:15"}},"/reference/rockets/nestjs-event/variables/EVENT_MODULE_EVENT_KEY_PREFIX":{"title":"Variable: EVENT_MODULE_EVENT_KEY_PREFIX","data":{"":"const EVENT_MODULE_EVENT_KEY_PREFIX: \"ROCKETS_EVENT_\" = 'ROCKETS_EVENT_'\nAll event keys will be automatically prefixed with this string","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/event-constants.ts:21"}},"/reference/rockets/nestjs-event/variables/EVENT_MODULE_EMITTER_SERVICE_TOKEN":{"title":"Variable: EVENT_MODULE_EMITTER_SERVICE_TOKEN","data":{"":"const EVENT_MODULE_EMITTER_SERVICE_TOKEN: \"EVENT_MODULE_EMITTER_SERVICE_TOKEN\" = 'EVENT_MODULE_EMITTER_SERVICE_TOKEN'\nThis is the token into which the event emitter service is injected.","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/event-constants.ts:9"}},"/reference/rockets/nestjs-event/variables/EVENT_MODULE_SETTINGS_TOKEN":{"title":"Variable: EVENT_MODULE_SETTINGS_TOKEN","data":{"":"const EVENT_MODULE_SETTINGS_TOKEN: \"EVENT_MODULE_SETTINGS_TOKEN\" = 'EVENT_MODULE_SETTINGS_TOKEN'\nThis is the token into which the event module settings are injected.","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/event-constants.ts:4"}},"/reference/rockets/nestjs-exception/classes/ExceptionsFilter":{"title":"Class: ExceptionsFilter","data":{"implements#Implements":"ExceptionsFilter","constructors#Constructors":"","new-exceptionsfilter#new ExceptionsFilter()":"new ExceptionsFilter(httpAdapterHost): ExceptionsFilter","parameters#Parameters":"Parameter\tType\thttpAdapterHost\tHttpAdapterHost<AbstractHttpAdapter<any, any, any>>","returns#Returns":"ExceptionsFilter","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-exception/src/filters/exceptions.filter.ts:14","methods#Methods":"","catch#catch()":"catch(exception, host): void","parameters-1#Parameters":"Parameter\tType\texception\tExceptionInterface\thost\tArgumentsHost","returns-1#Returns":"void","implementation-of#Implementation of":"ExceptionsFilter.catch","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-exception/src/filters/exceptions.filter.ts:16"}},"/reference/rockets/nestjs-exception/README":{"title":"Rockets NestJS Exception","data":{"":"Provide exception handling/normalization and error code mapping.For more details on the exception filters pattern, please refer to the official\nNestJS Exception Filters documentation.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-exception","binding-the-filer#Binding The Filer":"You can bind the filter to classes, methods and globally.","class-decorator#Class Decorator":"// ...\nimport { ExceptionsFilter } from '@concepta/nestjs-exception';\n@UseFilters(new ExceptionsFilter())\nexport class PhotoController {\n  // ...\n}","method-decorator#Method Decorator":"// ...\nimport { ExceptionsFilter } from '@concepta/nestjs-exception';\n@Post()\n@UseFilters(new ExceptionsFilter())\nasync create(@Body() createPhotoDto: CreatePhotoDto) {\n  throw new ForbiddenException();\n}","global-filter#Global Filter":"// ...\nimport { ExceptionsFilter } from '@concepta/nestjs-exception';\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalFilters(new ExceptionsFilter());\n  await app.listen(3000);\n}\nbootstrap();","todo#TODO":"Define interface for exception filter response payload."}},"/reference/rockets/nestjs-exception/globals":{"title":"@concepta/nestjs-exception","data":{"classes#Classes":"ExceptionsFilter\nRuntimeException","interfaces#Interfaces":"RuntimeExceptionInterface\nRuntimeExceptionOptions","type-aliases#Type Aliases":"RuntimeExceptionContext"}},"/reference/rockets/nestjs-exception/interfaces/RuntimeExceptionInterface":{"title":"Interface: RuntimeExceptionInterface","data":{"extends#Extends":"ExceptionInterface","properties#Properties":"Property\tType\tDescription\tOverrides\tInherited from\tcontext\tRuntimeExceptionContext\tAdditional context\tExceptionInterface.context\t-\terrorCode\tstring\tThe error code.\t-\tExceptionInterface.errorCode\thttpStatus?\tHttpStatus\tOptional HTTP status code to use only when this exception is sent over an HTTP service. Please consider this to be a hint for API error responses.\t-\t-\tmessage\tstring\t-\t-\tExceptionInterface.message\tname\tstring\t-\t-\tExceptionInterface.name\tsafeMessage?\tstring\tIf set, this message will be used on responses instead of message. Use this when the main message might expose\t-\t-\tstack?\tstring\t-\t-\tExceptionInterface.stack"}},"/reference/rockets/nestjs-exception/interfaces/RuntimeExceptionOptions":{"title":"Interface: RuntimeExceptionOptions","data":{"properties#Properties":"Property\tType\thttpStatus?\tHttpStatus\tmessage?\tstring\tmessageParams?\t(string | number)[]\toriginalError?\tunknown\tsafeMessage?\tstring\tsafeMessageParams?\t(string | number)[]"}},"/reference/rockets/nestjs-exception/type-aliases/RuntimeExceptionContext":{"title":"Type Alias: RuntimeExceptionContext","data":{"":"RuntimeExceptionContext: ExceptionContext & object","type-declaration#Type declaration":"Name\tType\toriginalError\tError","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-exception/src/exception.types.ts:3"}},"/reference/rockets/nestjs-federated/README":{"title":"Rockets NestJS Federated Authentication","data":{"":"Authenticate via federated login","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-federated"}},"/reference/rockets/nestjs-federated/classes/FederatedDto":{"title":"Class: FederatedDto","data":{"":"Federated DTO","extends#Extends":"CommonEntityDto","implements#Implements":"FederatedInterface","constructors#Constructors":"","new-federateddto#new FederatedDto()":"new FederatedDto(): FederatedDto","returns#Returns":"FederatedDto","inherited-from#Inherited from":"CommonEntityDto.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tdateCreated\tDate\tundefined\tDate created\tFederatedInterface.dateCreated CommonEntityDto.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted\tFederatedInterface.dateDeleted CommonEntityDto.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated\tFederatedInterface.dateUpdated CommonEntityDto.dateUpdated\tid\tstring\tundefined\t-\tFederatedInterface.id CommonEntityDto.id\tprovider\tstring\t''\tprovider\t-\tsubject\tstring\t''\tsubject\t-\tuser\tReferenceIdInterface<string>\tundefined\tuserId\t-\tversion\tnumber\tundefined\tVersion\tFederatedInterface.version CommonEntityDto.version"}},"/reference/rockets/nestjs-federated/classes/FederatedCreateDto":{"title":"Class: FederatedCreateDto","data":{"":"Federated Create DTO","extends#Extends":"Pick<FederatedDto, \"provider\" | \"subject\" | \"user\">","implements#Implements":"FederatedCreatableInterface","constructors#Constructors":"","new-federatedcreatedto#new FederatedCreateDto()":"new FederatedCreateDto(...args): FederatedCreateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"FederatedCreateDto","inherited-from#Inherited from":"PickType(FederatedDto, ['provider', 'subject', 'user'] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tprovider\tpublic\tstring\t''\tprovider\tFederatedCreatableInterface.provider PickType(FederatedDto, ['provider', 'subject', 'user'] as const).provider\tsubject\tpublic\tstring\t''\tsubject\tFederatedCreatableInterface.subject PickType(FederatedDto, ['provider', 'subject', 'user'] as const).subject\tuser\tpublic\tReferenceIdInterface<string>\tundefined\tuserId\tFederatedCreatableInterface.user PickType(FederatedDto, ['provider', 'subject', 'user'] as const).user\targuments\tstatic\tany\tundefined\t-\tPickType(FederatedDto, ['provider', 'subject', 'user'] as const).arguments\tcaller\tstatic\tFunction\tundefined\t-\tPickType(FederatedDto, ['provider', 'subject', 'user'] as const).caller\tlength\treadonly\tnumber\tundefined\t-\tPickType(FederatedDto, ['provider', 'subject', 'user'] as const).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(FederatedDto, ['provider', 'subject', 'user'] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(FederatedDto, ['provider', 'subject', 'user'] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(FederatedDto, ['provider', 'subject', 'user'] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(FederatedDto, ['provider', 'subject', 'user'] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(FederatedDto, ['provider', 'subject', 'user'] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(FederatedDto, ['provider', 'subject', 'user'] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-federated/classes/FederatedPostgresEntity":{"title":"Class: FederatedPostgresEntity","data":{"":"Federated Postgres Entity","extends#Extends":"CommonPostgresEntity","implements#Implements":"FederatedEntityInterface","constructors#Constructors":"","new-federatedpostgresentity#new FederatedPostgresEntity()":"new FederatedPostgresEntity(): FederatedPostgresEntity","returns#Returns":"FederatedPostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tdateCreated\tDate\tDate created.\tFederatedEntityInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tFederatedEntityInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tFederatedEntityInterface.dateUpdated CommonPostgresEntity.dateUpdated\tid\tstring\t-\tFederatedEntityInterface.id CommonPostgresEntity.id\tprovider\tstring\tprovider\t-\tsubject\tstring\tsubject\t-\tuser\tReferenceIdInterface<string>\tUser\t-\tversion\tnumber\tVersion\tFederatedEntityInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-federated/classes/FederatedModule":{"title":"Class: FederatedModule","data":{"extends#Extends":"FederatedModuleClass","constructors#Constructors":"","new-federatedmodule#new FederatedModule()":"new FederatedModule(): FederatedModule","returns#Returns":"FederatedModule","inherited-from#Inherited from":"FederatedModuleClass.constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tFederatedOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/federated.module.ts:36","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tFederatedOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/federated.module.ts:28","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tFederatedAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/federated.module.ts:32","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tFederatedOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"FederatedModuleClass.register","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/federated.module.ts:20","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tFederatedAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"FederatedModuleClass.registerAsync","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/federated.module.ts:24"}},"/reference/rockets/nestjs-federated/classes/FederatedOAuthService":{"title":"Class: FederatedOAuthService","data":{"implements#Implements":"FederatedOAuthServiceInterface","constructors#Constructors":"","new-federatedoauthservice#new FederatedOAuthService()":"new FederatedOAuthService(userLookupService, userMutateService, federatedService, federatedMutateService): FederatedOAuthService","parameters#Parameters":"Parameter\tType\tuserLookupService\tFederatedUserLookupServiceInterface\tuserMutateService\tFederatedUserMutateServiceInterface\tfederatedService\tFederatedService\tfederatedMutateService\tFederatedMutateService","returns#Returns":"FederatedOAuthService","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/services/federated-oauth.service.ts:24","properties#Properties":"Property\tModifier\tType\tfederatedMutateService\tpublic\tFederatedMutateService\tfederatedService\tpublic\tFederatedService\tuserLookupService\tpublic\tFederatedUserLookupServiceInterface\tuserMutateService\tpublic\tFederatedUserMutateServiceInterface","methods#Methods":"","createuser#createUser()":"protected createUser(email, username, queryOptions?): Promise<FederatedCredentialsInterface>\nInternalCreate a user","parameters-1#Parameters":"Parameter\tType\temail\tstring\tusername\tstring\tqueryOptions?\tQueryOptionsInterface","returns-1#Returns":"Promise<FederatedCredentialsInterface>","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/services/federated-oauth.service.ts:105","createuserwithfederated#createUserWithFederated()":"protected createUserWithFederated(provider, email, subject, queryOptions?): Promise<FederatedCredentialsInterface>\nInternalLogic to create user and federated","parameters-2#Parameters":"Parameter\tType\tprovider\tstring\temail\tstring\tsubject\tstring\tqueryOptions?\tQueryOptionsInterface","returns-2#Returns":"Promise<FederatedCredentialsInterface>","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/services/federated-oauth.service.ts:82","sign#sign()":"sign(provider, email, subject, queryOptions?): Promise<FederatedCredentialsInterface>\nSign in with federated creating a user if it doesn't exist","parameters-3#Parameters":"Parameter\tType\tDescription\tprovider\tstring\tprovider name (github, facebook, google)\temail\tstring\temail account\tsubject\tstring\tsubject (user id/ profile id from provider)\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<FederatedCredentialsInterface>","implementation-of#Implementation of":"FederatedOAuthServiceInterface.sign","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/services/federated-oauth.service.ts:41"}},"/reference/rockets/nestjs-federated/classes/FederatedService":{"title":"Class: FederatedService","data":{"":"Abstract service","extends#Extends":"BaseService<FederatedEntityInterface>","implements#Implements":"FederatedServiceInterface","constructors#Constructors":"","new-federatedservice#new FederatedService()":"new FederatedService(federatedRepo): FederatedService","parameters#Parameters":"Parameter\tType\tfederatedRepo\tRepository<FederatedEntityInterface>","returns#Returns":"FederatedService","overrides#Overrides":"BaseService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/services/federated.service.ts:18","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"BaseService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:14","methods#Methods":"","exists#exists()":"exists(provider, subject, queryOptions?): Promise<null | FederatedEntityInterface>","parameters-1#Parameters":"Parameter\tType\tprovider\tstring\tsubject\tstring\tqueryOptions?\tQueryOptionsInterface","returns-2#Returns":"Promise<null | FederatedEntityInterface>","implementation-of#Implementation of":"FederatedServiceInterface.exists","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-federated/src/services/federated.service.ts:25","find#find()":"find(options, queryOptions?): Promise<Promise<FederatedEntityInterface[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<FederatedEntityInterface>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<FederatedEntityInterface[]>>","inherited-from-1#Inherited from":"BaseService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:10","findone#findOne()":"findOne(options, queryOptions?): Promise<null | FederatedEntityInterface>\nFind One wrapper.","parameters-3#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<FederatedEntityInterface>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-4#Returns":"Promise<null | FederatedEntityInterface>","inherited-from-2#Inherited from":"BaseService.findOne","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:11","repository#repository()":"repository(queryOptions?): Repository<FederatedEntityInterface>\nReturn the correct repository instance.","parameters-4#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-5#Returns":"Repository<FederatedEntityInterface>","inherited-from-3#Inherited from":"BaseService.repository","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:12","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-5#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-6#Returns":"TransactionProxy","inherited-from-4#Inherited from":"BaseService.transaction","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:13"}},"/reference/rockets/nestjs-federated/classes/FederatedUpdateDto":{"title":"Class: FederatedUpdateDto","data":{"":"Federated Update DTO","extends#Extends":"Pick<FederatedDto, \"provider\" | \"subject\">","implements#Implements":"FederatedUpdatableInterface","constructors#Constructors":"","new-federatedupdatedto#new FederatedUpdateDto()":"new FederatedUpdateDto(...args): FederatedUpdateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"FederatedUpdateDto","inherited-from#Inherited from":"PickType(FederatedDto, ['provider', 'subject'] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tprovider\tpublic\tstring\t''\tprovider\tFederatedUpdatableInterface.provider PickType(FederatedDto, ['provider', 'subject'] as const).provider\tsubject\tpublic\tstring\t''\tsubject\tFederatedUpdatableInterface.subject PickType(FederatedDto, ['provider', 'subject'] as const).subject\targuments\tstatic\tany\tundefined\t-\tPickType(FederatedDto, ['provider', 'subject'] as const).arguments\tcaller\tstatic\tFunction\tundefined\t-\tPickType(FederatedDto, ['provider', 'subject'] as const).caller\tlength\treadonly\tnumber\tundefined\t-\tPickType(FederatedDto, ['provider', 'subject'] as const).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(FederatedDto, ['provider', 'subject'] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(FederatedDto, ['provider', 'subject'] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(FederatedDto, ['provider', 'subject'] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(FederatedDto, ['provider', 'subject'] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(FederatedDto, ['provider', 'subject'] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(FederatedDto, ['provider', 'subject'] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-federated/classes/FederatedSqliteEntity":{"title":"Class: FederatedSqliteEntity","data":{"":"Federated Sqlite Entity","extends#Extends":"CommonSqliteEntity","implements#Implements":"FederatedEntityInterface","constructors#Constructors":"","new-federatedsqliteentity#new FederatedSqliteEntity()":"new FederatedSqliteEntity(): FederatedSqliteEntity","returns#Returns":"FederatedSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tdateCreated\tDate\tDate created.\tFederatedEntityInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tFederatedEntityInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tFederatedEntityInterface.dateUpdated CommonSqliteEntity.dateUpdated\tid\tstring\t-\tFederatedEntityInterface.id CommonSqliteEntity.id\tprovider\tstring\tprovider\t-\tsubject\tstring\tsubject\t-\tuser\tReferenceIdInterface<string>\tUser\t-\tversion\tnumber\tVersion\tFederatedEntityInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-federated/interfaces/FederatedCredentialsInterface":{"title":"Interface: FederatedCredentialsInterface","data":{"":"Credentials Interface","extends#Extends":"ReferenceIdInterface.ReferenceUsernameInterface.ReferenceEmailInterface","properties#Properties":"Property\tType\tInherited from\temail\tstring\tReferenceEmailInterface.email\tid\tstring\tReferenceIdInterface.id\tusername\tstring\tReferenceUsernameInterface.username"}},"/reference/rockets/nestjs-federated/globals":{"title":"@concepta/nestjs-federated","data":{"classes#Classes":"FederatedCreateDto\nFederatedDto\nFederatedModule\nFederatedOAuthService\nFederatedPostgresEntity\nFederatedService\nFederatedSqliteEntity\nFederatedUpdateDto","interfaces#Interfaces":"FederatedCredentialsInterface\nFederatedEntityInterface\nFederatedUserLookupServiceInterface\nFederatedUserMutateServiceInterface"}},"/reference/rockets/nestjs-federated/interfaces/FederatedEntityInterface":{"title":"Interface: FederatedEntityInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"FederatedInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tdateCreated\tDate\t-\tFederatedInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tFederatedInterface.dateDeleted\tdateUpdated\tDate\t-\tFederatedInterface.dateUpdated\tid\tstring\t-\tFederatedInterface.id\tprovider\tstring\tProvider name (github, facebook, etc)\tFederatedInterface.provider\tsubject\tstring\tThe reference identification for provider TODO: rename to sub via ReferenceSubjectInterface\tFederatedInterface.subject\tuser\tReferenceIdInterface<string>\tThe user federated will be associated to\tFederatedInterface.user\tversion\tnumber\t-\tFederatedInterface.version"}},"/reference/rockets/nestjs-federated/interfaces/FederatedUserMutateServiceInterface":{"title":"Interface: FederatedUserMutateServiceInterface","data":{"extends#Extends":"CreateOneInterface<FederatedUserMutateInterface, FederatedCredentialsInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tcreate\t(object: FederatedUserMutateInterface, options?: QueryOptionsInterface) => Promise<FederatedCredentialsInterface>\tCreateOneInterface.create"}},"/reference/rockets/nestjs-federated/interfaces/FederatedUserLookupServiceInterface":{"title":"Interface: FederatedUserLookupServiceInterface","data":{"extends#Extends":"LookupIdInterface<ReferenceId, FederatedCredentialsInterface, QueryOptionsInterface>.LookupEmailInterface<ReferenceEmail, FederatedCredentialsInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tbyEmail\t(email: string, options?: QueryOptionsInterface) => Promise<null | FederatedCredentialsInterface>\tLookupEmailInterface.byEmail\tbyId\t(id: string, options?: QueryOptionsInterface) => Promise<null | FederatedCredentialsInterface>\tLookupIdInterface.byId"}},"/reference/rockets/nestjs-invitation/README":{"title":"Rockets NestJS Invitation","data":{"":"Invite user by email","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-invitation"}},"/reference/rockets/nestjs-invitation/classes/InvitationController":{"title":"Class: InvitationController","data":{"implements#Implements":"CrudControllerInterface<InvitationInterface, InvitationCreatableInterface, InvitationCreatableInterface>","constructors#Constructors":"","new-invitationcontroller#new InvitationController()":"new InvitationController(invitationSendService, invitationCrudService): InvitationController","parameters#Parameters":"Parameter\tType\tinvitationSendService\tInvitationSendService\tinvitationCrudService\tInvitationCrudService","returns#Returns":"InvitationController","defined-in#Defined in":"packages/nestjs-invitation/src/controllers/invitation.controller.ts:54","methods#Methods":"","createonecustom#createOneCustom()":"createOneCustom(crudRequest, invitationCreateDto): Promise<undefined | InvitationEntityInterface>","parameters-1#Parameters":"Parameter\tType\tcrudRequest\tCrudRequestInterface\tinvitationCreateDto\tInvitationCreateDto","returns-1#Returns":"Promise<undefined | InvitationEntityInterface>","defined-in-1#Defined in":"packages/nestjs-invitation/src/controllers/invitation.controller.ts:82","deleteone#deleteOne()":"deleteOne(crudRequest): Promise<void | InvitationEntityInterface>","parameters-2#Parameters":"Parameter\tType\tcrudRequest\tCrudRequestInterface","returns-2#Returns":"Promise<void | InvitationEntityInterface>","implementation-of#Implementation of":"CrudControllerInterface.deleteOne","defined-in-2#Defined in":"packages/nestjs-invitation/src/controllers/invitation.controller.ts:130","getmany#getMany()":"getMany(crudRequest): Promise<InvitationEntityInterface[] | CrudResultPaginatedInterface<InvitationEntityInterface>>","parameters-3#Parameters":"Parameter\tType\tcrudRequest\tCrudRequestInterface","returns-3#Returns":"Promise<InvitationEntityInterface[] | CrudResultPaginatedInterface<InvitationEntityInterface>>","implementation-of-1#Implementation of":"CrudControllerInterface.getMany","defined-in-3#Defined in":"packages/nestjs-invitation/src/controllers/invitation.controller.ts:64","getone#getOne()":"getOne(crudRequest): Promise<InvitationEntityInterface>","parameters-4#Parameters":"Parameter\tType\tcrudRequest\tCrudRequestInterface","returns-4#Returns":"Promise<InvitationEntityInterface>","implementation-of-2#Implementation of":"CrudControllerInterface.getOne","defined-in-4#Defined in":"packages/nestjs-invitation/src/controllers/invitation.controller.ts:73"}},"/reference/rockets/nestjs-invitation/classes/InvitationPostgresEntity":{"title":"Class: abstract InvitationPostgresEntity","data":{"":"Audit Postgres Embed","extends#Extends":"CommonPostgresEntity","implements#Implements":"InvitationEntityInterface","constructors#Constructors":"","new-invitationpostgresentity#new InvitationPostgresEntity()":"new InvitationPostgresEntity(): InvitationPostgresEntity","returns#Returns":"InvitationPostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tactive\tboolean\t-\t-\tcategory\tstring\t-\t-\tcode\tstring\t-\t-\tconstraints?\tLiteralObject\t-\t-\tdateCreated\tDate\tDate created.\tInvitationEntityInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tInvitationEntityInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tInvitationEntityInterface.dateUpdated CommonPostgresEntity.dateUpdated\temail\tstring\t-\t-\tid\tstring\t-\tInvitationEntityInterface.id CommonPostgresEntity.id\tuser\tReferenceIdInterface<string>\t-\t-\tversion\tnumber\tVersion\tInvitationEntityInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-invitation/classes/InvitationAcceptedEventAsync":{"title":"Class: InvitationAcceptedEventAsync","data":{"":"Abstract async event class.To create a custom async event, extend the\nEventAsync class.You can override and customize the [payload]Event#payload getter\nif desired. Please read the documentation for the abstract Event class\nfor the complete documentation.For synchronous events, see the EventSync abstract class.","example#Example":"// event payload type\ntype MyPayloadType = {id: number, active: boolean};\n// event class\nclass MyEvent extends EventAsync<MyPayloadType> {}\n// create an event\nconst myEvent = new MyEvent({id: 1234, active: true});","extends#Extends":"EventAsync<InvitationAcceptedEventPayloadInterface, boolean>","constructors#Constructors":"","new-invitationacceptedeventasync#new InvitationAcceptedEventAsync()":"new InvitationAcceptedEventAsync(payload?): InvitationAcceptedEventAsync\nConstructor","parameters#Parameters":"Parameter\tType\tpayload?\tInvitationAcceptedEventPayloadInterface","returns#Returns":"InvitationAcceptedEventAsync","param#Param":"Payload to emit when the event is dispatched.","inherited-from#Inherited from":"EventAsync.constructor","defined-in#Defined in":"packages/nestjs-event/dist/events/event.d.ts:8","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\texpectsReturnOf\treadonly\tPromise<boolean>\tInternal Expects return of payload\tEventAsync.expectsReturnOf","accessors#Accessors":"","key#key":"get key(): string\nEvent key.","returns-1#Returns":"stringThe event key string.","inherited-from-1#Inherited from":"EventAsync.key","defined-in-1#Defined in":"packages/nestjs-event/dist/events/event.d.ts:6","payload#payload":"get payload(): P\nReturns payload that was passed to the Event constructor.","returns-2#Returns":"PThe event payload.","inherited-from-2#Inherited from":"EventAsync.payload","defined-in-2#Defined in":"packages/nestjs-event/dist/events/event.d.ts:9","key-1#key":"get static key(): string\nEvent key.","returns-3#Returns":"stringThe event key string.","inherited-from-3#Inherited from":"EventAsync.key","defined-in-3#Defined in":"packages/nestjs-event/dist/events/event.d.ts:5"}},"/reference/rockets/nestjs-invitation/classes/InvitationGetUserEventAsync":{"title":"Class: InvitationGetUserEventAsync","data":{"":"Abstract async event class.To create a custom async event, extend the\nEventAsync class.You can override and customize the [payload]Event#payload getter\nif desired. Please read the documentation for the abstract Event class\nfor the complete documentation.For synchronous events, see the EventSync abstract class.","example#Example":"// event payload type\ntype MyPayloadType = {id: number, active: boolean};\n// event class\nclass MyEvent extends EventAsync<MyPayloadType> {}\n// create an event\nconst myEvent = new MyEvent({id: 1234, active: true});","extends#Extends":"EventAsync<InvitationGetUserEventPayloadInterface, InvitationGetUserEventResponseInterface>","constructors#Constructors":"","new-invitationgetusereventasync#new InvitationGetUserEventAsync()":"new InvitationGetUserEventAsync(payload?): InvitationGetUserEventAsync\nConstructor","parameters#Parameters":"Parameter\tType\tpayload?\tInvitationGetUserEventPayloadInterface","returns#Returns":"InvitationGetUserEventAsync","param#Param":"Payload to emit when the event is dispatched.","inherited-from#Inherited from":"EventAsync.constructor","defined-in#Defined in":"packages/nestjs-event/dist/events/event.d.ts:8","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\texpectsReturnOf\treadonly\tPromise<InvitationGetUserEventResponseInterface>\tInternal Expects return of payload\tEventAsync.expectsReturnOf","accessors#Accessors":"","key#key":"get key(): string\nEvent key.","returns-1#Returns":"stringThe event key string.","inherited-from-1#Inherited from":"EventAsync.key","defined-in-1#Defined in":"packages/nestjs-event/dist/events/event.d.ts:6","payload#payload":"get payload(): P\nReturns payload that was passed to the Event constructor.","returns-2#Returns":"PThe event payload.","inherited-from-2#Inherited from":"EventAsync.payload","defined-in-2#Defined in":"packages/nestjs-event/dist/events/event.d.ts:9","key-1#key":"get static key(): string\nEvent key.","returns-3#Returns":"stringThe event key string.","inherited-from-3#Inherited from":"EventAsync.key","defined-in-3#Defined in":"packages/nestjs-event/dist/events/event.d.ts:5"}},"/reference/rockets/nestjs-invitation/classes/InvitationSqliteEntity":{"title":"Class: abstract InvitationSqliteEntity","data":{"":"Audit SqlLite Embed","extends#Extends":"CommonSqliteEntity","implements#Implements":"InvitationEntityInterface","constructors#Constructors":"","new-invitationsqliteentity#new InvitationSqliteEntity()":"new InvitationSqliteEntity(): InvitationSqliteEntity","returns#Returns":"InvitationSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tactive\tboolean\t-\t-\tcategory\tstring\t-\t-\tcode\tstring\t-\t-\tconstraints?\tLiteralObject\t-\t-\tdateCreated\tDate\tDate created.\tInvitationEntityInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tInvitationEntityInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tInvitationEntityInterface.dateUpdated CommonSqliteEntity.dateUpdated\temail\tstring\t-\t-\tid\tstring\t-\tInvitationEntityInterface.id CommonSqliteEntity.id\tuser\tReferenceIdInterface<string>\t-\t-\tversion\tnumber\tVersion\tInvitationEntityInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-invitation/globals":{"title":"@concepta/nestjs-invitation","data":{"classes#Classes":"InvitationAcceptedEventAsync\nInvitationController\nInvitationGetUserEventAsync\nInvitationModule\nInvitationPostgresEntity\nInvitationService\nInvitationSqliteEntity"}},"/reference/rockets/nestjs-invitation/classes/InvitationModule":{"title":"Class: InvitationModule","data":{"":"Invitation module","extends#Extends":"InvitationModuleClass","constructors#Constructors":"","new-invitationmodule#new InvitationModule()":"new InvitationModule(): InvitationModule","returns#Returns":"InvitationModule","inherited-from#Inherited from":"InvitationModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tInvitationOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-invitation/src/invitation.module.ts:22","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tInvitationAsyncOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-invitation/src/invitation.module.ts:26","register#register()":"static register(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tInvitationOptions","returns-3#Returns":"DynamicModule","overrides#Overrides":"InvitationModuleClass.register","defined-in-3#Defined in":"packages/nestjs-invitation/src/invitation.module.ts:14","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tInvitationAsyncOptions","returns-4#Returns":"DynamicModule","overrides-1#Overrides":"InvitationModuleClass.registerAsync","defined-in-4#Defined in":"packages/nestjs-invitation/src/invitation.module.ts:18"}},"/reference/rockets/nestjs-invitation/classes/InvitationService":{"title":"Class: InvitationService","data":{"implements#Implements":"InvitationServiceInterface","constructors#Constructors":"","new-invitationservice#new InvitationService()":"new InvitationService(invitationSendService, invitationAcceptanceService, invitationRevocationService): InvitationService","parameters#Parameters":"Parameter\tType\tinvitationSendService\tInvitationSendService\tinvitationAcceptanceService\tInvitationAcceptanceService\tinvitationRevocationService\tInvitationRevocationService","returns#Returns":"InvitationService","defined-in#Defined in":"packages/nestjs-invitation/src/services/invitation.service.ts:17","methods#Methods":"","accept#accept()":"accept(invitationDto, passcode, payload?, queryOptions?): Promise<boolean>\nActivate user's account by providing its OTP passcode and the new password.","parameters-1#Parameters":"Parameter\tType\tinvitationDto\tInvitationDto\tpasscode\tstring\tpayload?\tLiteralObject<unknown>\tqueryOptions?\tQueryOptionsInterface","returns-1#Returns":"Promise<boolean>","implementation-of#Implementation of":"InvitationServiceInterface.accept","defined-in-1#Defined in":"packages/nestjs-invitation/src/services/invitation.service.ts:35","revokeall#revokeAll()":"revokeAll(email, category, queryOptions?): Promise<void>\nRevoke all invitations by email and category.","parameters-2#Parameters":"Parameter\tType\tDescription\temail\tstring\tuser email\tcategory\tstring\tthe category\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<void>","implementation-of-1#Implementation of":"InvitationServiceInterface.revokeAll","defined-in-2#Defined in":"packages/nestjs-invitation/src/services/invitation.service.ts:55","send#send()":"send(user, code, category, queryOptions?): Promise<void>","parameters-3#Parameters":"Parameter\tType\tuser\tReferenceIdInterface<string> & ReferenceEmailInterface<string>\tcode\tstring\tcategory\tstring\tqueryOptions?\tQueryOptionsInterface","returns-3#Returns":"Promise<void>","implementation-of-2#Implementation of":"InvitationServiceInterface.send","defined-in-3#Defined in":"packages/nestjs-invitation/src/services/invitation.service.ts:23"}},"/reference/rockets/nestjs-jwt/classes/JwtIssueService":{"title":"Class: JwtIssueService","data":{"implements#Implements":"JwtIssueServiceInterface","constructors#Constructors":"","new-jwtissueservice#new JwtIssueService()":"new JwtIssueService(jwtSignService): JwtIssueService","parameters#Parameters":"Parameter\tType\tjwtSignService\tJwtSignService","returns#Returns":"JwtIssueService","defined-in#Defined in":"packages/nestjs-jwt/src/services/jwt-issue.service.ts:7","properties#Properties":"Property\tModifier\tType\tjwtSignService\treadonly\tJwtSignService","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<string>","parameters-1#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns-1#Returns":"Promise<string>","implementation-of#Implementation of":"JwtIssueServiceInterface.accessToken","defined-in-1#Defined in":"packages/nestjs-jwt/src/services/jwt-issue.service.ts:9","refreshtoken#refreshToken()":"refreshToken(...args): Promise<string>","parameters-2#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns-2#Returns":"Promise<string>","implementation-of-1#Implementation of":"JwtIssueServiceInterface.refreshToken","defined-in-2#Defined in":"packages/nestjs-jwt/src/services/jwt-issue.service.ts:15"}},"/reference/rockets/nestjs-jwt/classes/JwtSignService":{"title":"Class: JwtSignService","data":{"implements#Implements":"JwtSignServiceInterface","constructors#Constructors":"","new-jwtsignservice#new JwtSignService()":"new JwtSignService(jwtAccessService, jwtRefreshService): JwtSignService","parameters#Parameters":"Parameter\tType\tjwtAccessService\tJwtService\tjwtRefreshService\tJwtService","returns#Returns":"JwtSignService","defined-in#Defined in":"packages/nestjs-jwt/src/services/jwt-sign.service.ts:12","properties#Properties":"Property\tModifier\tType\tjwtAccessService\treadonly\tJwtService\tjwtRefreshService\treadonly\tJwtService","methods#Methods":"","decode#decode()":"decode(tokenType, ...rest): null | string | object","parameters-1#Parameters":"Parameter\tType\ttokenType\tJwtTokenType\t...rest\t[string, DecodeOptions]","returns-1#Returns":"null | string | object","implementation-of#Implementation of":"JwtSignServiceInterface.decode","defined-in-1#Defined in":"packages/nestjs-jwt/src/services/jwt-sign.service.ts:33","signasync#signAsync()":"signAsync(tokenType, ...rest): Promise<string>","parameters-2#Parameters":"Parameter\tType\ttokenType\tJwtTokenType\t...rest\t[string | object | Buffer, JwtSignOptions]","returns-2#Returns":"Promise<string>","implementation-of-1#Implementation of":"JwtSignServiceInterface.signAsync","defined-in-2#Defined in":"packages/nestjs-jwt/src/services/jwt-sign.service.ts:19","verifyasync#verifyAsync()":"verifyAsync(tokenType, ...rest): Promise<any>","parameters-3#Parameters":"Parameter\tType\ttokenType\tJwtTokenType\t...rest\t[string, JwtVerifyOptions]","returns-3#Returns":"Promise<any>","implementation-of-2#Implementation of":"JwtSignServiceInterface.verifyAsync","defined-in-3#Defined in":"packages/nestjs-jwt/src/services/jwt-sign.service.ts:26"}},"/reference/rockets/nestjs-event/classes/EventListenerException":{"title":"Class: EventListenerException","data":{"":"Thrown when an error is caught when subscribing or\nmanaging a EventListener of an Event.","extends#Extends":"Error","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-eventlistenerexception#new EventListenerException()":"new EventListenerException(originalError?, message?): EventListenerException","parameters#Parameters":"Parameter\tType\tDefault value\toriginalError?\tunknown\tundefined\tmessage?\tstring\t'Error occurred in event listener'","returns#Returns":"EventListenerException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-event/src/exceptions/event-listener.exception.ts:17","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.originalError\tpublic\tError\tundefined\t-\t-\terrorCode\tpublic\tstring\t'EVENT_LISTENER_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/nestjs-jwt/classes/JwtStrategy":{"title":"Class: JwtStrategy","data":{"extends#Extends":"Strategy","extended-by#Extended by":"","constructors#Constructors":"","new-jwtstrategy#new JwtStrategy()":"new JwtStrategy(options, verify): JwtStrategy","parameters#Parameters":"Parameter\tType\toptions\tJwtStrategyOptionsInterface\tverify\tVerifyCallback","returns#Returns":"JwtStrategy","overrides#Overrides":"PassportStrategy.constructor","defined-in#Defined in":"packages/nestjs-jwt/src/jwt.strategy.ts:7","methods#Methods":"","authenticate#authenticate()":"authenticate(...args): void\nPerforms authentication for the request.\nNote: Virtual function - re-implement in the strategy.","parameters-1#Parameters":"Parameter\tType\t...args\t[Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, any]","returns-1#Returns":"void","overrides-1#Overrides":"PassportStrategy.authenticate","defined-in-1#Defined in":"packages/nestjs-jwt/src/jwt.strategy.ts:17","error#error()":"error(err): void\nInternal error while performing authentication.Strategies should call this function when an internal error occurs\nduring the process of performing authentication; for example, if the\nuser directory is not available.","parameters-2#Parameters":"Parameter\tType\terr\tError","returns-2#Returns":"void","api#Api":"public","inherited-from#Inherited from":"PassportStrategy.error","defined-in-2#Defined in":"node_modules/@types/passport-strategy/index.d.ts:90","fail#fail()":"","failchallenge-status#fail(challenge, status)":"fail(challenge, status): void\nFail authentication, with optional challenge and status, defaulting\nto 401.Strategies should call this function to fail an authentication attempt.","parameters-3#Parameters":"Parameter\tType\tDescription\tchallenge\tany\t(Can also be an object with 'message' and 'type' fields).\tstatus\tnumber\t-","returns-3#Returns":"void","api-1#Api":"public","inherited-from-1#Inherited from":"PassportStrategy.fail","defined-in-3#Defined in":"node_modules/@types/passport-strategy/index.d.ts:54","failstatus#fail(status)":"fail(status): void","parameters-4#Parameters":"Parameter\tType\tstatus\tnumber","returns-4#Returns":"void","inherited-from-2#Inherited from":"PassportStrategy.fail","defined-in-4#Defined in":"node_modules/@types/passport-strategy/index.d.ts:55","pass#pass()":"pass(): void\nPass without making a success or fail decision.Under most circumstances, Strategies should not need to call this\nfunction.  It exists primarily to allow previous authentication state\nto be restored, for example from an HTTP session.","returns-5#Returns":"void","api-2#Api":"public","inherited-from-3#Inherited from":"PassportStrategy.pass","defined-in-5#Defined in":"node_modules/@types/passport-strategy/index.d.ts:78","redirect#redirect()":"redirect(url, status?): void\nRedirect to url with optional status, defaulting to 302.Strategies should call this function to redirect the user (via their\nuser agent) to a third-party website for authentication.","parameters-5#Parameters":"Parameter\tType\turl\tstring\tstatus?\tnumber","returns-6#Returns":"void","api-3#Api":"public","inherited-from-4#Inherited from":"PassportStrategy.redirect","defined-in-6#Defined in":"node_modules/@types/passport-strategy/index.d.ts:67","success#success()":"success(user, info?): void\nAuthenticate user, with optional info.Strategies should call this function to successfully authenticate a\nuser.  user should be an object supplied by the application after it\nhas been given an opportunity to verify credentials.  info is an\noptional argument containing additional user information.  This is\nuseful for third-party authentication strategies to pass profile\ndetails.","parameters-6#Parameters":"Parameter\tType\tuser\tany\tinfo?\tany","returns-7#Returns":"void","api-4#Api":"public","inherited-from-5#Inherited from":"PassportStrategy.success","defined-in-7#Defined in":"node_modules/@types/passport-strategy/index.d.ts:42"}},"/reference/rockets/nestjs-jwt/classes/JwtVerifyService":{"title":"Class: JwtVerifyService","data":{"implements#Implements":"JwtVerifyServiceInterface","constructors#Constructors":"","new-jwtverifyservice#new JwtVerifyService()":"new JwtVerifyService(jwtSignService): JwtVerifyService","parameters#Parameters":"Parameter\tType\tjwtSignService\tJwtSignService","returns#Returns":"JwtVerifyService","defined-in#Defined in":"packages/nestjs-jwt/src/services/jwt-verify.service.ts:7","properties#Properties":"Property\tModifier\tType\tjwtSignService\treadonly\tJwtSignService","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<any>","parameters-1#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns-1#Returns":"Promise<any>","implementation-of#Implementation of":"JwtVerifyServiceInterface.accessToken","defined-in-1#Defined in":"packages/nestjs-jwt/src/services/jwt-verify.service.ts:9","refreshtoken#refreshToken()":"refreshToken(...args): Promise<any>","parameters-2#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns-2#Returns":"Promise<any>","implementation-of-1#Implementation of":"JwtVerifyServiceInterface.refreshToken","defined-in-2#Defined in":"packages/nestjs-jwt/src/services/jwt-verify.service.ts:15"}},"/reference/rockets/nestjs-jwt/functions/createVerifyRefreshTokenCallback":{"title":"Function: createVerifyRefreshTokenCallback()","data":{"":"createVerifyRefreshTokenCallback(verifyTokenService): JwtVerifyTokenCallback<Error, unknown>","parameters#Parameters":"Parameter\tType\tverifyTokenService\tJwtVerifyServiceInterface","returns#Returns":"JwtVerifyTokenCallback<Error, unknown>","defined-in#Defined in":"packages/nestjs-jwt/src/utils/create-verify-refresh-token-callback.util.ts:4"}},"/reference/rockets/nestjs-jwt/functions/createVerifyAccessTokenCallback":{"title":"Function: createVerifyAccessTokenCallback()","data":{"":"createVerifyAccessTokenCallback(verifyTokenService): JwtVerifyTokenCallback<Error, unknown>","parameters#Parameters":"Parameter\tType\tverifyTokenService\tJwtVerifyServiceInterface","returns#Returns":"JwtVerifyTokenCallback<Error, unknown>","defined-in#Defined in":"packages/nestjs-jwt/src/utils/create-verify-access-token-callback.util.ts:4"}},"/reference/rockets/nestjs-jwt/globals":{"title":"@concepta/nestjs-jwt","data":{"namespaces#Namespaces":"ExtractJwt","classes#Classes":"JwtIssueService\nJwtModule\nJwtSignService\nJwtStrategy\nJwtVerifyService","interfaces#Interfaces":"JwtFromRequestFunction\nJwtIssueServiceInterface\nJwtStrategyOptionsInterface\nJwtVerifyServiceInterface","type-aliases#Type Aliases":"JwtTokenType\nJwtVerifyTokenCallback","functions#Functions":"createVerifyAccessTokenCallback\ncreateVerifyRefreshTokenCallback"}},"/reference/rockets/nestjs-jwt/interfaces/JwtFromRequestFunction":{"title":"Interface: JwtFromRequestFunction()","data":{"":"JwtFromRequestFunction(req): null | string","parameters#Parameters":"Parameter\tType\treq\tRequest<ParamsDictionary, any, any, ParsedQs, Record<string, any>>","returns#Returns":"null | string","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:36"}},"/reference/rockets/nestjs-jwt/interfaces/JwtIssueServiceInterface":{"title":"Interface: JwtIssueServiceInterface","data":{"extended-by#Extended by":"","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<string>","parameters#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns#Returns":"Promise<string>","defined-in#Defined in":"packages/nestjs-jwt/src/interfaces/jwt-issue-service.interface.ts:4","refreshtoken#refreshToken()":"refreshToken(...args): Promise<string>","parameters-1#Parameters":"Parameter\tType\t...args\t[string | object | Buffer, JwtSignOptions]","returns-1#Returns":"Promise<string>","defined-in-1#Defined in":"packages/nestjs-jwt/src/interfaces/jwt-issue-service.interface.ts:8"}},"/reference/rockets/nestjs-jwt/interfaces/JwtVerifyServiceInterface":{"title":"Interface: JwtVerifyServiceInterface","data":{"extended-by#Extended by":"","methods#Methods":"","accesstoken#accessToken()":"accessToken(...args): Promise<object>","parameters#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns#Returns":"Promise<object>","defined-in#Defined in":"packages/nestjs-jwt/src/interfaces/jwt-verify-service.interface.ts:4","refreshtoken#refreshToken()":"refreshToken(...args): Promise<object>","parameters-1#Parameters":"Parameter\tType\t...args\t[string, JwtVerifyOptions]","returns-1#Returns":"Promise<object>","defined-in-1#Defined in":"packages/nestjs-jwt/src/interfaces/jwt-verify-service.interface.ts:8"}},"/reference/rockets/nestjs-jwt/interfaces/JwtStrategyOptionsInterface":{"title":"Interface: JwtStrategyOptionsInterface","data":{"extends#Extends":"Pick<StrategyOptions, \"jwtFromRequest\">","properties#Properties":"Property\tType\tInherited from\tjwtFromRequest\tJwtFromRequestFunction\tPick.jwtFromRequest\tverifyToken\tJwtVerifyTokenCallback<Error, unknown>\t-"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/functions/fromAuthHeaderAsBearerToken":{"title":"Function: fromAuthHeaderAsBearerToken()","data":{"":"fromAuthHeaderAsBearerToken(): JwtFromRequestFunction","returns#Returns":"JwtFromRequestFunction","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:50"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/README":{"title":"ExtractJwt","data":{"index#Index":"","functions#Functions":"fromAuthHeader\nfromAuthHeaderAsBearerToken\nfromAuthHeaderWithScheme\nfromBodyField\nfromExtractors\nfromHeader\nfromUrlQueryParameter"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/functions/fromAuthHeader":{"title":"Function: fromAuthHeader()","data":{"":"fromAuthHeader(): JwtFromRequestFunction","returns#Returns":"JwtFromRequestFunction","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:48"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/functions/fromExtractors":{"title":"Function: fromExtractors()","data":{"":"fromExtractors(extractors): JwtFromRequestFunction","parameters#Parameters":"Parameter\tType\textractors\tJwtFromRequestFunction[]","returns#Returns":"JwtFromRequestFunction","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:49"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/functions/fromBodyField":{"title":"Function: fromBodyField()","data":{"":"fromBodyField(field_name): JwtFromRequestFunction","parameters#Parameters":"Parameter\tType\tfield_name\tstring","returns#Returns":"JwtFromRequestFunction","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:45"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/functions/fromHeader":{"title":"Function: fromHeader()","data":{"":"fromHeader(header_name): JwtFromRequestFunction","parameters#Parameters":"Parameter\tType\theader_name\tstring","returns#Returns":"JwtFromRequestFunction","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:44"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/functions/fromAuthHeaderWithScheme":{"title":"Function: fromAuthHeaderWithScheme()","data":{"":"fromAuthHeaderWithScheme(auth_scheme): JwtFromRequestFunction","parameters#Parameters":"Parameter\tType\tauth_scheme\tstring","returns#Returns":"JwtFromRequestFunction","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:47"}},"/reference/rockets/nestjs-jwt/type-aliases/JwtTokenType":{"title":"Type Alias: JwtTokenType","data":{"":"JwtTokenType: \"access\" | \"refresh\"","defined-in#Defined in":"packages/nestjs-jwt/src/jwt.types.ts:1"}},"/reference/rockets/nestjs-jwt/namespaces/ExtractJwt/functions/fromUrlQueryParameter":{"title":"Function: fromUrlQueryParameter()","data":{"":"fromUrlQueryParameter(param_name): JwtFromRequestFunction","parameters#Parameters":"Parameter\tType\tparam_name\tstring","returns#Returns":"JwtFromRequestFunction","defined-in#Defined in":"node_modules/@types/passport-jwt/index.d.ts:46"}},"/reference/rockets/nestjs-logger/README":{"title":"Rockets NestJS Logger","data":{"":"This module is a drop-in replacement for the core NestJS logger that provides additonal support for pushing log data\nto one or multiple external log consumption providers.","project#Project":"","overview#Overview":"This module wraps/extends the core NestJS Logger and adds a powerful external transports plugin interface.\nSee the NestJS Logger documentation\nfor more details on how logging is implemented in NestJS.","installation#Installation":"yarn add @concepta/nestjs-logger","registering#Registering":"To start using the Logger Module, import the LoggerModule into your app.","defaults-env#Defaults (.env)":"To register using the default configuration:\n@Module({\n  imports: [\n    LoggerModule.register()\n  ]\n});\nexport class App {}\nTo use the default configuration, you need todefine the environments variables.\nOne of the ways you can do that is using .env file\n// .env file\nLOG_LEVEL=\"log,error\"\nTRANSPORT_LOG_LEVEL=\"error,warn\"\nSENTRY_DSN=\"{your_sentry_dsn}\"","synchronous-registration#Synchronous Registration":"To register by direct configuration:\n// ...\nimport { LoggerModule } from '@concepta/nestjs-logger';\n@Module({\n  imports: [\n    LoggerModule.register({\n      // ...\n    })\n  ]\n});\nexport class App {}","aynchronous-registration#Aynchronous Registration":"To register by direct configuration:\n// ...\nimport { LoggerModule } from '@concepta/nestjs-logger';\n@Module({\n  imports: [\n    LoggerModule.registerAsync({\n      imports: [ConfigModule.forFeature(myConfig)],\n      inject: [myConfig.KEY],\n      useFactory: async (\n        appConfig: MyAppOptionsInterface,\n      ): Promise<LoggerOptionsInterface> => appConfig.logger\n  ]\n});\nexport class App {}","transports#Transports":"If you define the transport to be used, it means that any method that you call from LoggerService\nwill also send the details of the log to the transport defined\n(at the moment we are only working with Sentry as external transport).You can easily create your own custom transports by developing a class that meets the interface.\n// ...\nimport { LoggerModule, LoggerSentryTransport } from '@concepta/nestjs-logger';\n@Module({\n  imports: [\n    LoggerModule.register({\n      transports: [LoggerSentryTransport],\n    })\n  ]\n});\nexport class App {}","using-loggerservice#Using LoggerService":"After importing the module with the proper configurations, you are all set to start using the LoggerService as an injected service.","setup-globally#Setup Globally":"It is a good practice to also inform nest to use the new Logger internally overwrite the default Logger in your bootstrap.\n// ...\nimport { LoggerService } from '@concepta/nestjs-logger';\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  // get reference of LoggerService From LoggerModule\n  const customLoggerService = app.get(LoggerService);\n  // this is to inform that this logger will be used globally\n  // and it will be used once you create a new Logger()\n  app.useLogger(customLoggerService);\n  await app.listen(3000);\n}\nbootstrap();\nNow any time you call a method from Logger class from @nestjs/common will be calling the same\nmethod from LoggerService from @concepta/nestjs-logger","injection#Injection":"You should be able to use the LoggerService by injecting the class, or creating a new instance of Logger.\nimport { Logger, Injectable, Inject } from '@nestjs/common';\nimport { LoggerService } from '@concepta/nestjs-logger';\n@Injectable()\nclass MyService {\n  constructor(@Inject(LoggerService) private loggerService: LoggerService) {}\n  doSomething() {\n    this.loggerService.log('Doing something...');\n  }\n}","manual-instantiation#Manual Instantiation":"import { Logger, Injectable } from '@nestjs/common';\n@Injectable()\nclass MyService {\n  private readonly logger = new Logger(MyService.name);\n  doSomething() {\n    this.logger.log('Doing something...');\n  }\n}"}},"/reference/rockets/nestjs-jwt/type-aliases/JwtVerifyTokenCallback":{"title":"Type Alias: JwtVerifyTokenCallback()<ErrorType, DecodedTokenType>","data":{"":"JwtVerifyTokenCallback<ErrorType, DecodedTokenType>: (token, done) => void","type-parameters#Type Parameters":"Type Parameter\tDefault type\tErrorType extends Error\tError\tDecodedTokenType extends unknown\tunknown","parameters#Parameters":"Parameter\tType\ttoken\tstring\tdone\t(err?, decodedToken?) => void","returns#Returns":"void","defined-in#Defined in":"packages/nestjs-jwt/src/jwt.types.ts:3"}},"/reference/rockets/nestjs-logger/classes/LoggerModule":{"title":"Class: LoggerModule","data":{"":"Logger Module imports all configuration needed for logger and sentry\nWith classes for request interceptor and Exceptions filters\nwhere will automatically log for any request or unhandled exceptions.","example#Example":"// app.module.ts\n@Module({\n  imports: [\n    LoggerModule.forRoot({logLevel: ['log', 'error']})\n  ]\n})\nexport class AppModule {}\n// main.ts\nasync function bootstrap() {\n  // create the app\n  const app = await NestFactory.create(AppModule);\n  // custom logger\n  const customLoggerService = app.get(LoggerService);\n  customLoggerService.addTransport(app.get(LoggerSentryTransport));\n  // inform app of the custom logger\n  app.useLogger(customLoggerService);\n}\n// test.class.ts\n@Injectable()\nclass TestClass {\n  // Inject Logger Service\n  constructor(@Inject(LoggerService) private loggerService: LoggerService) {}\n  doSomething() {\n    this.loggerService.log('Did something');\n  }\n}\n// my.util.ts\nfunction myHelper() {\n  const logger = new Logger(); // <-- using the global logger\n  logger.log('My helper ran'); // <-- LoggerService.log will be called\n}","extends#Extends":"LoggerModuleClass","constructors#Constructors":"","new-loggermodule#new LoggerModule()":"new LoggerModule(): LoggerModule","returns#Returns":"LoggerModule","inherited-from#Inherited from":"LoggerModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tLoggerOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-logger/src/logger.module.ts:76","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tLoggerOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-logger/src/logger.module.ts:68","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tLoggerAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-logger/src/logger.module.ts:72","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tLoggerOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"LoggerModuleClass.register","defined-in-4#Defined in":"packages/nestjs-logger/src/logger.module.ts:60","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tLoggerAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"LoggerModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-logger/src/logger.module.ts:64"}},"/reference/rockets/nestjs-logger/classes/LoggerExceptionFilter":{"title":"Class: LoggerExceptionFilter","data":{"":"The Logger Exception Filter ClassOut of the box, this action is performed by a built-in global exception\nfilter, which handles exceptions of type HttpException","extends#Extends":"BaseExceptionFilter","constructors#Constructors":"","new-loggerexceptionfilter#new LoggerExceptionFilter()":"new LoggerExceptionFilter(loggerService): LoggerExceptionFilter\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tloggerService\tLoggerService\tinstance of the Logger Service","returns#Returns":"LoggerExceptionFilter","overrides#Overrides":"BaseExceptionFilter.constructor","defined-in#Defined in":"packages/nestjs-logger/src/logger-exception.filter.ts:21","properties#Properties":"Property\tModifier\tType\tInherited from\tapplicationRef?\treadonly\tHttpServer<any, any>\tBaseExceptionFilter.applicationRef\thttpAdapterHost?\treadonly\tHttpAdapterHost<AbstractHttpAdapter<any, any, any>>\tBaseExceptionFilter.httpAdapterHost","methods#Methods":"","catch#catch()":"catch(exception, host): void\nOverride catch to log before returning exception.","parameters-1#Parameters":"Parameter\tType\tDescription\texception\tError\tError instance\thost\tArgumentsHost\tArguments Host instance","returns-1#Returns":"void","overrides-1#Overrides":"BaseExceptionFilter.catch","defined-in-1#Defined in":"packages/nestjs-logger/src/logger-exception.filter.ts:34","handleunknownerror#handleUnknownError()":"handleUnknownError(exception, host, applicationRef): void","parameters-2#Parameters":"Parameter\tType\texception\tany\thost\tArgumentsHost\tapplicationRef\tHttpServer<any, any> | AbstractHttpAdapter<any, any, any>","returns-2#Returns":"void","inherited-from#Inherited from":"BaseExceptionFilter.handleUnknownError","defined-in-2#Defined in":"node_modules/@nestjs/core/exceptions/base-exception-filter.d.ts:10","isexceptionobject#isExceptionObject()":"isExceptionObject(err): err is Error","parameters-3#Parameters":"Parameter\tType\terr\tany","returns-3#Returns":"err is Error","inherited-from-1#Inherited from":"BaseExceptionFilter.isExceptionObject","defined-in-3#Defined in":"node_modules/@nestjs/core/exceptions/base-exception-filter.d.ts:11","ishttperror#isHttpError()":"isHttpError(err): err is Object\nChecks if the thrown error comes from the \"http-errors\" library.","parameters-4#Parameters":"Parameter\tType\tDescription\terr\tany\terror object","returns-4#Returns":"err is Object","inherited-from-2#Inherited from":"BaseExceptionFilter.isHttpError","defined-in-4#Defined in":"node_modules/@nestjs/core/exceptions/base-exception-filter.d.ts:16"}},"/reference/rockets/nestjs-logger/classes/LoggerRequestInterceptor":{"title":"Class: LoggerRequestInterceptor","data":{"":"The Interceptor to log message for all requests and response errors.","implements#Implements":"NestInterceptor<Response>","constructors#Constructors":"","new-loggerrequestinterceptor#new LoggerRequestInterceptor()":"new LoggerRequestInterceptor(loggerService): LoggerRequestInterceptor\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tloggerService\tLoggerService\tThe logger service that implements ConsoleLogger","returns#Returns":"LoggerRequestInterceptor","defined-in#Defined in":"packages/nestjs-logger/src/logger-request.interceptor.ts:29","methods#Methods":"","intercept#intercept()":"intercept(context, next): Observable<Response>\nMethod to implement a custom intercept","parameters-1#Parameters":"Parameter\tType\tDescription\tcontext\tExecutionContext\tExecution context\tnext\tCallHandler<any>\tCall handler","returns-1#Returns":"Observable<Response>","implementation-of#Implementation of":"NestInterceptor.intercept","defined-in-1#Defined in":"packages/nestjs-logger/src/logger-request.interceptor.ts:37","responseerror#responseError()":"responseError(req, res, startDate, error): Observable<never>\nFormat exception error","parameters-2#Parameters":"Parameter\tType\tDescription\treq\tFastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>\tRequest\tres\tResponse\tResponse\tstartDate\tDate\tStart date\terror\tError\tError instance","returns-2#Returns":"Observable<never>","defined-in-2#Defined in":"packages/nestjs-logger/src/logger-request.interceptor.ts:86","responsesuccess#responseSuccess()":"responseSuccess(req, res, startDate): void\nMethod to log response success","parameters-3#Parameters":"Parameter\tType\tDescription\treq\tFastifyRequest<RouteGenericInterface, Server, IncomingMessage, unknown, FastifyLoggerInstance>\tRequest\tres\tResponse\tResponse\tstartDate\tDate\tthe date for the message","returns-3#Returns":"void","defined-in-3#Defined in":"packages/nestjs-logger/src/logger-request.interceptor.ts:66"}},"/reference/rockets/nestjs-logger/classes/LoggerSentryTransport":{"title":"Class: LoggerSentryTransport","data":{"":"The transport that implements LoggerTransportInterface\nto be used on LoggerService to log external messages","example#Example":"// Get the transport instance\nconst sentry = app.get(LoggerSentryTransport);\n// Add the transports you want to use\ncustomLogger.addTransport(sentry);","implements#Implements":"LoggerTransportInterface","constructors#Constructors":"","new-loggersentrytransport#new LoggerSentryTransport()":"new LoggerSentryTransport(config): LoggerSentryTransport\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tconfig\tLoggerSentryConfigInterface\tconfiguration file injected","returns#Returns":"LoggerSentryTransport","defined-in#Defined in":"packages/nestjs-logger/src/transports/logger-sentry.transport.ts:26","properties#Properties":"Property\tModifier\tType\tDescription\tconfig\treadonly\tLoggerSentryConfigInterface\tconfiguration file injected","methods#Methods":"","log#log()":"log(message, logLevel, error?): void\nMethod to log message to Sentry transport","parameters-1#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tmessage\tlogLevel\tLogLevel\tlog level\terror?\tstring | Error\terror","returns-1#Returns":"void","implementation-of#Implementation of":"LoggerTransportInterface.log","defined-in-1#Defined in":"packages/nestjs-logger/src/transports/logger-sentry.transport.ts:42"}},"/reference/rockets/nestjs-logger/classes/LoggerService":{"title":"Class: LoggerService","data":{"":"A service that extends the Logger class and implements LoggerServiceInterface.The LoggerService class contains the implementation of a custom Logger\nwhere it will call System logger and any third party transport log that was added.You will need to create a custom logger and we must ensure that at least one application module imports the LoggerService\nto trigger Nest to instantiate a singleton instance of our LoggerService class.","example#Example":"// Initialize a module that have the LoggerService imported\nconst app = await NestFactory.create(AppModule);\n// Get the singleton instance of LoggerService\nconst customLogger = app.get(LoggerService);\n// Get the transport instance\nconst sentry = app.get(LoggerSentryTransport);\n// Add the transports you want to use\ncustomLogger.addTransport(sentry);\n// Overwrite the the default Logger for a custom logger\n// This is to inform that this logger will new used internally\n// Or it will be used once yuo do a new Logger()\napp.useLogger(customLogger);\nawait app.listen(3000);","extends#Extends":"ConsoleLogger","implements#Implements":"LoggerServiceInterface","constructors#Constructors":"","new-loggerservice#new LoggerService()":"new LoggerService(transportService): LoggerService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\ttransportService\tLoggerTransportService\ttransport service","returns#Returns":"LoggerService","overrides#Overrides":"ConsoleLogger.constructor","defined-in#Defined in":"packages/nestjs-logger/src/logger.service.ts:49","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\tcontext?\tprotected\tstring\t-\tConsoleLogger.context\toptions\tprotected\tConsoleLoggerOptions\t-\tConsoleLogger.options\ttransportService\treadonly\tLoggerTransportService\ttransport service\t-","methods#Methods":"","addtransport#addTransport()":"addTransport(transport): void\nAdd a transport to be used for every log, it can be multiples","parameters-1#Parameters":"Parameter\tType\tDescription\ttransport\tLoggerTransportInterface\tThe transport that will be used beside the system logger","returns-1#Returns":"void","implementation-of#Implementation of":"LoggerServiceInterface.addTransport","defined-in-1#Defined in":"packages/nestjs-logger/src/logger.service.ts:58","colorize#colorize()":"protected colorize(message, logLevel): string","parameters-2#Parameters":"Parameter\tType\tmessage\tstring\tlogLevel\tLogLevel","returns-2#Returns":"string","inherited-from#Inherited from":"ConsoleLogger.colorize","defined-in-2#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:72","debug#debug()":"debug(message, context?): void\nMethod to be used when a debug message should be logged.","parameters-3#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tDebug Message\tcontext?\tstring\tContext of Message","returns-3#Returns":"void","implementation-of-1#Implementation of":"LoggerServiceInterface.debug","overrides-1#Overrides":"ConsoleLogger.debug","defined-in-3#Defined in":"packages/nestjs-logger/src/logger.service.ts:144","error#error()":"error(message, trace?, context?): void\nMethod to be called when an error should be logged.","parameters-4#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tError Message\ttrace?\tstring\tStack trace error\tcontext?\tstring\tContext of current Message","returns-4#Returns":"void","implementation-of-2#Implementation of":"LoggerServiceInterface.error","overrides-2#Overrides":"ConsoleLogger.error","defined-in-4#Defined in":"packages/nestjs-logger/src/logger.service.ts:108","exception#exception()":"exception(error, message?, context?): void\nMethod to log an exceptionIf the exception is between 400 and 500 status code\nit will be logged as a debug log level, otherwise it will be logged as an error.","parameters-5#Parameters":"Parameter\tType\tDescription\terror\tError\tError to be registered\tmessage?\tstring\tError Message\tcontext?\tstring\tContext of current error","returns-5#Returns":"void","implementation-of-3#Implementation of":"LoggerServiceInterface.exception","defined-in-5#Defined in":"packages/nestjs-logger/src/logger.service.ts:72","formatcontext#formatContext()":"protected formatContext(context): string","parameters-6#Parameters":"Parameter\tType\tcontext\tstring","returns-6#Returns":"string","inherited-from-1#Inherited from":"ConsoleLogger.formatContext","defined-in-6#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:69","formatmessage#formatMessage()":"protected formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff): string","parameters-7#Parameters":"Parameter\tType\tlogLevel\tLogLevel\tmessage\tunknown\tpidMessage\tstring\tformattedLogLevel\tstring\tcontextMessage\tstring\ttimestampDiff\tstring","returns-7#Returns":"string","inherited-from-2#Inherited from":"ConsoleLogger.formatMessage","defined-in-7#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:70","formatpid#formatPid()":"protected formatPid(pid): string","parameters-8#Parameters":"Parameter\tType\tpid\tnumber","returns-8#Returns":"string","inherited-from-3#Inherited from":"ConsoleLogger.formatPid","defined-in-8#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:68","formattimestampdiff#formatTimestampDiff()":"protected formatTimestampDiff(timestampDiff): string","parameters-9#Parameters":"Parameter\tType\ttimestampDiff\tnumber","returns-9#Returns":"string","inherited-from-4#Inherited from":"ConsoleLogger.formatTimestampDiff","defined-in-9#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:75","gettimestamp#getTimestamp()":"protected getTimestamp(): string","returns-10#Returns":"string","inherited-from-5#Inherited from":"ConsoleLogger.getTimestamp","defined-in-10#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:66","islevelenabled#isLevelEnabled()":"isLevelEnabled(level): boolean","parameters-10#Parameters":"Parameter\tType\tlevel\tLogLevel","returns-11#Returns":"boolean","inherited-from-6#Inherited from":"ConsoleLogger.isLevelEnabled","defined-in-11#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:65","log#log()":"log(message, context?): void\nMethod to be used when a simple log message should be logged.","parameters-11#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tLog message\tcontext?\tstring\tContext of Message","returns-12#Returns":"void","implementation-of-4#Implementation of":"LoggerServiceInterface.log","overrides-3#Overrides":"ConsoleLogger.log","defined-in-12#Defined in":"packages/nestjs-logger/src/logger.service.ts:155","printmessages#printMessages()":"protected printMessages(messages, context?, logLevel?, writeStreamType?): void","parameters-12#Parameters":"Parameter\tType\tmessages\tunknown[]\tcontext?\tstring\tlogLevel?\tLogLevel\twriteStreamType?\t\"stdout\" | \"stderr\"","returns-13#Returns":"void","inherited-from-7#Inherited from":"ConsoleLogger.printMessages","defined-in-13#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:67","printstacktrace#printStackTrace()":"protected printStackTrace(stack): void","parameters-13#Parameters":"Parameter\tType\tstack\tstring","returns-14#Returns":"void","inherited-from-8#Inherited from":"ConsoleLogger.printStackTrace","defined-in-14#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:73","resetcontext#resetContext()":"resetContext(): void\nResets the logger context to the value that was passed in the constructor.","returns-15#Returns":"void","inherited-from-9#Inherited from":"ConsoleLogger.resetContext","defined-in-15#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:64","setcontext#setContext()":"setContext(context): void\nSet logger context","parameters-14#Parameters":"Parameter\tType\tDescription\tcontext\tstring\tcontext","returns-16#Returns":"void","inherited-from-10#Inherited from":"ConsoleLogger.setContext","defined-in-16#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:60","setloglevels#setLogLevels()":"setLogLevels(levels): void\nSet log levels","parameters-15#Parameters":"Parameter\tType\tDescription\tlevels\tLogLevel[]\tlog levels","returns-17#Returns":"void","inherited-from-11#Inherited from":"ConsoleLogger.setLogLevels","defined-in-17#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:55","stringifymessage#stringifyMessage()":"protected stringifyMessage(message, logLevel): any","parameters-16#Parameters":"Parameter\tType\tmessage\tunknown\tlogLevel\tLogLevel","returns-18#Returns":"any","inherited-from-12#Inherited from":"ConsoleLogger.stringifyMessage","defined-in-18#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:71","updateandgettimestampdiff#updateAndGetTimestampDiff()":"protected updateAndGetTimestampDiff(): string","returns-19#Returns":"string","inherited-from-13#Inherited from":"ConsoleLogger.updateAndGetTimestampDiff","defined-in-19#Defined in":"node_modules/@nestjs/common/services/console-logger.service.d.ts:74","verbose#verbose()":"verbose(message, context?): void\nMethod to be used when a verbose message should be logged.","parameters-17#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tVerbose Message\tcontext?\tstring\tContext Message","returns-20#Returns":"void","implementation-of-5#Implementation of":"LoggerServiceInterface.verbose","overrides-4#Overrides":"ConsoleLogger.verbose","defined-in-20#Defined in":"packages/nestjs-logger/src/logger.service.ts:166","warn#warn()":"warn(message, context?): void\nMethod to be used when a warn message should be logged.","parameters-18#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tWarn Message\tcontext?\tstring\tContext of Message","returns-21#Returns":"void","implementation-of-6#Implementation of":"LoggerServiceInterface.warn","overrides-5#Overrides":"ConsoleLogger.warn","defined-in-21#Defined in":"packages/nestjs-logger/src/logger.service.ts:133"}},"/reference/rockets/nestjs-logger/classes/LoggerTransportService":{"title":"Class: LoggerTransportService","data":{"":"A transport service that will load all third party transport\nthat will be used to log messages to external","example#Example":"class TestTransport implements LoggerTransportInterface {\n    log(): void {\n      // forward message to transport\n    }\n}\nconst app = await NestFactory.create(AppModule, {\n  logger: loggerConfig().logLevel,\n});\nconst customLoggerService = app.get(LoggerService);\nconst testTransport = new TestTransport();\ncustomLoggerService.addTransport(testTransport);","constructors#Constructors":"","new-loggertransportservice#new LoggerTransportService()":"new LoggerTransportService(settings): LoggerTransportService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tsettings\tLoggerSettingsInterface\tlogger settings","returns#Returns":"LoggerTransportService","defined-in#Defined in":"packages/nestjs-logger/src/logger-transport.service.ts:47","properties#Properties":"Property\tModifier\tType\tDescription\tsettings\treadonly\tLoggerSettingsInterface\tlogger settings","methods#Methods":"","addtransport#addTransport()":"addTransport(transport): void\nMethod to add the transport that will be used","parameters-1#Parameters":"Parameter\tType\tDescription\ttransport\tLoggerTransportInterface\tInstance of a logger transport","returns-1#Returns":"void","defined-in-1#Defined in":"packages/nestjs-logger/src/logger-transport.service.ts:61","log#log()":"log(message, logLevel, error?): void\nMethod to log message to the transport based on the log level","parameters-2#Parameters":"Parameter\tType\tDescription\tmessage\tstring\tmessage\tlogLevel\tLogLevel\tlog level\terror?\tError\terror","returns-2#Returns":"void","defined-in-2#Defined in":"packages/nestjs-logger/src/logger-transport.service.ts:72"}},"/reference/rockets/nestjs-logger/interfaces/LoggerSettingsInterface":{"title":"Interface: LoggerSettingsInterface","data":{"":"Logger options interface.","properties#Properties":"Property\tType\tDescription\tlogLevel?\tLogLevel[]\tlist of log levels allowed\ttransportLogLevel?\tLogLevel[]\tList of transport log level allowed\ttransportSentryConfig?\tLoggerSentryConfigInterface\tConfiguration for Sentry"}},"/reference/rockets/nestjs-logger/globals":{"title":"@concepta/nestjs-logger","data":{"classes#Classes":"LoggerExceptionFilter\nLoggerModule\nLoggerRequestInterceptor\nLoggerSentryTransport\nLoggerService\nLoggerTransportService","interfaces#Interfaces":"LoggerSentryConfigInterface\nLoggerSettingsInterface"}},"/reference/rockets/nestjs-org/classes/OrgCreateDto":{"title":"Class: OrgCreateDto","data":{"":"Org Create DTO","extends#Extends":"Pick<OrgDto, \"name\" | \"owner\"> & Partial<Pick<OrgDto, \"active\">>","implements#Implements":"OrgCreatableInterface","constructors#Constructors":"","new-orgcreatedto#new OrgCreateDto()":"new OrgCreateDto(...args): OrgCreateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"OrgCreateDto","inherited-from#Inherited from":"IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tactive?\tpublic\tboolean\ttrue\tActive\tOrgCreatableInterface.active IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).active\tname\tpublic\tstring\t''\tName\tOrgCreatableInterface.name IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).name\towner\tpublic\tReferenceIdInterface<string>\tundefined\tOwner\tOrgCreatableInterface.owner IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).owner\targuments\tstatic\tany\tundefined\t-\tIntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).arguments\tcaller\tstatic\tFunction\tundefined\t-\tIntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).caller\tlength\treadonly\tnumber\tundefined\t-\tIntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tIntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"IntersectionType( PickType(OrgDto, ['name', 'owner'] as const), PartialType(PickType(OrgDto, ['active'] as const)), ).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-logger/interfaces/LoggerSentryConfigInterface":{"title":"Interface: LoggerSentryConfigInterface","data":{"":"Interface for Sentry configuration to define the log level\nmapping to be used on Sentry transport.","extends#Extends":"NodeOptions","properties#Properties":"Property\tType\tDescription\tInherited from\t_experiments?\tobject\tOptions which are in beta, or otherwise not guaranteed to be stable.\tSentryNodeOptions._experiments\t_metadata?\tSdkMetadata\tSet of metadata about the SDK that can be internally used to enhance envelopes and events, and provide additional data about every request.\tSentryNodeOptions._metadata\tattachStacktrace?\tboolean\tAttaches stacktraces to pure capture message / log integrations\tSentryNodeOptions.attachStacktrace\tautoSessionTracking?\tboolean\tA flag enabling Sessions Tracking feature. By default, Sessions Tracking is enabled.\tSentryNodeOptions.autoSessionTracking\tbeforeBreadcrumb?\t(breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => null | Breadcrumb\tA callback invoked when adding a breadcrumb, allowing to optionally modify it before adding it to future events. Note that you must return a valid breadcrumb from this callback. If you do not wish to modify the breadcrumb, simply return it at the end. Returning null will cause the breadcrumb to be dropped.\tSentryNodeOptions.beforeBreadcrumb\tbeforeSend?\t(event: Event, hint?: EventHint) => null | Event | PromiseLike<null | Event>\tA callback invoked during event submission, allowing to optionally modify the event before it is sent to Sentry. Note that you must return a valid event from this callback. If you do not wish to modify the event, simply return it at the end. Returning null will cause the event to be dropped.\tSentryNodeOptions.beforeSend\tcaCerts?\tstring\tHTTPS proxy certificates path\tSentryNodeOptions.caCerts\tdebug?\tboolean\tEnable debug functionality in the SDK itself\tSentryNodeOptions.debug\tdefaultIntegrations?\tfalse | Integration[]\tIf this is set to false, default integrations will not be added, otherwise this will internally be set to the recommended default integrations. TODO: We should consider changing this to `boolean\tIntegration[]`\tSentryNodeOptions.defaultIntegrations\tdist?\tstring\tSets the distribution for all events\tSentryNodeOptions.dist\tdsn?\tstring\tThe Dsn used to connect to Sentry and identify the project. If omitted, the SDK will not send any data to Sentry.\tSentryNodeOptions.dsn\tenabled?\tboolean\tSpecifies whether this SDK should send events to Sentry. Defaults to true.\tSentryNodeOptions.enabled\tenvironment?\tstring\tThe current environment of your application (e.g. \"production\").\tSentryNodeOptions.environment\tframeContextLines?\tnumber\tSets the number of context lines for each frame when loading a file. Deprecated Context lines configuration has moved to the ContextLines integration, and can be used like this: init({ dsn: '__DSN__', integrations: [new ContextLines({ frameContextLines: 10 })] })\tSentryNodeOptions.frameContextLines\thttpProxy?\tstring\tSet a HTTP proxy that should be used for outbound requests.\tSentryNodeOptions.httpProxy\thttpsProxy?\tstring\tSet a HTTPS proxy that should be used for outbound requests.\tSentryNodeOptions.httpsProxy\tignoreErrors?\t(string | RegExp)[]\tA pattern for error messages which should not be sent to Sentry. By default, all errors will be sent.\tSentryNodeOptions.ignoreErrors\tinitialScope?\tCaptureContext\tInitial data to populate scope.\tSentryNodeOptions.initialScope\tintegrations?\tIntegration[] | (integrations) => Integration[]\tList of integrations that should be installed after SDK was initialized. Accepts either a list of integrations or a function that receives default integrations and returns a new, updated list.\tSentryNodeOptions.integrations\tlogLevelMap\t(logLevel: LogLevel) => Severity\tMethod to map the log level from the config with sentry log levels\t-\tmaxBreadcrumbs?\tnumber\tThe maximum number of breadcrumbs sent with events. Defaults to 100. Values over 100 will be ignored and 100 used instead.\tSentryNodeOptions.maxBreadcrumbs\tmaxValueLength?\tnumber\tMaximum number of chars a single value can have before it will be truncated.\tSentryNodeOptions.maxValueLength\tnormalizeDepth?\tnumber\tMaximum number of levels that normalization algorithm will traverse in objects and arrays. Used when normalizing an event before sending, on all of the listed attributes: - breadcrumbs.data - user - contexts - extra Defaults to 3. Set to 0 to disable.\tSentryNodeOptions.normalizeDepth\tnormalizeMaxBreadth?\tnumber\tMaximum number of properties or elements that the normalization algorithm will output in any single array or object included in the normalized event. Used when normalizing an event before sending, on all of the listed attributes: - breadcrumbs.data - user - contexts - extra Defaults to 1000\tSentryNodeOptions.normalizeMaxBreadth\trelease?\tstring\tThe release identifier used when uploading respective source maps. Specify this value to allow Sentry to resolve the correct source maps when processing events.\tSentryNodeOptions.release\tsampleRate?\tnumber\tA global sample rate to apply to all events (0 - 1).\tSentryNodeOptions.sampleRate\tsendClientReports?\tboolean\tSend SDK Client Reports. By default, Client Reports are enabled.\tSentryNodeOptions.sendClientReports\tserverName?\tstring\tSets an optional server name (device name)\tSentryNodeOptions.serverName\tshutdownTimeout?\tnumber\tMaximum time in milliseconds to wait to drain the request queue, before the process is allowed to exit.\tSentryNodeOptions.shutdownTimeout\ttracesSampleRate?\tnumber\tSample rate to determine trace sampling. 0.0 = 0% chance of a given trace being sent (send no traces) 1.0 = 100% chance of a given trace being sent (send all traces) Tracing is enabled if either this or tracesSampler is defined. If both are defined, tracesSampleRate is ignored.\tSentryNodeOptions.tracesSampleRate\ttracesSampler?\t(samplingContext: SamplingContext) => number | boolean\tFunction to compute tracing sample rate dynamically and filter unwanted traces. Tracing is enabled if either this or tracesSampleRate is defined. If both are defined, tracesSampleRate is ignored. Will automatically be passed a context object of default and optional custom data. See Transaction.samplingContext and Hub.startTransaction.\tSentryNodeOptions.tracesSampler\ttransport?\tTransportClass<Transport>\tTransport object that should be used to send events to Sentry\tSentryNodeOptions.transport\ttransportOptions?\tTransportOptions\tOptions for the default transport that the SDK uses.\tSentryNodeOptions.transportOptions\ttunnel?\tstring\tA URL to an envelope tunnel endpoint. An envelope tunnel is an HTTP endpoint that accepts Sentry envelopes for forwarding. This can be used to force data through a custom server independent of the type of data.\tSentryNodeOptions.tunnel","methods#Methods":"","onfatalerror#onFatalError()?":"optional onFatalError(error): void\nCallback that is executed when a fatal global error occurs.","parameters#Parameters":"Parameter\tType\terror\tError","returns#Returns":"void","inherited-from#Inherited from":"SentryNodeOptions.onFatalError","defined-in#Defined in":"node_modules/@sentry/node/types/types.d.ts:32"}},"/reference/rockets/nestjs-org/classes/OrgController":{"title":"Class: OrgController","data":{"":"Org controller.","implements#Implements":"CrudControllerInterface<OrgEntityInterface, OrgCreatableInterface, OrgUpdatableInterface>","constructors#Constructors":"","new-orgcontroller#new OrgController()":"new OrgController(orgCrudService): OrgController\nConstructor.","parameters#Parameters":"Parameter\tType\tDescription\torgCrudService\tOrgCrudService\tinstance of the Org crud service","returns#Returns":"OrgController","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:62","methods#Methods":"","createmany#createMany()":"createMany(crudRequest, orgCreateManyDto): Promise<OrgEntityInterface[]>\nCreate many","parameters-1#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\torgCreateManyDto\tOrgCreateManyDto\torg create many dto","returns-1#Returns":"Promise<OrgEntityInterface[]>","implementation-of#Implementation of":"CrudControllerInterface.createMany","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:94","createone#createOne()":"createOne(crudRequest, orgCreateDto): Promise<OrgEntityInterface>\nCreate one","parameters-2#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\torgCreateDto\tOrgCreateDto\torg create dto","returns-2#Returns":"Promise<OrgEntityInterface>","implementation-of-1#Implementation of":"CrudControllerInterface.createOne","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:110","deleteone#deleteOne()":"deleteOne(crudRequest): Promise<void | OrgEntityInterface>\nDelete one","parameters-3#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-3#Returns":"Promise<void | OrgEntityInterface>","implementation-of-2#Implementation of":"CrudControllerInterface.deleteOne","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:140","getmany#getMany()":"getMany(crudRequest): Promise<OrgEntityInterface[] | CrudResultPaginatedInterface<OrgEntityInterface>>\nGet many","parameters-4#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-4#Returns":"Promise<OrgEntityInterface[] | CrudResultPaginatedInterface<OrgEntityInterface>>","implementation-of-3#Implementation of":"CrudControllerInterface.getMany","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:71","getone#getOne()":"getOne(crudRequest): Promise<OrgEntityInterface>\nGet one","parameters-5#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-5#Returns":"Promise<OrgEntityInterface>","implementation-of-4#Implementation of":"CrudControllerInterface.getOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:82","recoverone#recoverOne()":"recoverOne(crudRequest): Promise<OrgEntityInterface>\nRecover one","parameters-6#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-6#Returns":"Promise<OrgEntityInterface>","implementation-of-5#Implementation of":"CrudControllerInterface.recoverOne","defined-in-6#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:151","updateone#updateOne()":"updateOne(crudRequest, orgUpdateDto): Promise<OrgEntityInterface>\nUpdate one","parameters-7#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\torgUpdateDto\tOrgUpdateDto\torg update dto","returns-7#Returns":"Promise<OrgEntityInterface>","implementation-of-6#Implementation of":"CrudControllerInterface.updateOne","defined-in-7#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.controller.ts:126"}},"/reference/rockets/nestjs-org/README":{"title":"Rockets NestJS Org","data":{"":"A module for managing a basic Org entity, including controller with full CRUD, DTOs, sample data factory and seeder.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-org","usage#Usage":"// ...\nimport { TypeOrmExtModule } from '@concepta/nestjs-typeorm-ext';\nimport { CrudModule } from '@concepta/nestjs-crud';\nimport { OrgModule } from '@concepta/nestjs-org';\n@Module({\n  imports: [\n    TypeOrmExtModule.forRoot({\n      type: 'postgres',\n      url: 'postgres://user:pass@localhost:5432/postgres',\n    }),\n    CrudModule.forRoot({}),\n    OrgModule.forRoot({}),\n  ],\n})\nexport class AppModule {}","configuration#Configuration":"Seeding\nENV","seeding#Seeding":"Configurations specific to (optional) database seeding.","env#ENV":"Configurations available via environment.\nVariable\tType\tDefault\t\tORG_MODULE_SEEDER_AMOUNT\t<number>\t50\tnumber of additional users to create"}},"/reference/rockets/nestjs-org/classes/OrgCreateManyDto":{"title":"Class: OrgCreateManyDto","data":{"":"Org DTO","extends#Extends":"CrudCreateManyDto<OrgCreatableInterface>","constructors#Constructors":"","new-orgcreatemanydto#new OrgCreateManyDto()":"new OrgCreateManyDto(): OrgCreateManyDto","returns#Returns":"OrgCreateManyDto","inherited-from#Inherited from":"CrudCreateManyDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tbulk\tOrgCreateDto[]\t[]\tCrudCreateManyDto.bulk"}},"/reference/rockets/nestjs-org/classes/OrgCrudService":{"title":"Class: OrgCrudService","data":{"":"Org CRUD service","extends#Extends":"TypeOrmCrudService<OrgEntityInterface>","constructors#Constructors":"","new-orgcrudservice#new OrgCrudService()":"new OrgCrudService(orgRepo): OrgCrudService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\torgRepo\tRepository<OrgEntityInterface>\tinstance of the org repository.","returns#Returns":"OrgCrudService","overrides#Overrides":"TypeOrmCrudService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/services/org-crud.service.ts:18","properties#Properties":"Property\tModifier\tType\tInherited from\talias\treadonly\tstring\tTypeOrmCrudService.alias\tcount\treadonly\t(options?: FindManyOptions<OrgEntityInterface>) => Promise<number>\tTypeOrmCrudService.count\tcrudQueryHelper\treadonly\tCrudQueryHelper\tTypeOrmCrudService.crudQueryHelper\tdbName\tprotected\t\"mysql\" | \"mariadb\" | \"postgres\" | \"cockroachdb\" | \"sqlite\" | \"mssql\" | \"sap\" | \"oracle\" | \"cordova\" | \"nativescript\" | \"react-native\" | \"sqljs\" | \"mongodb\" | \"aurora-mysql\" | \"aurora-postgres\" | \"expo\" | \"better-sqlite3\" | \"capacitor\" | \"spanner\"\tTypeOrmCrudService.dbName\tentityColumns\tprotected\tstring[]\tTypeOrmCrudService.entityColumns\tentityColumnsHash\tprotected\tObjectLiteral\tTypeOrmCrudService.entityColumnsHash\tentityHasDeleteColumn\tprotected\tboolean\tTypeOrmCrudService.entityHasDeleteColumn\tentityPrimaryColumns\tprotected\tstring[]\tTypeOrmCrudService.entityPrimaryColumns\tentityRelationsHash\tprotected\tMap<string, IAllowedRelation>\tTypeOrmCrudService.entityRelationsHash\tentityType\treadonly\tClassType<OrgEntityInterface>\tTypeOrmCrudService.entityType\tfind\treadonly\t(options?: FindManyOptions<OrgEntityInterface>) => Promise<OrgEntityInterface[]>\tTypeOrmCrudService.find\tfindOne\treadonly\t(options: FindOneOptions<OrgEntityInterface>) => Promise<null | OrgEntityInterface>\tTypeOrmCrudService.findOne\trepo\tprotected\tRepository<OrgEntityInterface>\tTypeOrmCrudService.repo\tsqlInjectionRegEx\tprotected\tRegExp[]\tTypeOrmCrudService.sqlInjectionRegEx","methods#Methods":"","builderaddbrackets#builderAddBrackets()":"protected builderAddBrackets(builder, condition, brackets): void","parameters-1#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<OrgEntityInterface>\tcondition\tSConditionKey\tbrackets\tBrackets","returns-1#Returns":"void","inherited-from#Inherited from":"TypeOrmCrudService.builderAddBrackets","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:53","buildersetwhere#builderSetWhere()":"protected builderSetWhere(builder, condition, field, value, operator?): void","parameters-2#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<OrgEntityInterface>\tcondition\tSConditionKey\tfield\tstring\tvalue\tany\toperator?\tComparisonOperator","returns-2#Returns":"void","inherited-from-1#Inherited from":"TypeOrmCrudService.builderSetWhere","defined-in-2#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:54","createbuilder#createBuilder()":"createBuilder(parsed, options, many?, withDeleted?): Promise<SelectQueryBuilder<OrgEntityInterface>>","parameters-3#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions\tmany?\tboolean\twithDeleted?\tboolean","returns-3#Returns":"Promise<SelectQueryBuilder<OrgEntityInterface>>","inherited-from-2#Inherited from":"TypeOrmCrudService.createBuilder","defined-in-3#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:38","createmany#createMany()":"createMany(req, dto, queryOptions?): Promise<OrgEntityInterface[]>","parameters-4#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tCreateManyDto<DeepPartial<OrgEntityInterface>>\tqueryOptions?\tCrudQueryOptionsInterface","returns-4#Returns":"Promise<OrgEntityInterface[]>","inherited-from-3#Inherited from":"TypeOrmCrudService.createMany","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:15","createone#createOne()":"createOne(req, dto, queryOptions?): Promise<OrgEntityInterface>","parameters-5#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<OrgEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-5#Returns":"Promise<OrgEntityInterface>","inherited-from-4#Inherited from":"TypeOrmCrudService.createOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:16","createpageinfo#createPageInfo()":"createPageInfo(data, total, limit, offset): GetManyDefaultResponse<OrgEntityInterface>","parameters-6#Parameters":"Parameter\tType\tdata\tOrgEntityInterface[]\ttotal\tnumber\tlimit\tnumber\toffset\tnumber","returns-6#Returns":"GetManyDefaultResponse<OrgEntityInterface>","inherited-from-5#Inherited from":"TypeOrmCrudService.createPageInfo","defined-in-6#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:15","decidepagination#decidePagination()":"decidePagination(parsed, options): boolean","parameters-7#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions","returns-7#Returns":"boolean","inherited-from-6#Inherited from":"TypeOrmCrudService.decidePagination","defined-in-7#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:16","deleteone#deleteOne()":"deleteOne(req, queryOptions?): Promise<void | OrgEntityInterface>","parameters-8#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-8#Returns":"Promise<void | OrgEntityInterface>","inherited-from-7#Inherited from":"TypeOrmCrudService.deleteOne","defined-in-8#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:19","dogetmany#doGetMany()":"protected doGetMany(builder, query, options): Promise<OrgEntityInterface[] | GetManyDefaultResponse<OrgEntityInterface>>","parameters-9#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<OrgEntityInterface>\tquery\tParsedRequestParams\toptions\tCrudRequestOptions","returns-9#Returns":"Promise<OrgEntityInterface[] | GetManyDefaultResponse<OrgEntityInterface>>","inherited-from-8#Inherited from":"TypeOrmCrudService.doGetMany","defined-in-9#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:39","getallowedcolumns#getAllowedColumns()":"protected getAllowedColumns(columns, options): string[]","parameters-10#Parameters":"Parameter\tType\tcolumns\tstring[]\toptions\tQueryOptions","returns-10#Returns":"string[]","inherited-from-9#Inherited from":"TypeOrmCrudService.getAllowedColumns","defined-in-10#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:43","getentitycolumns#getEntityColumns()":"protected getEntityColumns(entityMetadata): object","parameters-11#Parameters":"Parameter\tType\tentityMetadata\tEntityMetadata","returns-11#Returns":"object\nName\tType\tcolumns\tstring[]\tprimaryColumns\tstring[]","inherited-from-10#Inherited from":"TypeOrmCrudService.getEntityColumns","defined-in-11#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:44","getfieldwithalias#getFieldWithAlias()":"protected getFieldWithAlias(field, sort?): string","parameters-12#Parameters":"Parameter\tType\tfield\tstring\tsort?\tboolean","returns-12#Returns":"string","inherited-from-11#Inherited from":"TypeOrmCrudService.getFieldWithAlias","defined-in-12#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:58","getmany#getMany()":"getMany(req, queryOptions?): Promise<OrgEntityInterface[] | CrudResultPaginatedInterface<OrgEntityInterface>>","parameters-13#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-13#Returns":"Promise<OrgEntityInterface[] | CrudResultPaginatedInterface<OrgEntityInterface>>","inherited-from-12#Inherited from":"TypeOrmCrudService.getMany","defined-in-13#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:13","getone#getOne()":"getOne(req, queryOptions?): Promise<OrgEntityInterface>","parameters-14#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-14#Returns":"Promise<OrgEntityInterface>","inherited-from-13#Inherited from":"TypeOrmCrudService.getOne","defined-in-14#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:14","getoneorfail#getOneOrFail()":"protected getOneOrFail(req, shallow?, withDeleted?): Promise<OrgEntityInterface>","parameters-15#Parameters":"Parameter\tType\treq\tCrudRequest\tshallow?\tboolean\twithDeleted?\tboolean","returns-15#Returns":"Promise<OrgEntityInterface>","inherited-from-14#Inherited from":"TypeOrmCrudService.getOneOrFail","defined-in-15#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:41","getparamfilters#getParamFilters()":"getParamFilters(parsed): ObjectLiteral","parameters-16#Parameters":"Parameter\tType\tparsed\tParsedRequestParams","returns-16#Returns":"ObjectLiteral","inherited-from-15#Inherited from":"TypeOrmCrudService.getParamFilters","defined-in-16#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:37","getprimaryparams#getPrimaryParams()":"getPrimaryParams(options): string[]","parameters-17#Parameters":"Parameter\tType\toptions\tCrudRequestOptions","returns-17#Returns":"string[]","inherited-from-16#Inherited from":"TypeOrmCrudService.getPrimaryParams","defined-in-17#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:19","getrelationmetadata#getRelationMetadata()":"protected getRelationMetadata(field, options): IAllowedRelation","parameters-18#Parameters":"Parameter\tType\tfield\tstring\toptions\tJoinOption","returns-18#Returns":"IAllowedRelation","inherited-from-17#Inherited from":"TypeOrmCrudService.getRelationMetadata","defined-in-18#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:48","getselect#getSelect()":"protected getSelect(query, options): string[]","parameters-19#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-19#Returns":"string[]","inherited-from-18#Inherited from":"TypeOrmCrudService.getSelect","defined-in-19#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:23","getskip#getSkip()":"getSkip(query, take): null | number","parameters-20#Parameters":"Parameter\tType\tquery\tParsedRequestParams\ttake\tnumber","returns-20#Returns":"null | number","inherited-from-19#Inherited from":"TypeOrmCrudService.getSkip","defined-in-20#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:18","getsort#getSort()":"protected getSort(query, options): ObjectLiteral","parameters-21#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-21#Returns":"ObjectLiteral","inherited-from-20#Inherited from":"TypeOrmCrudService.getSort","defined-in-21#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:57","gettake#getTake()":"getTake(query, options): null | number","parameters-22#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-22#Returns":"null | number","inherited-from-21#Inherited from":"TypeOrmCrudService.getTake","defined-in-22#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:17","mapoperatorstoquery#mapOperatorsToQuery()":"protected mapOperatorsToQuery(cond, param): object","parameters-23#Parameters":"Parameter\tType\tcond\tQueryFilter\tparam\tany","returns-23#Returns":"object\nName\tType\tparams\tObjectLiteral\tstr\tstring","inherited-from-22#Inherited from":"TypeOrmCrudService.mapOperatorsToQuery","defined-in-23#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:60","mapsort#mapSort()":"protected mapSort(sort): ObjectLiteral","parameters-24#Parameters":"Parameter\tType\tsort\tQuerySort[]","returns-24#Returns":"ObjectLiteral","inherited-from-23#Inherited from":"TypeOrmCrudService.mapSort","defined-in-24#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:59","oninitmapentitycolumns#onInitMapEntityColumns()":"protected onInitMapEntityColumns(): void","returns-25#Returns":"void","inherited-from-24#Inherited from":"TypeOrmCrudService.onInitMapEntityColumns","defined-in-25#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:40","prepareentitybeforesave#prepareEntityBeforeSave()":"protected prepareEntityBeforeSave(dto, parsed): OrgEntityInterface","parameters-25#Parameters":"Parameter\tType\tdto\tDeepPartial<OrgEntityInterface>\tparsed\tParsedRequestParams","returns-26#Returns":"OrgEntityInterface","inherited-from-25#Inherited from":"TypeOrmCrudService.prepareEntityBeforeSave","defined-in-26#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:42","recoverone#recoverOne()":"recoverOne(req, queryOptions?): Promise<OrgEntityInterface>","parameters-26#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-27#Returns":"Promise<OrgEntityInterface>","inherited-from-26#Inherited from":"TypeOrmCrudService.recoverOne","defined-in-27#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:20","replaceone#replaceOne()":"replaceOne(req, dto, queryOptions?): Promise<OrgEntityInterface>","parameters-27#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<OrgEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-28#Returns":"Promise<OrgEntityInterface>","inherited-from-27#Inherited from":"TypeOrmCrudService.replaceOne","defined-in-28#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:18","setandwhere#setAndWhere()":"protected setAndWhere(cond, i, builder): void","parameters-28#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<OrgEntityInterface> | WhereExpression","returns-29#Returns":"void","inherited-from-28#Inherited from":"TypeOrmCrudService.setAndWhere","defined-in-29#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:50","setjoin#setJoin()":"protected setJoin(cond, joinOptions, builder): boolean","parameters-29#Parameters":"Parameter\tType\tcond\tQueryJoin\tjoinOptions\tJoinOptions\tbuilder\tSelectQueryBuilder<OrgEntityInterface>","returns-30#Returns":"boolean","inherited-from-29#Inherited from":"TypeOrmCrudService.setJoin","defined-in-30#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:22","setorwhere#setOrWhere()":"protected setOrWhere(cond, i, builder): void","parameters-30#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<OrgEntityInterface> | WhereExpression","returns-31#Returns":"void","inherited-from-30#Inherited from":"TypeOrmCrudService.setOrWhere","defined-in-31#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:51","setsearchcondition#setSearchCondition()":"protected setSearchCondition(builder, search, condition?): void","parameters-31#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<OrgEntityInterface>\tsearch\tSCondition\tcondition?\tSConditionKey","returns-32#Returns":"void","inherited-from-31#Inherited from":"TypeOrmCrudService.setSearchCondition","defined-in-32#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:52","setsearchfieldobjectcondition#setSearchFieldObjectCondition()":"protected setSearchFieldObjectCondition(builder, condition, field, object): void","parameters-32#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<OrgEntityInterface>\tcondition\tSConditionKey\tfield\tstring\tobject\tany","returns-33#Returns":"void","inherited-from-32#Inherited from":"TypeOrmCrudService.setSearchFieldObjectCondition","defined-in-33#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:55","throwbadrequestexception#throwBadRequestException()":"throwBadRequestException(msg?): BadRequestException","parameters-33#Parameters":"Parameter\tType\tmsg?\tany","returns-34#Returns":"BadRequestException","inherited-from-33#Inherited from":"TypeOrmCrudService.throwBadRequestException","defined-in-34#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:13","thrownotfoundexception#throwNotFoundException()":"throwNotFoundException(name): NotFoundException","parameters-34#Parameters":"Parameter\tType\tname\tstring","returns-35#Returns":"NotFoundException","inherited-from-34#Inherited from":"TypeOrmCrudService.throwNotFoundException","defined-in-35#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:14","transaction#transaction()":"transaction(options?): TransactionProxy","parameters-35#Parameters":"Parameter\tType\toptions?\tSafeTransactionOptionsInterface","returns-36#Returns":"TransactionProxy","inherited-from-35#Inherited from":"TypeOrmCrudService.transaction","defined-in-36#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:21","updateone#updateOne()":"updateOne(req, dto, queryOptions?): Promise<OrgEntityInterface>","parameters-36#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<OrgEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-37#Returns":"Promise<OrgEntityInterface>","inherited-from-36#Inherited from":"TypeOrmCrudService.updateOne","defined-in-37#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:17"}},"/reference/rockets/nestjs-org/classes/OrgDto":{"title":"Class: OrgDto","data":{"":"Org DTO","extends#Extends":"CommonEntityDto","implements#Implements":"OrgInterface","constructors#Constructors":"","new-orgdto#new OrgDto()":"new OrgDto(): OrgDto","returns#Returns":"OrgDto","inherited-from#Inherited from":"CommonEntityDto.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\ttrue\tActive\t-\tdateCreated\tDate\tundefined\tDate created\tOrgInterface.dateCreated CommonEntityDto.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted\tOrgInterface.dateDeleted CommonEntityDto.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated\tOrgInterface.dateUpdated CommonEntityDto.dateUpdated\tid\tstring\tundefined\t-\tOrgInterface.id CommonEntityDto.id\tname\tstring\t''\tName\t-\towner\tReferenceIdInterface<string>\tundefined\tOwner\t-\tversion\tnumber\tundefined\tVersion\tOrgInterface.version CommonEntityDto.version"}},"/reference/rockets/nestjs-org/classes/OrgLookupService":{"title":"Class: OrgLookupService","data":{"":"Org lookup service","extends#Extends":"LookupService<OrgEntityInterface>","implements#Implements":"OrgLookupServiceInterface","constructors#Constructors":"","new-orglookupservice#new OrgLookupService()":"new OrgLookupService(repo, ownerLookupService): OrgLookupService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<OrgEntityInterface>\tinstance of the org repo\townerLookupService\tOrgOwnerLookupServiceInterface\t-","returns#Returns":"OrgLookupService","overrides#Overrides":"LookupService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/services/org-lookup.service.ts:29","properties#Properties":"Property\tModifier\tType\townerLookupService\treadonly\tOrgOwnerLookupServiceInterface","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"LookupService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:14","methods#Methods":"","byid#byId()":"byId(id, queryOptions?): Promise<null | OrgEntityInterface>\nGet entity for the given id.","parameters-1#Parameters":"Parameter\tType\tDescription\tid\tstring\tthe id\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-2#Returns":"Promise<null | OrgEntityInterface>","implementation-of#Implementation of":"OrgLookupServiceInterface.byId","inherited-from-1#Inherited from":"LookupService.byId","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/lookup.service.d.ts:7","find#find()":"find(options, queryOptions?): Promise<Promise<OrgEntityInterface[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<OrgEntityInterface>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<OrgEntityInterface[]>>","inherited-from-2#Inherited from":"LookupService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:10","findone#findOne()":"findOne(options, queryOptions?): Promise<null | OrgEntityInterface>\nFind One wrapper.","parameters-3#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<OrgEntityInterface>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-4#Returns":"Promise<null | OrgEntityInterface>","inherited-from-3#Inherited from":"LookupService.findOne","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:11","getowner#getOwner()":"getOwner(org, queryOptions?): Promise<null | ReferenceIdInterface<string>>\nGet owner for the given org.","parameters-4#Parameters":"Parameter\tType\tDescription\torg\tOrgOwnerInterface\tThe org of which owner to retrieve.\tqueryOptions?\tQueryOptionsInterface\t-","returns-5#Returns":"Promise<null | ReferenceIdInterface<string>>","implementation-of-1#Implementation of":"OrgLookupServiceInterface.getOwner","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/services/org-lookup.service.ts:43","repository#repository()":"repository(queryOptions?): Repository<OrgEntityInterface>\nReturn the correct repository instance.","parameters-5#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-6#Returns":"Repository<OrgEntityInterface>","inherited-from-4#Inherited from":"LookupService.repository","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:12","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-6#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-7#Returns":"TransactionProxy","inherited-from-5#Inherited from":"LookupService.transaction","defined-in-7#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:13"}},"/reference/rockets/nestjs-org/classes/OrgMemberPostgresEntity":{"title":"Class: abstract OrgMemberPostgresEntity","data":{"":"Audit Postgres Embed","extends#Extends":"CommonPostgresEntity","implements#Implements":"OrgMemberEntityInterface","constructors#Constructors":"","new-orgmemberpostgresentity#new OrgMemberPostgresEntity()":"new OrgMemberPostgresEntity(): OrgMemberPostgresEntity","returns#Returns":"OrgMemberPostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\ttrue\t-\t-\tdateCreated\tDate\tundefined\tDate created.\tOrgMemberEntityInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted.\tOrgMemberEntityInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated.\tOrgMemberEntityInterface.dateUpdated CommonPostgresEntity.dateUpdated\tid\tstring\tundefined\t-\tOrgMemberEntityInterface.id CommonPostgresEntity.id\torg\tReferenceIdInterface<string>\tundefined\t-\t-\torgId\tstring\tundefined\t-\t-\tuser\tReferenceIdInterface<string>\tundefined\t-\t-\tuserId\tstring\tundefined\t-\t-\tversion\tnumber\tundefined\tVersion\tOrgMemberEntityInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-org/classes/OrgMemberSqliteEntity":{"title":"Class: abstract OrgMemberSqliteEntity","data":{"":"Audit SqlLite Embed","extends#Extends":"CommonSqliteEntity","implements#Implements":"OrgMemberEntityInterface","constructors#Constructors":"","new-orgmembersqliteentity#new OrgMemberSqliteEntity()":"new OrgMemberSqliteEntity(): OrgMemberSqliteEntity","returns#Returns":"OrgMemberSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\ttrue\t-\t-\tdateCreated\tDate\tundefined\tDate created.\tOrgMemberEntityInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted.\tOrgMemberEntityInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated.\tOrgMemberEntityInterface.dateUpdated CommonSqliteEntity.dateUpdated\tid\tstring\tundefined\t-\tOrgMemberEntityInterface.id CommonSqliteEntity.id\torg\tReferenceIdInterface<string>\tundefined\t-\t-\torgId\tstring\tundefined\t-\t-\tuser\tReferenceIdInterface<string>\tundefined\t-\t-\tuserId\tstring\tundefined\t-\t-\tversion\tnumber\tundefined\tVersion\tOrgMemberEntityInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-org/classes/OrgModule":{"title":"Class: OrgModule","data":{"":"Org Module","extends#Extends":"OrgModuleClass","constructors#Constructors":"","new-orgmodule#new OrgModule()":"new OrgModule(): OrgModule","returns#Returns":"OrgModule","inherited-from#Inherited from":"OrgModuleClass.constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tOrgOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.module.ts:34","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tOrgOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.module.ts:26","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tOrgAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.module.ts:30","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tOrgOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"OrgModuleClass.register","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.module.ts:18","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tOrgAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"OrgModuleClass.registerAsync","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/org.module.ts:22"}},"/reference/rockets/nestjs-org/classes/OrgMutateService":{"title":"Class: OrgMutateService","data":{"":"Org mutate service","extends#Extends":"MutateService<OrgEntityInterface, OrgCreatableInterface, OrgUpdatableInterface>","implements#Implements":"OrgMutateServiceInterface","constructors#Constructors":"","new-orgmutateservice#new OrgMutateService()":"new OrgMutateService(repo): OrgMutateService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<OrgEntityInterface>\tinstance of the org repo","returns#Returns":"OrgMutateService","overrides#Overrides":"MutateService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/services/org-mutate.service.ts:35","properties#Properties":"Property\tModifier\tType\tDefault value\tOverrides\tcreateDto\tprotected\ttypeof OrgCreateDto\tOrgCreateDto\tMutateService.createDto\tupdateDto\tprotected\ttypeof OrgUpdateDto\tOrgUpdateDto\tMutateService.updateDto","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"MutateService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:14","methods#Methods":"","create#create()":"create(data, queryOptions?): Promise<OrgEntityInterface>\nCreate one","parameters-1#Parameters":"Parameter\tType\tDescription\tdata\tOrgCreatableInterface\tthe reference to create\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<OrgEntityInterface>the created reference","implementation-of#Implementation of":"OrgMutateServiceInterface.create","inherited-from-1#Inherited from":"MutateService.create","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:9","find#find()":"find(options, queryOptions?): Promise<Promise<OrgEntityInterface[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<OrgEntityInterface>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<OrgEntityInterface[]>>","inherited-from-2#Inherited from":"MutateService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:10","findbyid#findById()":"protected findById(id, queryOptions?): Promise<OrgEntityInterface>\nInternal","parameters-3#Parameters":"Parameter\tType\tid\tstring\tqueryOptions?\tQueryOptionsInterface","returns-4#Returns":"Promise<OrgEntityInterface>","inherited-from-3#Inherited from":"MutateService.findById","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:17","findone#findOne()":"findOne(options, queryOptions?): Promise<null | OrgEntityInterface>\nFind One wrapper.","parameters-4#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<OrgEntityInterface>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-5#Returns":"Promise<null | OrgEntityInterface>","inherited-from-4#Inherited from":"MutateService.findOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:11","remove#remove()":"remove(data, queryOptions?): Promise<OrgEntityInterface>\nRemove one","parameters-5#Parameters":"Parameter\tType\tDescription\tdata\tDeepPartial<OrgEntityInterface> & ReferenceIdInterface<string>\tthe reference data to remove\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-6#Returns":"Promise<OrgEntityInterface>the removed reference","implementation-of-1#Implementation of":"OrgMutateServiceInterface.remove","inherited-from-5#Inherited from":"MutateService.remove","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:12","replace#replace()":"replace(data, queryOptions?): Promise<OrgEntityInterface>\nReplace one","parameters-6#Parameters":"Parameter\tType\tDescription\tdata\tOrgCreatableInterface & ReferenceIdInterface<string>\tthe reference data to replace\tqueryOptions?\tQueryOptionsInterface\t-","returns-7#Returns":"Promise<OrgEntityInterface>the replaced reference","implementation-of-2#Implementation of":"OrgMutateServiceInterface.replace","inherited-from-6#Inherited from":"MutateService.replace","defined-in-7#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:11","repository#repository()":"repository(queryOptions?): Repository<OrgEntityInterface>\nReturn the correct repository instance.","parameters-7#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-8#Returns":"Repository<OrgEntityInterface>","inherited-from-7#Inherited from":"MutateService.repository","defined-in-8#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:12","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-8#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-9#Returns":"TransactionProxy","inherited-from-8#Inherited from":"MutateService.transaction","defined-in-9#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:13","transform#transform()":"protected transform(data, _queryOptions?): Promise<DeepPartial<OrgEntityInterface>>\nInternal","parameters-9#Parameters":"Parameter\tType\tdata\tDeepPartial<OrgEntityInterface>\t_queryOptions?\tQueryOptionsInterface","returns-10#Returns":"Promise<DeepPartial<OrgEntityInterface>>","inherited-from-9#Inherited from":"MutateService.transform","defined-in-10#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:16","update#update()":"update(data, queryOptions?): Promise<OrgEntityInterface>\nUpdate one","parameters-10#Parameters":"Parameter\tType\tDescription\tdata\tOrgUpdatableInterface & ReferenceIdInterface<string>\tthe reference data to update\tqueryOptions?\tQueryOptionsInterface\t-","returns-11#Returns":"Promise<OrgEntityInterface>the updated reference","implementation-of-3#Implementation of":"OrgMutateServiceInterface.update","inherited-from-10#Inherited from":"MutateService.update","defined-in-11#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:10","validate#validate()":"protected validate<T>(type, data): Promise<T>\nInternal","type-parameters#Type Parameters":"Type Parameter\tT extends DeepPartial<OrgEntityInterface>","parameters-11#Parameters":"Parameter\tType\ttype\tType<T>\tdata\tT","returns-12#Returns":"Promise<T>","inherited-from-11#Inherited from":"MutateService.validate","defined-in-12#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:15"}},"/reference/rockets/nestjs-org/classes/OrgPaginatedDto":{"title":"Class: OrgPaginatedDto","data":{"":"Org paginated DTO","extends#Extends":"CrudResponsePaginatedDto<OrgInterface>","constructors#Constructors":"","new-orgpaginateddto#new OrgPaginatedDto()":"new OrgPaginatedDto(): OrgPaginatedDto","returns#Returns":"OrgPaginatedDto","inherited-from#Inherited from":"CrudResponsePaginatedDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tInherited from\tcount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.count\tdata\tOrgDto[]\t[]\tCrudResponsePaginatedDto.data\t-\tpage\tnumber\tundefined\t-\tCrudResponsePaginatedDto.page\tpageCount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.pageCount\ttotal\tnumber\tundefined\t-\tCrudResponsePaginatedDto.total"}},"/reference/rockets/nestjs-org/classes/OrgSqliteEntity":{"title":"Class: abstract OrgSqliteEntity","data":{"":"Org Sqlite Entity","extends#Extends":"CommonSqliteEntity","implements#Implements":"OrgEntityInterface","constructors#Constructors":"","new-orgsqliteentity#new OrgSqliteEntity()":"new OrgSqliteEntity(): OrgSqliteEntity","returns#Returns":"OrgSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\ttrue\t-\t-\tdateCreated\tDate\tundefined\tDate created.\tOrgEntityInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted.\tOrgEntityInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated.\tOrgEntityInterface.dateUpdated CommonSqliteEntity.dateUpdated\tid\tstring\tundefined\t-\tOrgEntityInterface.id CommonSqliteEntity.id\tname\tstring\tundefined\tName\t-\towner\tReferenceIdInterface<string>\tundefined\tOrg Owner\t-\tversion\tnumber\tundefined\tVersion\tOrgEntityInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-org/classes/OrgPostgresEntity":{"title":"Class: abstract OrgPostgresEntity","data":{"":"Org Postgres Entity","extends#Extends":"CommonPostgresEntity","implements#Implements":"OrgEntityInterface","constructors#Constructors":"","new-orgpostgresentity#new OrgPostgresEntity()":"new OrgPostgresEntity(): OrgPostgresEntity","returns#Returns":"OrgPostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\ttrue\tFlag to determine if the org is active or not\t-\tdateCreated\tDate\tundefined\tDate created.\tOrgEntityInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted.\tOrgEntityInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated.\tOrgEntityInterface.dateUpdated CommonPostgresEntity.dateUpdated\tid\tstring\tundefined\t-\tOrgEntityInterface.id CommonPostgresEntity.id\tname\tstring\tundefined\tName\t-\towner\tReferenceIdInterface<string>\tundefined\tOwner\t-\tversion\tnumber\tundefined\tVersion\tOrgEntityInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-org/globals":{"title":"@concepta/nestjs-org","data":{"enumerations#Enumerations":"OrgResource","classes#Classes":"OrgController\nOrgCreateDto\nOrgCreateManyDto\nOrgCrudService\nOrgDto\nOrgLookupService\nOrgMemberPostgresEntity\nOrgMemberSqliteEntity\nOrgModule\nOrgMutateService\nOrgPaginatedDto\nOrgPostgresEntity\nOrgSqliteEntity\nOrgUpdateDto","interfaces#Interfaces":"OrgEntityInterface\nOrgLookupServiceInterface\nOrgMutateServiceInterface"}},"/reference/rockets/nestjs-org/classes/OrgUpdateDto":{"title":"Class: OrgUpdateDto","data":{"":"Org Update DTO","extends#Extends":"Pick<OrgDto, \"name\" | \"active\" | \"owner\">","implements#Implements":"OrgUpdatableInterface","constructors#Constructors":"","new-orgupdatedto#new OrgUpdateDto()":"new OrgUpdateDto(...args): OrgUpdateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"OrgUpdateDto","inherited-from#Inherited from":"PickType(OrgDto, ['name', 'active', 'owner'] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tactive\tpublic\tboolean\ttrue\tActive\tOrgUpdatableInterface.active PickType(OrgDto, ['name', 'active', 'owner'] as const).active\tname\tpublic\tstring\t''\tName\tOrgUpdatableInterface.name PickType(OrgDto, ['name', 'active', 'owner'] as const).name\towner\tpublic\tReferenceIdInterface<string>\tundefined\tOwner\tOrgUpdatableInterface.owner PickType(OrgDto, ['name', 'active', 'owner'] as const).owner\targuments\tstatic\tany\tundefined\t-\tPickType(OrgDto, ['name', 'active', 'owner'] as const).arguments\tcaller\tstatic\tFunction\tundefined\t-\tPickType(OrgDto, ['name', 'active', 'owner'] as const).caller\tlength\treadonly\tnumber\tundefined\t-\tPickType(OrgDto, ['name', 'active', 'owner'] as const).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(OrgDto, ['name', 'active', 'owner'] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(OrgDto, ['name', 'active', 'owner'] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(OrgDto, ['name', 'active', 'owner'] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(OrgDto, ['name', 'active', 'owner'] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(OrgDto, ['name', 'active', 'owner'] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(OrgDto, ['name', 'active', 'owner'] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-org/enumerations/OrgResource":{"title":"Enumeration: OrgResource","data":{"enumeration-members#Enumeration Members":"Enumeration Member\tValue\tMany\t\"org-list\"\tOne\t\"org\""}},"/reference/rockets/nestjs-org/interfaces/OrgEntityInterface":{"title":"Interface: OrgEntityInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"OrgInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tactive\tboolean\t-\tOrgInterface.active\tdateCreated\tDate\t-\tOrgInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tOrgInterface.dateDeleted\tdateUpdated\tDate\t-\tOrgInterface.dateUpdated\tid\tstring\t-\tOrgInterface.id\tmembers?\tOrgMemberInterface\t-\tOrgInterface.members\tname\tstring\tName\tOrgInterface.name\towner\tReferenceIdInterface<string>\tOrg Owner\tOrgInterface.owner\tversion\tnumber\t-\tOrgInterface.version"}},"/reference/rockets/nestjs-org/interfaces/OrgMutateServiceInterface":{"title":"Interface: OrgMutateServiceInterface","data":{"extends#Extends":"CreateOneInterface<OrgCreatableInterface, OrgEntityInterface>.UpdateOneInterface<OrgUpdatableInterface & ReferenceIdInterface, OrgEntityInterface, QueryOptionsInterface>.ReplaceOneInterface<OrgCreatableInterface & ReferenceIdInterface, OrgEntityInterface, QueryOptionsInterface>.RemoveOneInterface<OrgEntityInterface, OrgEntityInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tcreate\t(object: OrgCreatableInterface, options?: ReferenceQueryOptionsInterface) => Promise<OrgEntityInterface>\tCreateOneInterface.create\tremove\t(object: OrgEntityInterface, options?: QueryOptionsInterface) => Promise<OrgEntityInterface>\tRemoveOneInterface.remove\treplace\t(object: OrgCreatableInterface & ReferenceIdInterface<string>, options?: QueryOptionsInterface) => Promise<OrgEntityInterface>\tReplaceOneInterface.replace\tupdate\t(object: OrgUpdatableInterface & ReferenceIdInterface<string>, options?: QueryOptionsInterface) => Promise<OrgEntityInterface>\tUpdateOneInterface.update"}},"/reference/rockets/nestjs-otp/README":{"title":"Rockets NestJS Otp","data":{"":"A module for managing a basic Otp entity, including controller with full CRUD, DTOs, sample data factory and seeder.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-otp","usage#Usage":"// ...\nimport { TypeOrmExtModule } from '@concepta/nestjs-typeorm-ext';\nimport { OtpModule } from '@concepta/nestjs-user';\nimport { CrudModule } from '@concepta/nestjs-crud';\n@Module({\n  imports: [\n    TypeOrmExtModule.forRoot({\n      type: 'postgres',\n      url: 'postgres://user:pass@localhost:5432/postgres',\n    }),\n    CrudModule.forRoot({}),\n    OtpModule.forRoot({}),\n  ],\n})\nexport class AppModule {}","configuration#Configuration":"Seeding\nENV","seeding#Seeding":"Configurations specific to (optional) database seeding.","env#ENV":"Configurations available via environment.\nVariable\tType\tDefault\t\tORG_MODULE_SEEDER_AMOUNT\t<number>\t50\tnumber of additional users to create"}},"/reference/rockets/nestjs-org/interfaces/OrgLookupServiceInterface":{"title":"Interface: OrgLookupServiceInterface","data":{"extends#Extends":"LookupIdInterface<ReferenceId, ReferenceIdInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tbyId\t(id: string, options?: QueryOptionsInterface) => Promise<null | ReferenceIdInterface<string>>\tLookupIdInterface.byId","methods#Methods":"","getowner#getOwner()":"getOwner(org, queryOptions?): Promise<null | ReferenceIdInterface<string>>","parameters#Parameters":"Parameter\tType\torg\tOrgOwnerInterface\tqueryOptions?\tQueryOptionsInterface","returns#Returns":"Promise<null | ReferenceIdInterface<string>>","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-org/src/interfaces/org-lookup-service.interface.ts:15"}},"/reference/rockets/nestjs-otp/classes/OtpCreateDto":{"title":"Class: OtpCreateDto","data":{"":"Otp Create DTO","implements#Implements":"OtpCreatableInterface","constructors#Constructors":"","new-otpcreatedto#new OtpCreateDto()":"new OtpCreateDto(): OtpCreateDto","returns#Returns":"OtpCreateDto","properties#Properties":"Property\tType\tDefault value\tDescription\tassignee\tReferenceIdInterface<string>\tundefined\tAssignee\tcategory\tstring\t''\tcategory\texpiresIn\tstring\t''\tExpressed in seconds or a string describing a time span zeit/ms. Eg: 60, \"2 days\", \"10h\", \"7d\"\ttype\tstring\t''\ttype"}},"/reference/rockets/nestjs-otp/classes/OtpModule":{"title":"Class: OtpModule","data":{"":"Otp Module","extends#Extends":"OtpModuleClass","constructors#Constructors":"","new-otpmodule#new OtpModule()":"new OtpModule(): OtpModule","returns#Returns":"OtpModule","inherited-from#Inherited from":"OtpModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tOtpOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-otp/src/otp.module.ts:33","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tOtpOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-otp/src/otp.module.ts:25","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tOtpAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-otp/src/otp.module.ts:29","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tOtpOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"OtpModuleClass.register","defined-in-4#Defined in":"packages/nestjs-otp/src/otp.module.ts:17","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tOtpAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"OtpModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-otp/src/otp.module.ts:21"}},"/reference/rockets/nestjs-otp/classes/OtpPostgresEntity":{"title":"Class: abstract OtpPostgresEntity","data":{"":"Otp Postgres Entity","extends#Extends":"CommonPostgresEntity","implements#Implements":"OtpInterface","constructors#Constructors":"","new-otppostgresentity#new OtpPostgresEntity()":"new OtpPostgresEntity(): OtpPostgresEntity","returns#Returns":"OtpPostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tShould be overwrite by the table it will be assigned to\t-\tcategory\tstring\tName\t-\tdateCreated\tDate\tDate created.\tOtpInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tOtpInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tOtpInterface.dateUpdated CommonPostgresEntity.dateUpdated\texpirationDate\tDate\tDate it will expire\t-\tid\tstring\t-\tOtpInterface.id CommonPostgresEntity.id\tpasscode\tstring\tPasscode\t-\ttype\tstring\tType of the passcode\t-\tversion\tnumber\tVersion\tOtpInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-otp/classes/OtpService":{"title":"Class: OtpService","data":{"implements#Implements":"OtpServiceInterface","constructors#Constructors":"","new-otpservice#new OtpService()":"new OtpService(allOtpRepos, settings): OtpService","parameters#Parameters":"Parameter\tType\tallOtpRepos\tRecord<string, Repository<OtpInterface>>\tsettings\tOtpSettingsInterface","returns#Returns":"OtpService","defined-in#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:31","properties#Properties":"Property\tModifier\tType\tsettings\treadonly\tOtpSettingsInterface","methods#Methods":"","clear#clear()":"clear(assignment, otp, queryOptions?): Promise<void>\nClear all otps for assign in given category.","parameters-1#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the repository\totp\tPick<OtpInterface, \"category\" | \"assignee\">\tThe otp to clear\tqueryOptions?\tQueryOptionsInterface\t-","returns-1#Returns":"Promise<void>","implementation-of#Implementation of":"OtpServiceInterface.clear","defined-in-1#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:141","create#create()":"create(assignment, otp, queryOptions?): Promise<OtpInterface>\nCreate a otp with a for the given assignee.","parameters-2#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe otp assignment\totp\tOtpCreatableInterface\tThe data to create\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<OtpInterface>","implementation-of-1#Implementation of":"OtpServiceInterface.create","defined-in-2#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:44","delete#delete()":"delete(assignment, otp, queryOptions?): Promise<void>\nDelete a otp based on params","parameters-3#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe otp assignment\totp\tPick<OtpInterface, \"category\" | \"assignee\" | \"passcode\">\tThe otp to delete\tqueryOptions?\tQueryOptionsInterface\t-","returns-3#Returns":"Promise<void>","implementation-of-2#Implementation of":"OtpServiceInterface.delete","defined-in-3#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:122","deleteotp#deleteOtp()":"protected deleteOtp(assignment, id, queryOptions?): Promise<void>\nInternalDelete OTP based on assignment","parameters-4#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment to delete id from\tid\tstring | string[]\tThe id or ids to delete\tqueryOptions?\tQueryOptionsInterface\t-","returns-4#Returns":"Promise<void>","defined-in-4#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:167","getassignedotps#getAssignedOtps()":"protected getAssignedOtps(assignment, otp, queryOptions?): Promise<OtpInterface[]>\nGet all OTPs for assignee.","parameters-5#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the check\totp\tPick<OtpInterface, \"category\" | \"assignee\">\tThe otp to get assignments\tqueryOptions?\tQueryOptionsInterface\t-","returns-5#Returns":"Promise<OtpInterface[]>","defined-in-5#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:191","getassignmentrepo#getAssignmentRepo()":"protected getAssignmentRepo(assignment): Repository<OtpInterface>\nInternalGet the assignment repo for the given assignment.","parameters-6#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe otp assignment","returns-6#Returns":"Repository<OtpInterface>","defined-in-6#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:261","getbypasscode#getByPasscode()":"protected getByPasscode(assignment, otp, queryOptions?): Promise<null | OtpInterface>","parameters-7#Parameters":"Parameter\tType\tassignment\tstring\totp\tPick<OtpInterface, \"category\" | \"passcode\">\tqueryOptions?\tQueryOptionsInterface","returns-7#Returns":"Promise<null | OtpInterface>","defined-in-7#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:223","validate#validate()":"validate(assignment, otp, deleteIfValid, queryOptions?): Promise<null | ReferenceAssigneeInterface<ReferenceIdInterface<string>>>\nCheck if otp is valid","parameters-8#Parameters":"Parameter\tType\tDefault value\tDescription\tassignment\tstring\tundefined\tThe otp assignment\totp\tPick<OtpInterface, \"category\" | \"passcode\">\tundefined\tThe otp to validate\tdeleteIfValid\tboolean\tfalse\tIf true, delete the otp if it is valid\tqueryOptions?\tQueryOptionsInterface\tundefined\t-","returns-8#Returns":"Promise<null | ReferenceAssigneeInterface<ReferenceIdInterface<string>>>","implementation-of-3#Implementation of":"OtpServiceInterface.validate","defined-in-8#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:92","validatedto#validateDto()":"protected validateDto<T>(type, data): Promise<T>","type-parameters#Type Parameters":"Type Parameter\tT extends DeepPartial<OtpInterface>","parameters-9#Parameters":"Parameter\tType\ttype\tType<T>\tdata\tT","returns-9#Returns":"Promise<T>","defined-in-9#Defined in":"packages/nestjs-otp/src/services/otp.service.ts:275"}},"/reference/rockets/nestjs-otp/classes/OtpSqliteEntity":{"title":"Class: abstract OtpSqliteEntity","data":{"":"Otp Sqlite Entity","extends#Extends":"CommonSqliteEntity","implements#Implements":"OtpInterface","constructors#Constructors":"","new-otpsqliteentity#new OtpSqliteEntity()":"new OtpSqliteEntity(): OtpSqliteEntity","returns#Returns":"OtpSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tShould be overwrite by the table it will be assigned to\t-\tcategory\tstring\tName\t-\tdateCreated\tDate\tDate created.\tOtpInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tOtpInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tOtpInterface.dateUpdated CommonSqliteEntity.dateUpdated\texpirationDate\tDate\tDate it will expire\t-\tid\tstring\t-\tOtpInterface.id CommonSqliteEntity.id\tpasscode\tstring\tPasscode\t-\ttype\tstring\tType of the passcode\t-\tversion\tnumber\tVersion\tOtpInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-otp/globals":{"title":"@concepta/nestjs-otp","data":{"classes#Classes":"OtpCreateDto\nOtpModule\nOtpPostgresEntity\nOtpService\nOtpSqliteEntity"}},"/reference/rockets/nestjs-password/classes/PasswordCreationService":{"title":"Class: PasswordCreationService","data":{"":"Service with functions related to password creation\nto check if password is strong, and the number of attempts user can do to update a password","implements#Implements":"PasswordCreationServiceInterface","constructors#Constructors":"","new-passwordcreationservice#new PasswordCreationService()":"new PasswordCreationService(settings, passwordStorageService, passwordValidationService, passwordStrengthService): PasswordCreationService\nConstructor","parameters#Parameters":"Parameter\tType\tsettings\tPasswordSettingsInterface\tpasswordStorageService\tPasswordStorageService\tpasswordValidationService\tPasswordValidationService\tpasswordStrengthService\tPasswordStrengthService","returns#Returns":"PasswordCreationService","defined-in#Defined in":"packages/nestjs-password/src/services/password-creation.service.ts:26","properties#Properties":"Property\tModifier\tType\tpasswordStorageService\treadonly\tPasswordStorageService\tpasswordStrengthService\treadonly\tPasswordStrengthService\tpasswordValidationService\treadonly\tPasswordValidationService\tsettings\treadonly\tPasswordSettingsInterface","methods#Methods":"","checkattempt#checkAttempt()":"checkAttempt(numOfAttempts): boolean\nCheck if number of current attempt is allowed based on the amount of attempts left\nif the number of attempts left is greater then","parameters-1#Parameters":"Parameter\tType\tDefault value\tnumOfAttempts\tnumber\t0","returns-1#Returns":"booleanNumber of attempts user has to try","implementation-of#Implementation of":"PasswordCreationServiceInterface.checkAttempt","defined-in-1#Defined in":"packages/nestjs-password/src/services/password-creation.service.ts:155","checkattemptleft#checkAttemptLeft()":"checkAttemptLeft(numOfAttempts): number\nCheck number of attempts of using password","parameters-2#Parameters":"Parameter\tType\tDefault value\tDescription\tnumOfAttempts\tnumber\t0\tnumber of attempts","returns-2#Returns":"number","implementation-of-1#Implementation of":"PasswordCreationServiceInterface.checkAttemptLeft","defined-in-2#Defined in":"packages/nestjs-password/src/services/password-creation.service.ts:164","createobject#createObject()":"Create password for an object.","param#Param":"An object containing the new password to hash.","param-1#Param":"Password create options.","createobjectobject-options#createObject(object, options)":"createObject<T>(object, options?): Promise<Omit<T, \"password\"> & PasswordStorageInterface>\nCreate password for an object.","type-parameters#Type Parameters":"Type Parameter\tT extends PasswordPlainInterface","parameters-3#Parameters":"Parameter\tType\tDescription\tobject\tT\tAn object containing the new password to hash.\toptions?\tPasswordCreateObjectOptionsInterface\tPassword create options.","returns-3#Returns":"Promise<Omit<T, \"password\"> & PasswordStorageInterface>A new object with the password hashed, with salt added.","implementation-of-2#Implementation of":"PasswordCreationServiceInterface.createObject","defined-in-3#Defined in":"packages/nestjs-password/src/services/password-creation.service.ts:41","createobjectobject-options-1#createObject(object, options)":"createObject<T>(object, options?): Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & Partial<PasswordStorageInterface>>\nCreate password for an object.","type-parameters-1#Type Parameters":"Type Parameter\tT extends Partial<PasswordPlainInterface>","parameters-4#Parameters":"Parameter\tType\tDescription\tobject\tT\tAn object containing the new password to hash.\toptions?\tPasswordCreateObjectOptionsInterface\tPassword create options.","returns-4#Returns":"Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & Partial<PasswordStorageInterface>>A new object with the password hashed, with salt added.","implementation-of-3#Implementation of":"PasswordCreationServiceInterface.createObject","defined-in-4#Defined in":"packages/nestjs-password/src/services/password-creation.service.ts:53","validatecurrent#validateCurrent()":"validateCurrent(options): Promise<boolean>\nValidate the current password for the targeted object.","parameters-5#Parameters":"Parameter\tType\tDescription\toptions\tPartial<PasswordCurrentPasswordInterface>\tValidate current options.","returns-5#Returns":"Promise<boolean>boolean","implementation-of-4#Implementation of":"PasswordCreationServiceInterface.validateCurrent","defined-in-5#Defined in":"packages/nestjs-password/src/services/password-creation.service.ts:89","validatehistory#validateHistory()":"validateHistory(options): Promise<boolean>\nValidate the array of password stores to check for previous usage.","parameters-6#Parameters":"Parameter\tType\tDescription\toptions\tPartial<PasswordHistoryPasswordInterface>\tValidate history options.","returns-6#Returns":"Promise<boolean>boolean Returns true if password has NOT been used withing configured range.","implementation-of-5#Implementation of":"PasswordCreationServiceInterface.validateHistory","defined-in-6#Defined in":"packages/nestjs-password/src/services/password-creation.service.ts:114"}},"/reference/rockets/nestjs-password/README":{"title":"Rockets NestJS Password","data":{"":"A flexible Password utilities module that provides services for password strength, creation and storage.","project#Project":"","overview#Overview":"The module exports three services: PasswordStrengthService, PasswordCreationService, and PasswordStorageService.The PasswordCreationService uses the PasswordStrengthService internally for check password strength.","installation#Installation":"yarn add @concepta/nestjs-password","todo#TODO":"Make all services overridable at time of registration."}},"/reference/rockets/nestjs-password/classes/PasswordModule":{"title":"Class: PasswordModule","data":{"extends#Extends":"PasswordModuleClass","constructors#Constructors":"","new-passwordmodule#new PasswordModule()":"new PasswordModule(): PasswordModule","returns#Returns":"PasswordModule","inherited-from#Inherited from":"PasswordModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tPasswordOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-password/src/password.module.ts:30","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tPasswordOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-password/src/password.module.ts:22","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tPasswordAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-password/src/password.module.ts:26","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tPasswordOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"PasswordModuleClass.register","defined-in-4#Defined in":"packages/nestjs-password/src/password.module.ts:14","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tPasswordAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"PasswordModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-password/src/password.module.ts:18"}},"/reference/rockets/nestjs-password/classes/PasswordStrengthService":{"title":"Class: PasswordStrengthService","data":{"":"Service to validate password strength","implements#Implements":"PasswordStrengthServiceInterface","constructors#Constructors":"","new-passwordstrengthservice#new PasswordStrengthService()":"new PasswordStrengthService(settings): PasswordStrengthService","parameters#Parameters":"Parameter\tType\tDescription\tsettings\tPasswordSettingsInterface\tPassword module settings","returns#Returns":"PasswordStrengthService","defined-in#Defined in":"packages/nestjs-password/src/services/password-strength.service.ts:20","properties#Properties":"Property\tModifier\tType\tDescription\tsettings\treadonly\tPasswordSettingsInterface\tPassword module settings","methods#Methods":"","isstrong#isStrong()":"isStrong(password): boolean\nMethod to check if password is strong","parameters-1#Parameters":"Parameter\tType\tDescription\tpassword\tstring\tthe plain text password","returns-1#Returns":"booleanpassword strength","implementation-of#Implementation of":"PasswordStrengthServiceInterface.isStrong","defined-in-1#Defined in":"packages/nestjs-password/src/services/password-strength.service.ts:31"}},"/reference/rockets/nestjs-password/classes/PasswordStorageService":{"title":"Class: PasswordStorageService","data":{"":"Service with functions related to password security","implements#Implements":"PasswordStorageServiceInterface","constructors#Constructors":"","new-passwordstorageservice#new PasswordStorageService()":"new PasswordStorageService(): PasswordStorageService","returns#Returns":"PasswordStorageService","methods#Methods":"","generatesalt#generateSalt()":"generateSalt(): Promise<string>\nGenerate Salts to safeguard passwords in storage.","returns-1#Returns":"Promise<string>","implementation-of#Implementation of":"PasswordStorageServiceInterface.generateSalt","defined-in#Defined in":"packages/nestjs-password/src/services/password-storage.service.ts:17","hash#hash()":"hash(password, options?): Promise<PasswordStorageInterface>\nHash a password using a salt, if no\nwas passed, then one will be generated.","parameters#Parameters":"Parameter\tType\tDescription\tpassword\tstring\tPassword to be hashed\toptions?\tPasswordHashOptionsInterface\tHash options","returns-2#Returns":"Promise<PasswordStorageInterface>","implementation-of-1#Implementation of":"PasswordStorageServiceInterface.hash","defined-in-1#Defined in":"packages/nestjs-password/src/services/password-storage.service.ts:28","hashobject#hashObject()":"Hash password for an object.","param#Param":"An object containing the new password to hash.","param-1#Param":"Hash object options","hashobjectobject-options#hashObject(object, options)":"hashObject<T>(object, options?): Promise<Omit<T, \"password\"> & PasswordStorageInterface>\nHash password for an object.","type-parameters#Type Parameters":"Type Parameter\tT extends PasswordPlainInterface","parameters-1#Parameters":"Parameter\tType\tDescription\tobject\tT\tAn object containing the new password to hash.\toptions?\tPasswordHashObjectOptionsInterface\tHash object options","returns-3#Returns":"Promise<Omit<T, \"password\"> & PasswordStorageInterface>A new object with the password hashed, with salt added.","implementation-of-2#Implementation of":"PasswordStorageServiceInterface.hashObject","defined-in-2#Defined in":"packages/nestjs-password/src/services/password-storage.service.ts:48","hashobjectobject-options-1#hashObject(object, options)":"hashObject<T>(object, options?): Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & PasswordStorageInterface>\nHash password for an object if the password property exists.","type-parameters-1#Type Parameters":"Type Parameter\tT extends PasswordPlainInterface","parameters-2#Parameters":"Parameter\tType\tDescription\tobject\tPartial<T>\tAn object containing the new password to hash.\toptions?\tPasswordHashObjectOptionsInterface\tHash object options","returns-4#Returns":"Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & PasswordStorageInterface>A new object with the password hashed, with salt added.","implementation-of-3#Implementation of":"PasswordStorageServiceInterface.hashObject","defined-in-3#Defined in":"packages/nestjs-password/src/services/password-storage.service.ts:60"}},"/reference/rockets/nestjs-password/classes/PasswordValidationService":{"title":"Class: PasswordValidationService","data":{"":"Service with functions related to password validation","implements#Implements":"PasswordValidationServiceInterface","constructors#Constructors":"","new-passwordvalidationservice#new PasswordValidationService()":"new PasswordValidationService(): PasswordValidationService","returns#Returns":"PasswordValidationService","methods#Methods":"","validate#validate()":"validate(options): Promise<boolean>\nValidate if password matches and its valid.","parameters#Parameters":"Parameter\tType\tDescription\toptions\tPasswordValidateOptionsInterface\tValidation options","returns-1#Returns":"Promise<boolean>","implementation-of#Implementation of":"PasswordValidationServiceInterface.validate","defined-in#Defined in":"packages/nestjs-password/src/services/password-validation.service.ts:17","validateobject#validateObject()":"validateObject<T>(password, object): Promise<boolean>\nValidate password on an object.","type-parameters#Type Parameters":"Type Parameter\tT extends PasswordStorageInterface","parameters-1#Parameters":"Parameter\tType\tDescription\tpassword\tstring\tPlain text password\tobject\tT\tThe object on which the password and salt are stored","returns-2#Returns":"Promise<boolean>","implementation-of-1#Implementation of":"PasswordValidationServiceInterface.validateObject","defined-in-1#Defined in":"packages/nestjs-password/src/services/password-validation.service.ts:28"}},"/reference/rockets/nestjs-password/globals":{"title":"@concepta/nestjs-password","data":{"enumerations#Enumerations":"PasswordStrengthEnum","classes#Classes":"PasswordCreationService\nPasswordModule\nPasswordStorageService\nPasswordStrengthService\nPasswordValidationService","interfaces#Interfaces":"PasswordCreateObjectOptionsInterface\nPasswordCreationServiceInterface\nPasswordOptionsInterface\nPasswordStorageInterface\nPasswordStorageServiceInterface\nPasswordValidationServiceInterface","functions#Functions":"isPasswordStorage"}},"/reference/rockets/nestjs-password/enumerations/PasswordStrengthEnum":{"title":"Enumeration: PasswordStrengthEnum","data":{"":"Enum for password strength","enumeration-members#Enumeration Members":"Enumeration Member\tValue\tMedium\t2\tNone\t0\tStrong\t3\tVeryStrong\t4\tWeak\t1"}},"/reference/rockets/nestjs-password/interfaces/PasswordCreateObjectOptionsInterface":{"title":"Interface: PasswordCreateObjectOptionsInterface","data":{"properties#Properties":"Property\tType\tDescription\trequired?\tboolean\tSet to true if password is required.\tsalt?\tstring\tOptional salt. If not provided, one will be generated."}},"/reference/rockets/nestjs-password/functions/isPasswordStorage":{"title":"Function: isPasswordStorage()","data":{"":"isPasswordStorage(target): target is PasswordStorageInterface","parameters#Parameters":"Parameter\tType\ttarget\tunknown","returns#Returns":"target is PasswordStorageInterface","defined-in#Defined in":"packages/nestjs-password/src/utils/is-password-storage.typeguard.ts:3"}},"/reference/rockets/nestjs-password/interfaces/PasswordCreationServiceInterface":{"title":"Interface: PasswordCreationServiceInterface","data":{"":"Password Creation Service Interface","properties#Properties":"Property\tType\tDescription\tvalidateCurrent\t(options: Partial<PasswordCurrentPasswordInterface>) => Promise<boolean>\tValidate the current password for the targeted object.\tvalidateHistory\t(options: Partial<PasswordHistoryPasswordInterface>) => Promise<boolean>\tValidate the array of password stores to check for previous usage.","methods#Methods":"","checkattempt#checkAttempt()":"checkAttempt(numOfAttempts): boolean\nCheck if attempt is valid.","parameters#Parameters":"Parameter\tType\tnumOfAttempts\tnumber","returns#Returns":"booleanNumber of attempts user has to try","defined-in#Defined in":"packages/nestjs-password/src/interfaces/password-creation-service.interface.ts:50","checkattemptleft#checkAttemptLeft()":"checkAttemptLeft(numOfAttempts): number\nCheck number of attempts of using password","parameters-1#Parameters":"Parameter\tType\tDescription\tnumOfAttempts\tnumber\tnumber of attempts","returns-1#Returns":"numbernumber of attempts left","defined-in-1#Defined in":"packages/nestjs-password/src/interfaces/password-creation-service.interface.ts:58","createobject#createObject()":"createObject<T>(object, options?): Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & PasswordStorageInterface>\nCreate password for an object (optionally).","type-parameters#Type Parameters":"Type Parameter\tT extends PasswordPlainInterface","parameters-2#Parameters":"Parameter\tType\tDescription\tobject\tT\tAn object containing the new password to hash.\toptions?\tPasswordCreateObjectOptionsInterface\tPassword create options.","returns-2#Returns":"Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & PasswordStorageInterface>A new object with the password hashed, with salt added.","defined-in-2#Defined in":"packages/nestjs-password/src/interfaces/password-creation-service.interface.ts:18"}},"/reference/rockets/nestjs-password/interfaces/PasswordStorageInterface":{"title":"Interface: PasswordStorageInterface","data":{"":"Password storage interface","extended-by#Extended by":"","properties#Properties":"Property\tType\tDescription\tpasswordHash\tnull | string\tHashed password\tpasswordSalt\tnull | string\tSalt used to hash password"}},"/reference/rockets/nestjs-password/interfaces/PasswordOptionsInterface":{"title":"Interface: PasswordOptionsInterface","data":{"":"Password module configuration options interface","properties#Properties":"Property\tType\tsettings?\tPasswordSettingsInterface"}},"/reference/rockets/nestjs-password/interfaces/PasswordStorageServiceInterface":{"title":"Interface: PasswordStorageServiceInterface","data":{"":"Password Storage Service Interface","methods#Methods":"","generatesalt#generateSalt()":"generateSalt(): Promise<string>\nGenerate salt to be used to hash a password.","returns#Returns":"Promise<string>","defined-in#Defined in":"packages/nestjs-password/src/interfaces/password-storage-service.interface.ts:13","hash#hash()":"hash(password, options?): Promise<PasswordStorageInterface>\nHash a password using a salt, if no\nwas passed, then generate one automatically.","parameters#Parameters":"Parameter\tType\tDescription\tpassword\tstring\tPassword to be hashed\toptions?\tPasswordHashOptionsInterface\tHash options","returns-1#Returns":"Promise<PasswordStorageInterface>","defined-in-1#Defined in":"packages/nestjs-password/src/interfaces/password-storage-service.interface.ts:22","hashobject#hashObject()":"hashObject<T>(object, options?): Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & PasswordStorageInterface>\nHash password for an object.","type-parameters#Type Parameters":"Type Parameter\tT extends PasswordPlainInterface","parameters-1#Parameters":"Parameter\tType\tDescription\tobject\tT\tAn object containing the new password to hash.\toptions?\tPasswordHashObjectOptionsInterface\tHash object options","returns-2#Returns":"Promise<Omit<T, \"password\"> | Omit<T, \"password\"> & PasswordStorageInterface>A new object with the password hashed, with salt added.","defined-in-2#Defined in":"packages/nestjs-password/src/interfaces/password-storage-service.interface.ts:34"}},"/reference/rockets/nestjs-role/README":{"title":"Rockets NestJS Role","data":{"":"A module for managing a basic Role entity, including controller with full CRUD, DTOs, sample data factory and seeder.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-role","usage#Usage":"// ...\nimport { TypeOrmExtModule } from '@concepta/nestjs-typeorm-ext';\nimport { RoleModule } from '@concepta/nestjs-user';\nimport { CrudModule } from '@concepta/nestjs-crud';\n@Module({\n  imports: [\n    TypeOrmExtModule.register({\n      type: 'postgres',\n      url: 'postgres://user:pass@localhost:5432/postgres',\n    }),\n    CrudModule.register(),\n    RoleModule.register(),\n  ],\n})\nexport class AppModule {}","configuration#Configuration":"Seeding\nENV","seeding#Seeding":"Configurations specific to (optional) database seeding.","env#ENV":"Configurations available via environment.\nVariable\tType\tDefault\t\tORG_MODULE_SEEDER_AMOUNT\t<number>\t50\tnumber of additional users to create"}},"/reference/rockets/nestjs-role/classes/RoleAssignmentCreateDto":{"title":"Class: RoleAssignmentCreateDto","data":{"":"Role Assignment Create DTO","extends#Extends":"Pick<RoleAssignmentDto, \"role\" | \"assignee\">","implements#Implements":"RoleAssignmentCreatableInterface","constructors#Constructors":"","new-roleassignmentcreatedto#new RoleAssignmentCreateDto()":"new RoleAssignmentCreateDto(...args): RoleAssignmentCreateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"RoleAssignmentCreateDto","inherited-from#Inherited from":"PickType(RoleAssignmentDto, ['role', 'assignee'] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\tassignee\tpublic\tReferenceIdInterface<string>\tAssignee\tRoleAssignmentCreatableInterface.assignee PickType(RoleAssignmentDto, ['role', 'assignee'] as const).assignee\trole\tpublic\tReferenceIdInterface<string>\tRole\tRoleAssignmentCreatableInterface.role PickType(RoleAssignmentDto, ['role', 'assignee'] as const).role\targuments\tstatic\tany\t-\tPickType(RoleAssignmentDto, ['role', 'assignee'] as const).arguments\tcaller\tstatic\tFunction\t-\tPickType(RoleAssignmentDto, ['role', 'assignee'] as const).caller\tlength\treadonly\tnumber\t-\tPickType(RoleAssignmentDto, ['role', 'assignee'] as const).length\tname\treadonly\tstring\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(RoleAssignmentDto, ['role', 'assignee'] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(RoleAssignmentDto, ['role', 'assignee'] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(RoleAssignmentDto, ['role', 'assignee'] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(RoleAssignmentDto, ['role', 'assignee'] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(RoleAssignmentDto, ['role', 'assignee'] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(RoleAssignmentDto, ['role', 'assignee'] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-password/interfaces/PasswordValidationServiceInterface":{"title":"Interface: PasswordValidationServiceInterface","data":{"":"Password Storage Validation Interface","methods#Methods":"","validate#validate()":"validate(options): Promise<boolean>\nValidate if password matches and its valid.","parameters#Parameters":"Parameter\tType\tDescription\toptions\tPasswordValidateOptionsInterface\tValidation options","returns#Returns":"Promise<boolean>","defined-in#Defined in":"packages/nestjs-password/src/interfaces/password-validation-service.interface.ts:13","validateobject#validateObject()":"validateObject<T>(passwordPlain, object): Promise<boolean>\nValidate password on an object.","type-parameters#Type Parameters":"Type Parameter\tT extends PasswordStorageInterface","parameters-1#Parameters":"Parameter\tType\tDescription\tpasswordPlain\tstring\tPlain text password\tobject\tT\tThe object on which the password and salt are stored","returns-1#Returns":"Promise<boolean>","defined-in-1#Defined in":"packages/nestjs-password/src/interfaces/password-validation-service.interface.ts:21"}},"/reference/rockets/nestjs-role/classes/RoleAssignmentDto":{"title":"Class: RoleAssignmentDto","data":{"":"Role assignment DTO","extends#Extends":"CommonEntityDto","implements#Implements":"RoleAssignmentInterface","constructors#Constructors":"","new-roleassignmentdto#new RoleAssignmentDto()":"new RoleAssignmentDto(): RoleAssignmentDto","returns#Returns":"RoleAssignmentDto","inherited-from#Inherited from":"CommonEntityDto.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tAssignee\t-\tdateCreated\tDate\tDate created\tRoleAssignmentInterface.dateCreated CommonEntityDto.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted\tRoleAssignmentInterface.dateDeleted CommonEntityDto.dateDeleted\tdateUpdated\tDate\tDate updated\tRoleAssignmentInterface.dateUpdated CommonEntityDto.dateUpdated\tid\tstring\t-\tRoleAssignmentInterface.id CommonEntityDto.id\trole\tReferenceIdInterface<string>\tRole\t-\tversion\tnumber\tVersion\tRoleAssignmentInterface.version CommonEntityDto.version"}},"/reference/rockets/nestjs-role/classes/RoleAssignmentCreateManyDto":{"title":"Class: RoleAssignmentCreateManyDto","data":{"":"Role assignment create many DTO","extends#Extends":"CrudCreateManyDto<RoleAssignmentCreatableInterface>","constructors#Constructors":"","new-roleassignmentcreatemanydto#new RoleAssignmentCreateManyDto()":"new RoleAssignmentCreateManyDto(): RoleAssignmentCreateManyDto","returns#Returns":"RoleAssignmentCreateManyDto","inherited-from#Inherited from":"CrudCreateManyDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tbulk\tRoleAssignmentCreatableInterface[]\t[]\tCrudCreateManyDto.bulk"}},"/reference/rockets/nestjs-role/classes/RoleAssignmentPaginatedDto":{"title":"Class: RoleAssignmentPaginatedDto","data":{"":"Role assignment paginated DTO","extends#Extends":"CrudResponsePaginatedDto<RoleAssignmentInterface>","constructors#Constructors":"","new-roleassignmentpaginateddto#new RoleAssignmentPaginatedDto()":"new RoleAssignmentPaginatedDto(): RoleAssignmentPaginatedDto","returns#Returns":"RoleAssignmentPaginatedDto","inherited-from#Inherited from":"CrudResponsePaginatedDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tInherited from\tcount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.count\tdata\tRoleAssignmentInterface[]\t[]\tCrudResponsePaginatedDto.data\t-\tpage\tnumber\tundefined\t-\tCrudResponsePaginatedDto.page\tpageCount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.pageCount\ttotal\tnumber\tundefined\t-\tCrudResponsePaginatedDto.total"}},"/reference/rockets/nestjs-role/classes/RoleAssignmentSqliteEntity":{"title":"Class: abstract RoleAssignmentSqliteEntity","data":{"":"Role Assignment Sqlite Entity","extends#Extends":"CommonSqliteEntity","implements#Implements":"RoleAssignmentEntityInterface","constructors#Constructors":"","new-roleassignmentsqliteentity#new RoleAssignmentSqliteEntity()":"new RoleAssignmentSqliteEntity(): RoleAssignmentSqliteEntity","returns#Returns":"RoleAssignmentSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tAssignee You will need to decorate this in your concrete entity class\t-\tdateCreated\tDate\tDate created.\tRoleAssignmentEntityInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tRoleAssignmentEntityInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tRoleAssignmentEntityInterface.dateUpdated CommonSqliteEntity.dateUpdated\tid\tstring\t-\tRoleAssignmentEntityInterface.id CommonSqliteEntity.id\trole\tRoleEntityInterface\tRole You will need to decorate this in your concrete entity class\t-\tversion\tnumber\tVersion\tRoleAssignmentEntityInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-role/classes/RoleAssignmentPostgresEntity":{"title":"Class: abstract RoleAssignmentPostgresEntity","data":{"":"Role Assignment Postgres Entity","extends#Extends":"CommonPostgresEntity","implements#Implements":"RoleAssignmentEntityInterface","constructors#Constructors":"","new-roleassignmentpostgresentity#new RoleAssignmentPostgresEntity()":"new RoleAssignmentPostgresEntity(): RoleAssignmentPostgresEntity","returns#Returns":"RoleAssignmentPostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\tAssignee You will need to decorate this in your concrete entity class\t-\tdateCreated\tDate\tDate created.\tRoleAssignmentEntityInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tRoleAssignmentEntityInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tRoleAssignmentEntityInterface.dateUpdated CommonPostgresEntity.dateUpdated\tid\tstring\t-\tRoleAssignmentEntityInterface.id CommonPostgresEntity.id\trole\tRoleEntityInterface\tRole You will need to decorate this in your concrete entity class\t-\tversion\tnumber\tVersion\tRoleAssignmentEntityInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-role/classes/RoleController":{"title":"Class: RoleController","data":{"":"Role controller.","implements#Implements":"CrudControllerInterface<RoleEntityInterface, RoleCreatableInterface, RoleUpdatableInterface>","constructors#Constructors":"","new-rolecontroller#new RoleController()":"new RoleController(roleCrudService): RoleController\nConstructor.","parameters#Parameters":"Parameter\tType\tDescription\troleCrudService\tRoleCrudService\tinstance of the Role crud service","returns#Returns":"RoleController","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.controller.ts:60","methods#Methods":"","createmany#createMany()":"createMany(crudRequest, roleCreateManyDto): Promise<RoleEntityInterface[]>\nCreate many","parameters-1#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\troleCreateManyDto\tRoleCreateManyDto\trole create many dto","returns-1#Returns":"Promise<RoleEntityInterface[]>","implementation-of#Implementation of":"CrudControllerInterface.createMany","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.controller.ts:92","createone#createOne()":"createOne(crudRequest, roleCreateDto): Promise<RoleEntityInterface>\nCreate one","parameters-2#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\troleCreateDto\tRoleCreateDto\trole create dto","returns-2#Returns":"Promise<RoleEntityInterface>","implementation-of-1#Implementation of":"CrudControllerInterface.createOne","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.controller.ts:117","deleteone#deleteOne()":"deleteOne(crudRequest): Promise<void | RoleEntityInterface>\nDelete one","parameters-3#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-3#Returns":"Promise<void | RoleEntityInterface>","implementation-of-2#Implementation of":"CrudControllerInterface.deleteOne","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.controller.ts:147","getmany#getMany()":"getMany(crudRequest): Promise<RoleEntityInterface[] | CrudResultPaginatedInterface<RoleEntityInterface>>\nGet many","parameters-4#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-4#Returns":"Promise<RoleEntityInterface[] | CrudResultPaginatedInterface<RoleEntityInterface>>","implementation-of-3#Implementation of":"CrudControllerInterface.getMany","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.controller.ts:69","getone#getOne()":"getOne(crudRequest): Promise<RoleEntityInterface>\nGet one","parameters-5#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-5#Returns":"Promise<RoleEntityInterface>","implementation-of-4#Implementation of":"CrudControllerInterface.getOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.controller.ts:80","updateone#updateOne()":"updateOne(crudRequest, roleUpdateDto): Promise<RoleEntityInterface>\nUpdate one","parameters-6#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\troleUpdateDto\tRoleUpdateDto\trole update dto","returns-6#Returns":"Promise<RoleEntityInterface>","implementation-of-5#Implementation of":"CrudControllerInterface.updateOne","defined-in-6#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.controller.ts:133"}},"/reference/rockets/nestjs-role/classes/RoleCreateDto":{"title":"Class: RoleCreateDto","data":{"":"Role Create DTO","extends#Extends":"Pick<RoleDto, \"name\" | \"description\">","implements#Implements":"RoleCreatableInterface","constructors#Constructors":"","new-rolecreatedto#new RoleCreateDto()":"new RoleCreateDto(...args): RoleCreateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"RoleCreateDto","inherited-from#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tdescription\tpublic\tstring\t''\tName\tRoleCreatableInterface.description PickType(RoleDto, ['name', 'description'] as const).description\tname\tpublic\tstring\t''\tName\tRoleCreatableInterface.name PickType(RoleDto, ['name', 'description'] as const).name\targuments\tstatic\tany\tundefined\t-\tPickType(RoleDto, ['name', 'description'] as const).arguments\tcaller\tstatic\tFunction\tundefined\t-\tPickType(RoleDto, ['name', 'description'] as const).caller\tlength\treadonly\tnumber\tundefined\t-\tPickType(RoleDto, ['name', 'description'] as const).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(RoleDto, ['name', 'description'] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-role/classes/RoleCreateManyDto":{"title":"Class: RoleCreateManyDto","data":{"":"Role DTO","extends#Extends":"CrudCreateManyDto<RoleCreatableInterface>","constructors#Constructors":"","new-rolecreatemanydto#new RoleCreateManyDto()":"new RoleCreateManyDto(): RoleCreateManyDto","returns#Returns":"RoleCreateManyDto","inherited-from#Inherited from":"CrudCreateManyDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tbulk\tRoleCreateDto[]\t[]\tCrudCreateManyDto.bulk"}},"/reference/rockets/nestjs-role/classes/RoleDto":{"title":"Class: RoleDto","data":{"":"Role DTO","extends#Extends":"CommonEntityDto","implements#Implements":"RoleInterface","constructors#Constructors":"","new-roledto#new RoleDto()":"new RoleDto(): RoleDto","returns#Returns":"RoleDto","inherited-from#Inherited from":"CommonEntityDto.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tassignees\tReferenceAssigneeInterface<ReferenceIdInterface<string>>[]\t[]\tAssignee\t-\tdateCreated\tDate\tundefined\tDate created\tRoleInterface.dateCreated CommonEntityDto.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted\tRoleInterface.dateDeleted CommonEntityDto.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated\tRoleInterface.dateUpdated CommonEntityDto.dateUpdated\tdescription\tstring\t''\tName\t-\tid\tstring\tundefined\t-\tRoleInterface.id CommonEntityDto.id\tname\tstring\t''\tName\t-\tversion\tnumber\tundefined\tVersion\tRoleInterface.version CommonEntityDto.version"}},"/reference/rockets/nestjs-role/classes/RoleCrudService":{"title":"Class: RoleCrudService","data":{"":"Role CRUD service","extends#Extends":"TypeOrmCrudService<RoleEntityInterface>","constructors#Constructors":"","new-rolecrudservice#new RoleCrudService()":"new RoleCrudService(roleRepo): RoleCrudService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\troleRepo\tRepository<RoleEntityInterface>\tinstance of the role repository.","returns#Returns":"RoleCrudService","overrides#Overrides":"TypeOrmCrudService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role-crud.service.ts:18","properties#Properties":"Property\tModifier\tType\tInherited from\talias\treadonly\tstring\tTypeOrmCrudService.alias\tcount\treadonly\t(options?: FindManyOptions<RoleEntityInterface>) => Promise<number>\tTypeOrmCrudService.count\tcrudQueryHelper\treadonly\tCrudQueryHelper\tTypeOrmCrudService.crudQueryHelper\tdbName\tprotected\t\"mysql\" | \"mariadb\" | \"postgres\" | \"cockroachdb\" | \"sqlite\" | \"mssql\" | \"sap\" | \"oracle\" | \"cordova\" | \"nativescript\" | \"react-native\" | \"sqljs\" | \"mongodb\" | \"aurora-mysql\" | \"aurora-postgres\" | \"expo\" | \"better-sqlite3\" | \"capacitor\" | \"spanner\"\tTypeOrmCrudService.dbName\tentityColumns\tprotected\tstring[]\tTypeOrmCrudService.entityColumns\tentityColumnsHash\tprotected\tObjectLiteral\tTypeOrmCrudService.entityColumnsHash\tentityHasDeleteColumn\tprotected\tboolean\tTypeOrmCrudService.entityHasDeleteColumn\tentityPrimaryColumns\tprotected\tstring[]\tTypeOrmCrudService.entityPrimaryColumns\tentityRelationsHash\tprotected\tMap<string, IAllowedRelation>\tTypeOrmCrudService.entityRelationsHash\tentityType\treadonly\tClassType<RoleEntityInterface>\tTypeOrmCrudService.entityType\tfind\treadonly\t(options?: FindManyOptions<RoleEntityInterface>) => Promise<RoleEntityInterface[]>\tTypeOrmCrudService.find\tfindOne\treadonly\t(options: FindOneOptions<RoleEntityInterface>) => Promise<null | RoleEntityInterface>\tTypeOrmCrudService.findOne\trepo\tprotected\tRepository<RoleEntityInterface>\tTypeOrmCrudService.repo\tsqlInjectionRegEx\tprotected\tRegExp[]\tTypeOrmCrudService.sqlInjectionRegEx","methods#Methods":"","builderaddbrackets#builderAddBrackets()":"protected builderAddBrackets(builder, condition, brackets): void","parameters-1#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<RoleEntityInterface>\tcondition\tSConditionKey\tbrackets\tBrackets","returns-1#Returns":"void","inherited-from#Inherited from":"TypeOrmCrudService.builderAddBrackets","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:53","buildersetwhere#builderSetWhere()":"protected builderSetWhere(builder, condition, field, value, operator?): void","parameters-2#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<RoleEntityInterface>\tcondition\tSConditionKey\tfield\tstring\tvalue\tany\toperator?\tComparisonOperator","returns-2#Returns":"void","inherited-from-1#Inherited from":"TypeOrmCrudService.builderSetWhere","defined-in-2#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:54","createbuilder#createBuilder()":"createBuilder(parsed, options, many?, withDeleted?): Promise<SelectQueryBuilder<RoleEntityInterface>>","parameters-3#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions\tmany?\tboolean\twithDeleted?\tboolean","returns-3#Returns":"Promise<SelectQueryBuilder<RoleEntityInterface>>","inherited-from-2#Inherited from":"TypeOrmCrudService.createBuilder","defined-in-3#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:38","createmany#createMany()":"createMany(req, dto, queryOptions?): Promise<RoleEntityInterface[]>","parameters-4#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tCreateManyDto<DeepPartial<RoleEntityInterface>>\tqueryOptions?\tCrudQueryOptionsInterface","returns-4#Returns":"Promise<RoleEntityInterface[]>","inherited-from-3#Inherited from":"TypeOrmCrudService.createMany","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:15","createone#createOne()":"createOne(req, dto, queryOptions?): Promise<RoleEntityInterface>","parameters-5#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<RoleEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-5#Returns":"Promise<RoleEntityInterface>","inherited-from-4#Inherited from":"TypeOrmCrudService.createOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:16","createpageinfo#createPageInfo()":"createPageInfo(data, total, limit, offset): GetManyDefaultResponse<RoleEntityInterface>","parameters-6#Parameters":"Parameter\tType\tdata\tRoleEntityInterface[]\ttotal\tnumber\tlimit\tnumber\toffset\tnumber","returns-6#Returns":"GetManyDefaultResponse<RoleEntityInterface>","inherited-from-5#Inherited from":"TypeOrmCrudService.createPageInfo","defined-in-6#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:15","decidepagination#decidePagination()":"decidePagination(parsed, options): boolean","parameters-7#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions","returns-7#Returns":"boolean","inherited-from-6#Inherited from":"TypeOrmCrudService.decidePagination","defined-in-7#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:16","deleteone#deleteOne()":"deleteOne(req, queryOptions?): Promise<void | RoleEntityInterface>","parameters-8#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-8#Returns":"Promise<void | RoleEntityInterface>","inherited-from-7#Inherited from":"TypeOrmCrudService.deleteOne","defined-in-8#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:19","dogetmany#doGetMany()":"protected doGetMany(builder, query, options): Promise<RoleEntityInterface[] | GetManyDefaultResponse<RoleEntityInterface>>","parameters-9#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<RoleEntityInterface>\tquery\tParsedRequestParams\toptions\tCrudRequestOptions","returns-9#Returns":"Promise<RoleEntityInterface[] | GetManyDefaultResponse<RoleEntityInterface>>","inherited-from-8#Inherited from":"TypeOrmCrudService.doGetMany","defined-in-9#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:39","getallowedcolumns#getAllowedColumns()":"protected getAllowedColumns(columns, options): string[]","parameters-10#Parameters":"Parameter\tType\tcolumns\tstring[]\toptions\tQueryOptions","returns-10#Returns":"string[]","inherited-from-9#Inherited from":"TypeOrmCrudService.getAllowedColumns","defined-in-10#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:43","getentitycolumns#getEntityColumns()":"protected getEntityColumns(entityMetadata): object","parameters-11#Parameters":"Parameter\tType\tentityMetadata\tEntityMetadata","returns-11#Returns":"object\nName\tType\tcolumns\tstring[]\tprimaryColumns\tstring[]","inherited-from-10#Inherited from":"TypeOrmCrudService.getEntityColumns","defined-in-11#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:44","getfieldwithalias#getFieldWithAlias()":"protected getFieldWithAlias(field, sort?): string","parameters-12#Parameters":"Parameter\tType\tfield\tstring\tsort?\tboolean","returns-12#Returns":"string","inherited-from-11#Inherited from":"TypeOrmCrudService.getFieldWithAlias","defined-in-12#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:58","getmany#getMany()":"getMany(req, queryOptions?): Promise<RoleEntityInterface[] | CrudResultPaginatedInterface<RoleEntityInterface>>","parameters-13#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-13#Returns":"Promise<RoleEntityInterface[] | CrudResultPaginatedInterface<RoleEntityInterface>>","inherited-from-12#Inherited from":"TypeOrmCrudService.getMany","defined-in-13#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:13","getone#getOne()":"getOne(req, queryOptions?): Promise<RoleEntityInterface>","parameters-14#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-14#Returns":"Promise<RoleEntityInterface>","inherited-from-13#Inherited from":"TypeOrmCrudService.getOne","defined-in-14#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:14","getoneorfail#getOneOrFail()":"protected getOneOrFail(req, shallow?, withDeleted?): Promise<RoleEntityInterface>","parameters-15#Parameters":"Parameter\tType\treq\tCrudRequest\tshallow?\tboolean\twithDeleted?\tboolean","returns-15#Returns":"Promise<RoleEntityInterface>","inherited-from-14#Inherited from":"TypeOrmCrudService.getOneOrFail","defined-in-15#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:41","getparamfilters#getParamFilters()":"getParamFilters(parsed): ObjectLiteral","parameters-16#Parameters":"Parameter\tType\tparsed\tParsedRequestParams","returns-16#Returns":"ObjectLiteral","inherited-from-15#Inherited from":"TypeOrmCrudService.getParamFilters","defined-in-16#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:37","getprimaryparams#getPrimaryParams()":"getPrimaryParams(options): string[]","parameters-17#Parameters":"Parameter\tType\toptions\tCrudRequestOptions","returns-17#Returns":"string[]","inherited-from-16#Inherited from":"TypeOrmCrudService.getPrimaryParams","defined-in-17#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:19","getrelationmetadata#getRelationMetadata()":"protected getRelationMetadata(field, options): IAllowedRelation","parameters-18#Parameters":"Parameter\tType\tfield\tstring\toptions\tJoinOption","returns-18#Returns":"IAllowedRelation","inherited-from-17#Inherited from":"TypeOrmCrudService.getRelationMetadata","defined-in-18#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:48","getselect#getSelect()":"protected getSelect(query, options): string[]","parameters-19#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-19#Returns":"string[]","inherited-from-18#Inherited from":"TypeOrmCrudService.getSelect","defined-in-19#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:23","getskip#getSkip()":"getSkip(query, take): null | number","parameters-20#Parameters":"Parameter\tType\tquery\tParsedRequestParams\ttake\tnumber","returns-20#Returns":"null | number","inherited-from-19#Inherited from":"TypeOrmCrudService.getSkip","defined-in-20#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:18","getsort#getSort()":"protected getSort(query, options): ObjectLiteral","parameters-21#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-21#Returns":"ObjectLiteral","inherited-from-20#Inherited from":"TypeOrmCrudService.getSort","defined-in-21#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:57","gettake#getTake()":"getTake(query, options): null | number","parameters-22#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-22#Returns":"null | number","inherited-from-21#Inherited from":"TypeOrmCrudService.getTake","defined-in-22#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:17","mapoperatorstoquery#mapOperatorsToQuery()":"protected mapOperatorsToQuery(cond, param): object","parameters-23#Parameters":"Parameter\tType\tcond\tQueryFilter\tparam\tany","returns-23#Returns":"object\nName\tType\tparams\tObjectLiteral\tstr\tstring","inherited-from-22#Inherited from":"TypeOrmCrudService.mapOperatorsToQuery","defined-in-23#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:60","mapsort#mapSort()":"protected mapSort(sort): ObjectLiteral","parameters-24#Parameters":"Parameter\tType\tsort\tQuerySort[]","returns-24#Returns":"ObjectLiteral","inherited-from-23#Inherited from":"TypeOrmCrudService.mapSort","defined-in-24#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:59","oninitmapentitycolumns#onInitMapEntityColumns()":"protected onInitMapEntityColumns(): void","returns-25#Returns":"void","inherited-from-24#Inherited from":"TypeOrmCrudService.onInitMapEntityColumns","defined-in-25#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:40","prepareentitybeforesave#prepareEntityBeforeSave()":"protected prepareEntityBeforeSave(dto, parsed): RoleEntityInterface","parameters-25#Parameters":"Parameter\tType\tdto\tDeepPartial<RoleEntityInterface>\tparsed\tParsedRequestParams","returns-26#Returns":"RoleEntityInterface","inherited-from-25#Inherited from":"TypeOrmCrudService.prepareEntityBeforeSave","defined-in-26#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:42","recoverone#recoverOne()":"recoverOne(req, queryOptions?): Promise<RoleEntityInterface>","parameters-26#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-27#Returns":"Promise<RoleEntityInterface>","inherited-from-26#Inherited from":"TypeOrmCrudService.recoverOne","defined-in-27#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:20","replaceone#replaceOne()":"replaceOne(req, dto, queryOptions?): Promise<RoleEntityInterface>","parameters-27#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<RoleEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-28#Returns":"Promise<RoleEntityInterface>","inherited-from-27#Inherited from":"TypeOrmCrudService.replaceOne","defined-in-28#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:18","setandwhere#setAndWhere()":"protected setAndWhere(cond, i, builder): void","parameters-28#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<RoleEntityInterface> | WhereExpression","returns-29#Returns":"void","inherited-from-28#Inherited from":"TypeOrmCrudService.setAndWhere","defined-in-29#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:50","setjoin#setJoin()":"protected setJoin(cond, joinOptions, builder): boolean","parameters-29#Parameters":"Parameter\tType\tcond\tQueryJoin\tjoinOptions\tJoinOptions\tbuilder\tSelectQueryBuilder<RoleEntityInterface>","returns-30#Returns":"boolean","inherited-from-29#Inherited from":"TypeOrmCrudService.setJoin","defined-in-30#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:22","setorwhere#setOrWhere()":"protected setOrWhere(cond, i, builder): void","parameters-30#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<RoleEntityInterface> | WhereExpression","returns-31#Returns":"void","inherited-from-30#Inherited from":"TypeOrmCrudService.setOrWhere","defined-in-31#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:51","setsearchcondition#setSearchCondition()":"protected setSearchCondition(builder, search, condition?): void","parameters-31#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<RoleEntityInterface>\tsearch\tSCondition\tcondition?\tSConditionKey","returns-32#Returns":"void","inherited-from-31#Inherited from":"TypeOrmCrudService.setSearchCondition","defined-in-32#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:52","setsearchfieldobjectcondition#setSearchFieldObjectCondition()":"protected setSearchFieldObjectCondition(builder, condition, field, object): void","parameters-32#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<RoleEntityInterface>\tcondition\tSConditionKey\tfield\tstring\tobject\tany","returns-33#Returns":"void","inherited-from-32#Inherited from":"TypeOrmCrudService.setSearchFieldObjectCondition","defined-in-33#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:55","throwbadrequestexception#throwBadRequestException()":"throwBadRequestException(msg?): BadRequestException","parameters-33#Parameters":"Parameter\tType\tmsg?\tany","returns-34#Returns":"BadRequestException","inherited-from-33#Inherited from":"TypeOrmCrudService.throwBadRequestException","defined-in-34#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:13","thrownotfoundexception#throwNotFoundException()":"throwNotFoundException(name): NotFoundException","parameters-34#Parameters":"Parameter\tType\tname\tstring","returns-35#Returns":"NotFoundException","inherited-from-34#Inherited from":"TypeOrmCrudService.throwNotFoundException","defined-in-35#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:14","transaction#transaction()":"transaction(options?): TransactionProxy","parameters-35#Parameters":"Parameter\tType\toptions?\tSafeTransactionOptionsInterface","returns-36#Returns":"TransactionProxy","inherited-from-35#Inherited from":"TypeOrmCrudService.transaction","defined-in-36#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:21","updateone#updateOne()":"updateOne(req, dto, queryOptions?): Promise<RoleEntityInterface>","parameters-36#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<RoleEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-37#Returns":"Promise<RoleEntityInterface>","inherited-from-36#Inherited from":"TypeOrmCrudService.updateOne","defined-in-37#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:17"}},"/reference/rockets/nestjs-role/classes/RoleModule":{"title":"Class: RoleModule","data":{"":"Role Module","extends#Extends":"RoleModuleClass","constructors#Constructors":"","new-rolemodule#new RoleModule()":"new RoleModule(): RoleModule","returns#Returns":"RoleModule","inherited-from#Inherited from":"RoleModuleClass.constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tRoleOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.module.ts:34","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tRoleOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.module.ts:26","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tRoleAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.module.ts:30","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tRoleOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"RoleModuleClass.register","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.module.ts:18","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tRoleAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"RoleModuleClass.registerAsync","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/role.module.ts:22"}},"/reference/rockets/nestjs-role/classes/RoleLookupService":{"title":"Class: RoleLookupService","data":{"":"Role lookup service","extends#Extends":"LookupService<RoleEntityInterface>","implements#Implements":"RoleLookupServiceInterface","constructors#Constructors":"","new-rolelookupservice#new RoleLookupService()":"new RoleLookupService(repo): RoleLookupService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<RoleEntityInterface>\tinstance of the role repo","returns#Returns":"RoleLookupService","overrides#Overrides":"LookupService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role-lookup.service.ts:22","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"LookupService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:14","methods#Methods":"","byid#byId()":"byId(id, queryOptions?): Promise<null | RoleEntityInterface>\nGet entity for the given id.","parameters-1#Parameters":"Parameter\tType\tDescription\tid\tstring\tthe id\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-2#Returns":"Promise<null | RoleEntityInterface>","implementation-of#Implementation of":"RoleLookupServiceInterface.byId","inherited-from-1#Inherited from":"LookupService.byId","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/lookup.service.d.ts:7","find#find()":"find(options, queryOptions?): Promise<Promise<RoleEntityInterface[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<RoleEntityInterface>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<RoleEntityInterface[]>>","inherited-from-2#Inherited from":"LookupService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:10","findone#findOne()":"findOne(options, queryOptions?): Promise<null | RoleEntityInterface>\nFind One wrapper.","parameters-3#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<RoleEntityInterface>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-4#Returns":"Promise<null | RoleEntityInterface>","inherited-from-3#Inherited from":"LookupService.findOne","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:11","repository#repository()":"repository(queryOptions?): Repository<RoleEntityInterface>\nReturn the correct repository instance.","parameters-4#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-5#Returns":"Repository<RoleEntityInterface>","inherited-from-4#Inherited from":"LookupService.repository","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:12","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-5#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-6#Returns":"TransactionProxy","inherited-from-5#Inherited from":"LookupService.transaction","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:13"}},"/reference/rockets/nestjs-role/classes/RoleMutateService":{"title":"Class: RoleMutateService","data":{"":"Role mutate service","extends#Extends":"MutateService<RoleEntityInterface, RoleCreatableInterface, RoleUpdatableInterface>","implements#Implements":"RoleMutateServiceInterface","constructors#Constructors":"","new-rolemutateservice#new RoleMutateService()":"new RoleMutateService(repo): RoleMutateService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<RoleEntityInterface>\tinstance of the role repo","returns#Returns":"RoleMutateService","overrides#Overrides":"MutateService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role-mutate.service.ts:35","properties#Properties":"Property\tModifier\tType\tDefault value\tOverrides\tcreateDto\tprotected\ttypeof RoleCreateDto\tRoleCreateDto\tMutateService.createDto\tupdateDto\tprotected\ttypeof RoleUpdateDto\tRoleUpdateDto\tMutateService.updateDto","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"MutateService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:14","methods#Methods":"","create#create()":"create(data, queryOptions?): Promise<RoleEntityInterface>\nCreate one","parameters-1#Parameters":"Parameter\tType\tDescription\tdata\tRoleCreatableInterface\tthe reference to create\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<RoleEntityInterface>the created reference","implementation-of#Implementation of":"RoleMutateServiceInterface.create","inherited-from-1#Inherited from":"MutateService.create","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:9","find#find()":"find(options, queryOptions?): Promise<Promise<RoleEntityInterface[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<RoleEntityInterface>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<RoleEntityInterface[]>>","inherited-from-2#Inherited from":"MutateService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:10","findbyid#findById()":"protected findById(id, queryOptions?): Promise<RoleEntityInterface>\nInternal","parameters-3#Parameters":"Parameter\tType\tid\tstring\tqueryOptions?\tQueryOptionsInterface","returns-4#Returns":"Promise<RoleEntityInterface>","inherited-from-3#Inherited from":"MutateService.findById","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:17","findone#findOne()":"findOne(options, queryOptions?): Promise<null | RoleEntityInterface>\nFind One wrapper.","parameters-4#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<RoleEntityInterface>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-5#Returns":"Promise<null | RoleEntityInterface>","inherited-from-4#Inherited from":"MutateService.findOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:11","remove#remove()":"remove(data, queryOptions?): Promise<RoleEntityInterface>\nRemove one","parameters-5#Parameters":"Parameter\tType\tDescription\tdata\tDeepPartial<RoleEntityInterface> & ReferenceIdInterface<string>\tthe reference data to remove\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-6#Returns":"Promise<RoleEntityInterface>the removed reference","implementation-of-1#Implementation of":"RoleMutateServiceInterface.remove","inherited-from-5#Inherited from":"MutateService.remove","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:12","replace#replace()":"replace(data, queryOptions?): Promise<RoleEntityInterface>\nReplace one","parameters-6#Parameters":"Parameter\tType\tDescription\tdata\tRoleCreatableInterface & ReferenceIdInterface<string>\tthe reference data to replace\tqueryOptions?\tQueryOptionsInterface\t-","returns-7#Returns":"Promise<RoleEntityInterface>the replaced reference","implementation-of-2#Implementation of":"RoleMutateServiceInterface.replace","inherited-from-6#Inherited from":"MutateService.replace","defined-in-7#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:11","repository#repository()":"repository(queryOptions?): Repository<RoleEntityInterface>\nReturn the correct repository instance.","parameters-7#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-8#Returns":"Repository<RoleEntityInterface>","inherited-from-7#Inherited from":"MutateService.repository","defined-in-8#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:12","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-8#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-9#Returns":"TransactionProxy","inherited-from-8#Inherited from":"MutateService.transaction","defined-in-9#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:13","transform#transform()":"protected transform(data, _queryOptions?): Promise<DeepPartial<RoleEntityInterface>>\nInternal","parameters-9#Parameters":"Parameter\tType\tdata\tDeepPartial<RoleEntityInterface>\t_queryOptions?\tQueryOptionsInterface","returns-10#Returns":"Promise<DeepPartial<RoleEntityInterface>>","inherited-from-9#Inherited from":"MutateService.transform","defined-in-10#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:16","update#update()":"update(data, queryOptions?): Promise<RoleEntityInterface>\nUpdate one","parameters-10#Parameters":"Parameter\tType\tDescription\tdata\tRoleUpdatableInterface & ReferenceIdInterface<string>\tthe reference data to update\tqueryOptions?\tQueryOptionsInterface\t-","returns-11#Returns":"Promise<RoleEntityInterface>the updated reference","implementation-of-3#Implementation of":"RoleMutateServiceInterface.update","inherited-from-10#Inherited from":"MutateService.update","defined-in-11#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:10","validate#validate()":"protected validate<T>(type, data): Promise<T>\nInternal","type-parameters#Type Parameters":"Type Parameter\tT extends DeepPartial<RoleEntityInterface>","parameters-11#Parameters":"Parameter\tType\ttype\tType<T>\tdata\tT","returns-12#Returns":"Promise<T>","inherited-from-11#Inherited from":"MutateService.validate","defined-in-12#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:15"}},"/reference/rockets/nestjs-role/classes/RolePaginatedDto":{"title":"Class: RolePaginatedDto","data":{"":"Role paginated DTO","extends#Extends":"CrudResponsePaginatedDto<RoleInterface>","constructors#Constructors":"","new-rolepaginateddto#new RolePaginatedDto()":"new RolePaginatedDto(): RolePaginatedDto","returns#Returns":"RolePaginatedDto","inherited-from#Inherited from":"CrudResponsePaginatedDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tInherited from\tcount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.count\tdata\tRoleInterface[]\t[]\tCrudResponsePaginatedDto.data\t-\tpage\tnumber\tundefined\t-\tCrudResponsePaginatedDto.page\tpageCount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.pageCount\ttotal\tnumber\tundefined\t-\tCrudResponsePaginatedDto.total"}},"/reference/rockets/nestjs-role/classes/RolePostgresEntity":{"title":"Class: abstract RolePostgresEntity","data":{"":"Role Postgres Entity","extends#Extends":"CommonPostgresEntity","implements#Implements":"RoleEntityInterface","constructors#Constructors":"","new-rolepostgresentity#new RolePostgresEntity()":"new RolePostgresEntity(): RolePostgresEntity","returns#Returns":"RolePostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignees\tReferenceAssigneeInterface<ReferenceIdInterface<string>>[]\tAssignees You will need to decorate this in your concrete entity class.\t-\tdateCreated\tDate\tDate created.\tRoleEntityInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tRoleEntityInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tRoleEntityInterface.dateUpdated CommonPostgresEntity.dateUpdated\tdescription\tstring\tDescription\t-\tid\tstring\t-\tRoleEntityInterface.id CommonPostgresEntity.id\tname\tstring\tName\t-\tversion\tnumber\tVersion\tRoleEntityInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-role/classes/RoleService":{"title":"Class: RoleService","data":{"implements#Implements":"RoleServiceInterface","constructors#Constructors":"","new-roleservice#new RoleService()":"new RoleService(settings, allRoleRepos): RoleService","parameters#Parameters":"Parameter\tType\tsettings\tRoleSettingsInterface\tallRoleRepos\tRecord<string, Repository<RoleAssignmentEntityInterface>>","returns#Returns":"RoleService","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role.service.ts:22","properties#Properties":"Property\tModifier\tType\tsettings\treadonly\tRoleSettingsInterface","methods#Methods":"","getassignedroles#getAssignedRoles()":"getAssignedRoles(assignment, assignee, queryOptions?): Promise<RoleEntityInterface[]>\nGet all roles for assignee.","parameters-1#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the check (same as entity key)\tassignee\tReferenceIdInterface<string>\tThe assignee to check\tqueryOptions?\tQueryOptionsInterface\t-","returns-1#Returns":"Promise<RoleEntityInterface[]>","implementation-of#Implementation of":"RoleServiceInterface.getAssignedRoles","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role.service.ts:38","getassignmentrepo#getAssignmentRepo()":"protected getAssignmentRepo(assignment): Repository<RoleAssignmentEntityInterface>\nInternalGet the assignment repo for the given assignment.","parameters-2#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe role assignment","returns-2#Returns":"Repository<RoleAssignmentEntityInterface>","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role.service.ts:148","isassignedrole#isAssignedRole()":"isAssignedRole<T>(assignment, role, assignee, queryOptions?): Promise<boolean>\nCheck if the assignee is a member of one role.","type-parameters#Type Parameters":"Type Parameter\tT extends ReferenceIdInterface<string, T>","parameters-3#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the check\trole\tReferenceIdInterface<string>\tThe role to check\tassignee\tT\tThe assignee to check\tqueryOptions?\tQueryOptionsInterface\t-","returns-3#Returns":"Promise<boolean>","implementation-of-1#Implementation of":"RoleServiceInterface.isAssignedRole","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role.service.ts:75","isassignedroles#isAssignedRoles()":"isAssignedRoles<T>(assignment, roles, assignee, queryOptions?): Promise<boolean>\nCheck if the assignee is a member of every role.","type-parameters-1#Type Parameters":"Type Parameter\tT extends ReferenceIdInterface<string, T>","parameters-4#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the check\troles\tReferenceIdInterface<string>[]\tThe roles to check\tassignee\tT\tThe assignee to check\tqueryOptions?\tQueryOptionsInterface\t-","returns-4#Returns":"Promise<boolean>","implementation-of-2#Implementation of":"RoleServiceInterface.isAssignedRoles","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-role/src/services/role.service.ts:113"}},"/reference/rockets/nestjs-role/classes/RoleSqliteEntity":{"title":"Class: abstract RoleSqliteEntity","data":{"":"Role Sqlite Entity","extends#Extends":"CommonSqliteEntity","implements#Implements":"RoleEntityInterface","constructors#Constructors":"","new-rolesqliteentity#new RoleSqliteEntity()":"new RoleSqliteEntity(): RoleSqliteEntity","returns#Returns":"RoleSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tassignees\tReferenceAssigneeInterface<ReferenceIdInterface<string>>[]\t-\t-\tdateCreated\tDate\tDate created.\tRoleEntityInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tRoleEntityInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tRoleEntityInterface.dateUpdated CommonSqliteEntity.dateUpdated\tdescription\tstring\tName\t-\tid\tstring\t-\tRoleEntityInterface.id CommonSqliteEntity.id\tname\tstring\tName\t-\tversion\tnumber\tVersion\tRoleEntityInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-role/enumerations/RoleResource":{"title":"Enumeration: RoleResource","data":{"enumeration-members#Enumeration Members":"Enumeration Member\tValue\tMany\t\"role-list\"\tOne\t\"role\""}},"/reference/rockets/nestjs-role/classes/RoleUpdateDto":{"title":"Class: RoleUpdateDto","data":{"":"Role Update DTO","extends#Extends":"Pick<RoleDto, \"name\" | \"description\">","implements#Implements":"RoleUpdatableInterface","constructors#Constructors":"","new-roleupdatedto#new RoleUpdateDto()":"new RoleUpdateDto(...args): RoleUpdateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"RoleUpdateDto","inherited-from#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tdescription\tpublic\tstring\t''\tName\tRoleUpdatableInterface.description PickType(RoleDto, ['name', 'description'] as const).description\tname\tpublic\tstring\t''\tName\tRoleUpdatableInterface.name PickType(RoleDto, ['name', 'description'] as const).name\targuments\tstatic\tany\tundefined\t-\tPickType(RoleDto, ['name', 'description'] as const).arguments\tcaller\tstatic\tFunction\tundefined\t-\tPickType(RoleDto, ['name', 'description'] as const).caller\tlength\treadonly\tnumber\tundefined\t-\tPickType(RoleDto, ['name', 'description'] as const).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tPickType(RoleDto, ['name', 'description'] as const).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"PickType(RoleDto, ['name', 'description'] as const).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-role/enumerations/RoleAssignmentResource":{"title":"Enumeration: RoleAssignmentResource","data":{"enumeration-members#Enumeration Members":"Enumeration Member\tValue\tMany\t\"role-assignment-list\"\tOne\t\"role-assignment\""}},"/reference/rockets/nestjs-role/globals":{"title":"@concepta/nestjs-role","data":{"enumerations#Enumerations":"RoleAssignmentResource\nRoleResource","classes#Classes":"RoleAssignmentCreateDto\nRoleAssignmentCreateManyDto\nRoleAssignmentDto\nRoleAssignmentPaginatedDto\nRoleAssignmentPostgresEntity\nRoleAssignmentSqliteEntity\nRoleController\nRoleCreateDto\nRoleCreateManyDto\nRoleCrudService\nRoleDto\nRoleLookupService\nRoleModule\nRoleMutateService\nRolePaginatedDto\nRolePostgresEntity\nRoleService\nRoleSqliteEntity\nRoleUpdateDto","interfaces#Interfaces":"RoleAssignmentEntityInterface\nRoleEntityInterface\nRoleLookupServiceInterface\nRoleMutateServiceInterface"}},"/reference/rockets/nestjs-role/interfaces/RoleAssignmentEntityInterface":{"title":"Interface: RoleAssignmentEntityInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceAssigneeInterface.AuditInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tReferenceAssigneeInterface.assignee\tdateCreated\tDate\t-\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tAuditInterface.dateDeleted\tdateUpdated\tDate\t-\tAuditInterface.dateUpdated\tid\tstring\t-\tReferenceIdInterface.id\trole\tRoleInterface\tRole\t-\tversion\tnumber\t-\tAuditInterface.version"}},"/reference/rockets/nestjs-role/interfaces/RoleEntityInterface":{"title":"Interface: RoleEntityInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"RoleInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tassignees\tReferenceAssigneeInterface<ReferenceIdInterface<string>>[]\t-\tRoleInterface.assignees\tdateCreated\tDate\t-\tRoleInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tRoleInterface.dateDeleted\tdateUpdated\tDate\t-\tRoleInterface.dateUpdated\tdescription\tstring\tName\tRoleInterface.description\tid\tstring\t-\tRoleInterface.id\tname\tstring\tName\tRoleInterface.name\tversion\tnumber\t-\tRoleInterface.version"}},"/reference/rockets/nestjs-role/interfaces/RoleLookupServiceInterface":{"title":"Interface: RoleLookupServiceInterface","data":{"extends#Extends":"LookupIdInterface<ReferenceId, ReferenceIdInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tbyId\t(id: string, options?: QueryOptionsInterface) => Promise<null | ReferenceIdInterface<string>>\tLookupIdInterface.byId"}},"/reference/rockets/nestjs-role/interfaces/RoleMutateServiceInterface":{"title":"Interface: RoleMutateServiceInterface","data":{"extends#Extends":"CreateOneInterface<RoleCreatableInterface, RoleEntityInterface>.UpdateOneInterface<RoleUpdatableInterface & ReferenceIdInterface, RoleEntityInterface, QueryOptionsInterface>.ReplaceOneInterface<RoleCreatableInterface & ReferenceIdInterface, RoleEntityInterface, QueryOptionsInterface>.RemoveOneInterface<RoleEntityInterface, RoleEntityInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tcreate\t(object: RoleCreatableInterface, options?: ReferenceQueryOptionsInterface) => Promise<RoleEntityInterface>\tCreateOneInterface.create\tremove\t(object: RoleEntityInterface, options?: QueryOptionsInterface) => Promise<RoleEntityInterface>\tRemoveOneInterface.remove\treplace\t(object: RoleCreatableInterface & ReferenceIdInterface<string>, options?: QueryOptionsInterface) => Promise<RoleEntityInterface>\tReplaceOneInterface.replace\tupdate\t(object: RoleUpdatableInterface & ReferenceIdInterface<string>, options?: QueryOptionsInterface) => Promise<RoleEntityInterface>\tUpdateOneInterface.update"}},"/reference/rockets/nestjs-swagger-ui/classes/SwaggerUiModule":{"title":"Class: SwaggerUiModule","data":{"extends#Extends":"SwaggerUiModuleClass","constructors#Constructors":"","new-swaggeruimodule#new SwaggerUiModule()":"new SwaggerUiModule(): SwaggerUiModule","returns#Returns":"SwaggerUiModule","inherited-from#Inherited from":"SwaggerUiModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tSwaggerUiOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-swagger-ui/src/swagger-ui.module.ts:18","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tSwaggerUiAsyncOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-swagger-ui/src/swagger-ui.module.ts:22","register#register()":"static register(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tSwaggerUiOptions","returns-3#Returns":"DynamicModule","overrides#Overrides":"SwaggerUiModuleClass.register","defined-in-3#Defined in":"packages/nestjs-swagger-ui/src/swagger-ui.module.ts:10","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tSwaggerUiAsyncOptions","returns-4#Returns":"DynamicModule","overrides-1#Overrides":"SwaggerUiModuleClass.registerAsync","defined-in-4#Defined in":"packages/nestjs-swagger-ui/src/swagger-ui.module.ts:14"}},"/reference/rockets/nestjs-swagger-ui/classes/SwaggerUiService":{"title":"Class: SwaggerUiService","data":{"constructors#Constructors":"","new-swaggeruiservice#new SwaggerUiService()":"new SwaggerUiService(settings, documentBuilder): SwaggerUiService\nConstructor.","parameters#Parameters":"Parameter\tType\tDescription\tsettings\tSwaggerUiSettingsInterface\tswagger ui settings\tdocumentBuilder\tDocumentBuilder\t-","returns#Returns":"SwaggerUiService","defined-in#Defined in":"packages/nestjs-swagger-ui/src/swagger-ui.service.ts:16","properties#Properties":"Property\tModifier\tType\tDescription\tdocumentBuilder\treadonly\tDocumentBuilder\t-\tsettings\treadonly\tSwaggerUiSettingsInterface\tswagger ui settings","methods#Methods":"","builder#builder()":"builder(): DocumentBuilder\nReturns document builder instance.","returns-1#Returns":"DocumentBuilder","defined-in-1#Defined in":"packages/nestjs-swagger-ui/src/swagger-ui.service.ts:26","setup#setup()":"setup(app): void\nSetup.","parameters-1#Parameters":"Parameter\tType\tDescription\tapp\tINestApplication\tNest application instance","returns-2#Returns":"void","defined-in-2#Defined in":"packages/nestjs-swagger-ui/src/swagger-ui.service.ts:35"}},"/reference/rockets/nestjs-swagger-ui/globals":{"title":"@concepta/nestjs-swagger-ui","data":{"classes#Classes":"SwaggerUiModule\nSwaggerUiService"}},"/reference/rockets/nestjs-swagger-ui/README":{"title":"Rockets NestJS Swagger UI","data":{"":"Expose your OpenApi spec on your API using the powerful Swagger UI interface.","project#Project":"","overview#Overview":"The Swagger UI module provides a simple implementation of the\n@nestjs/swagger module.Using this module, you can register the Swagger UI just like a normal module\nto reduce the amount of boilerplate in your main.ts.","installation#Installation":"yarn add @concepta/nestjs-swagger-ui","usage#Usage":"app.module.ts\n@Module({\n  imports: [\n    SwaggerUiModule.register({\n      settings: {\n        path: 'api',\n        basePath: '/v1',\n      },\n    }),\n  ],\n})\nexport class AppModule {}\nmain.ts\nasync function bootstrap() {\n  // create app\n  const app = await NestFactory.create(AppModule);\n  // get the swagger ui service\n  const swaggerUiService = app.get(SwaggerUiService);\n  // set it up\n  swaggerUiService.setup(app);\n  // start listening\n  await app.listen(3000);\n}\nbootstrap();","configuration#Configuration":"All of the options in the official docs for\nNestJS OpenApi are supported.To see how they are mapped to the registration options settings property,\nsee the SwaggerUiSettingsInterface"}},"/reference/rockets/nestjs-typeorm-ext/classes/TypeOrmExtModule":{"title":"Class: TypeOrmExtModule","data":{"extends#Extends":"TypeOrmExtModuleClass","constructors#Constructors":"","new-typeormextmodule#new TypeOrmExtModule()":"new TypeOrmExtModule(): TypeOrmExtModule","returns#Returns":"TypeOrmExtModule","inherited-from#Inherited from":"TypeOrmExtModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(entityOptions): DynamicModule","parameters#Parameters":"Parameter\tType\tentityOptions\tRecord<string, TypeOrmExtEntityOptionInterface<ReferenceIdInterface<string>>>","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-typeorm-ext/src/typeorm-ext.module.ts:63","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tTypeOrmModuleOptions & Partial<object>","returns-2#Returns":"DynamicModule","overrides#Overrides":"TypeOrmExtModuleClass.forRoot","defined-in-2#Defined in":"packages/nestjs-typeorm-ext/src/typeorm-ext.module.ts:26","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tConfigurableModuleAsyncOptions<TypeOrmModuleOptions, \"create\"> & Partial<object>","returns-3#Returns":"DynamicModule","overrides-1#Overrides":"TypeOrmExtModuleClass.forRootAsync","defined-in-3#Defined in":"packages/nestjs-typeorm-ext/src/typeorm-ext.module.ts:46"}},"/reference/rockets/nestjs-typeorm-ext/functions/InjectEntityRepository":{"title":"Function: InjectEntityRepository()","data":{"":"InjectEntityRepository(key): (target, key, index?) => void","parameters#Parameters":"Parameter\tType\tkey\tstring","returns#Returns":"Function","parameters-1#Parameters":"Parameter\tType\ttarget\tobject\tkey\tundefined | string | symbol\tindex?\tnumber","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-typeorm-ext/src/decorators/inject-entity-repository.decorator.ts:4"}},"/reference/rockets/nestjs-typeorm-ext/README":{"title":"Rockets NestJS TypeOrm Extended","data":{"":"Extremely powerful extension of the NestJS TypeOrm module that allows your\ndynamic modules to accept drop-in replacements of custom entities\nand repositories at registration time.","project#Project":"","overview#Overview":"The TypeOrm Ext module provides a powerful wrapper around the\n@nestjs/typeorm module.While still using the identical configuration options of the TypeOrm module,\nyou can increase the extensibility of your custom module by designing it\nto accept custom entity and repository overrides.This pattern allows you to publish modules that are loosely coupled to their\nown entity and repository definitions. This enables implementations of your\nmodule to define their own concrete data storage.","installation#Installation":"yarn add @concepta/nestjs-typeorm-ext","module-design#Module Design":"Designing your module to use this extension is fairly straight forward, but a bit too verbose\nfor this readme.To see how this was implemented in our\nUserModule\nplease refer to that module's\nuser.module.ts","usage#Usage":"app.module.ts\n// ...\nimport { TypeOrmExtModule } from '@concepta/nestjs-typeorm-ext';\nimport { UserModule } from '@concepta/nestjs-user';\nimport { CustomUserRepository } from 'path/to/custom-user.repository';\nimport { CustomUser } from 'path/to/custom-user.entity';\n@Module({\n  imports: [\n    TypeOrmExtModule.forRoot({\n      type: 'postgres',\n      url: 'postgres://user:pass@localhost:5432/postgres',\n      entities: [CustomUser],\n    }),\n    UserModule.forRoot({\n      entities: {\n        user: { entity: CustomUser, repository: CustomUserRepository },\n      },\n    }),\n  ],\n})\nexport class AppModule {}","configuration#Configuration":"","data-source-options#Data Source Options":"The module options are identical the the NestJS TypeOrm module."}},"/reference/rockets/nestjs-typeorm-ext/functions/InjectDynamicRepository":{"title":"Function: InjectDynamicRepository()","data":{"":"InjectDynamicRepository(key): (target, key, index?) => void","parameters#Parameters":"Parameter\tType\tkey\tstring","returns#Returns":"Function","parameters-1#Parameters":"Parameter\tType\ttarget\tobject\tkey\tundefined | string | symbol\tindex?\tnumber","returns-1#Returns":"void","defined-in#Defined in":"packages/nestjs-typeorm-ext/src/decorators/inject-dymamic-repository.decorator.ts:4"}},"/reference/rockets/nestjs-typeorm-ext/functions/getDynamicRepositoryToken":{"title":"Function: getDynamicRepositoryToken()","data":{"":"getDynamicRepositoryToken(key): string","parameters#Parameters":"Parameter\tType\tkey\tstring","returns#Returns":"string","defined-in#Defined in":"packages/nestjs-typeorm-ext/src/utils/get-dynamic-repository-token.ts:1"}},"/reference/rockets/nestjs-typeorm-ext/globals":{"title":"@concepta/nestjs-typeorm-ext","data":{"classes#Classes":"TypeOrmExtModule","interfaces#Interfaces":"TypeOrmExtEntityOptionInterface","type-aliases#Type Aliases":"TypeOrmExtOptions","functions#Functions":"InjectDynamicRepository\nInjectEntityRepository\ngetDynamicRepositoryToken\ngetEntityRepositoryToken"}},"/reference/rockets/nestjs-typeorm-ext/interfaces/TypeOrmExtEntityOptionInterface":{"title":"Interface: TypeOrmExtEntityOptionInterface<T>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tT extends ReferenceIdInterface\tReferenceIdInterface","properties#Properties":"Property\tType\tdataSource?\tTypeOrmExtDataSourceToken\tentity\tEntityClassOrSchema\trepositoryFactory?\t(dataSource: DataSource) => Repository<T>"}},"/reference/rockets/nestjs-typeorm-ext/functions/getEntityRepositoryToken":{"title":"Function: getEntityRepositoryToken()","data":{"":"getEntityRepositoryToken(key): string","parameters#Parameters":"Parameter\tType\tkey\tstring","returns#Returns":"string","defined-in#Defined in":"packages/nestjs-typeorm-ext/src/utils/get-entity-repository-token.ts:1"}},"/reference/rockets/nestjs-user/README":{"title":"Rockets NestJS User","data":{"":"A module for managing a basic User entity, including controller with full CRUD, DTOs, sample data factory and seeder.","project#Project":"","installation#Installation":"yarn add @concepta/nestjs-user","usage#Usage":"// ...\nimport { TypeOrmExtModule } from '@concepta/nestjs-typeorm-ext';\nimport { UserModule } from '@concepta/nestjs-user';\nimport { CrudModule } from '@concepta/nestjs-crud';\n@Module({\n  imports: [\n    TypeOrmExtModule.forRoot({\n      type: 'postgres',\n      url: 'postgres://user:pass@localhost:5432/postgres',\n    }),\n    CrudModule.forRoot({}),\n    UserModule.forRoot({}),\n  ],\n})\nexport class AppModule {}","configuration#Configuration":"Seeding\nENV","seeding#Seeding":"Configurations specific to (optional) database seeding.","env#ENV":"Configurations available via environment.\nVariable\tType\tDefault\t\tUSER_MODULE_SEEDER_AMOUNT\t<number>\t50\tnumber of additional users to create\tUSER_MODULE_SEEDER_SUPERADMIN_USERNAME\t<string>\t'superadmin'\tsuper admin username"}},"/reference/rockets/nestjs-typeorm-ext/type-aliases/TypeOrmExtOptions":{"title":"Type Alias: TypeOrmExtOptions","data":{"":"TypeOrmExtOptions: TypeOrmModuleOptions","defined-in#Defined in":"packages/nestjs-typeorm-ext/src/typeorm-ext.types.ts:4"}},"/reference/rockets/nestjs-user/classes/UserCreateDto":{"title":"Class: UserCreateDto","data":{"":"User Create DTO","extends#Extends":"Pick<UserDto, \"email\" | \"username\"> & Partial<Pick<UserDto, \"active\">> & Partial<UserPasswordDto>","implements#Implements":"UserCreatableInterface","constructors#Constructors":"","new-usercreatedto#new UserCreateDto()":"new UserCreateDto(...args): UserCreateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"UserCreateDto","inherited-from#Inherited from":"IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tactive?\tpublic\tboolean\tundefined\tActive\tUserCreatableInterface.active IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).active\temail\tpublic\tstring\t''\tEmail\tUserCreatableInterface.email IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).email\tpassword?\tpublic\tstring\tundefined\tPassword\tUserCreatableInterface.password IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).password\tusername\tpublic\tstring\t''\tUsername\tUserCreatableInterface.username IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).username\targuments\tstatic\tany\tundefined\t-\tIntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).arguments\tcaller\tstatic\tFunction\tundefined\t-\tIntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).caller\tlength\treadonly\tnumber\tundefined\t-\tIntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tIntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"IntersectionType( PickType(UserDto, ['username', 'email'] as const), PartialType(PickType(UserDto, ['active'] as const)), PartialType(UserPasswordDto), ).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-user/classes/UserController":{"title":"Class: UserController","data":{"":"User controller.","implements#Implements":"CrudControllerInterface<UserEntityInterface, UserCreatableInterface, UserUpdatableInterface>","constructors#Constructors":"","new-usercontroller#new UserController()":"new UserController(userCrudService, userPasswordService): UserController\nConstructor.","parameters#Parameters":"Parameter\tType\tDescription\tuserCrudService\tUserCrudService\tinstance of the user crud service\tuserPasswordService\tUserPasswordService\tinstance of user password service","returns#Returns":"UserController","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:74","methods#Methods":"","createmany#createMany()":"createMany(crudRequest, userCreateManyDto): Promise<UserEntityInterface[]>\nCreate many","parameters-1#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\tuserCreateManyDto\tUserCreateManyDto\tuser create many dto","returns-1#Returns":"Promise<UserEntityInterface[]>","implementation-of#Implementation of":"CrudControllerInterface.createMany","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:109","createone#createOne()":"createOne(crudRequest, userCreateDto): Promise<UserEntityInterface>\nCreate one","parameters-2#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\tuserCreateDto\tUserCreateDto\tuser create dto","returns-2#Returns":"Promise<UserEntityInterface>","implementation-of-1#Implementation of":"CrudControllerInterface.createOne","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:134","deleteone#deleteOne()":"deleteOne(crudRequest): Promise<void | UserEntityInterface>\nDelete one","parameters-3#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-3#Returns":"Promise<void | UserEntityInterface>","implementation-of-2#Implementation of":"CrudControllerInterface.deleteOne","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:185","getmany#getMany()":"getMany(crudRequest): Promise<UserEntityInterface[] | CrudResultPaginatedInterface<UserEntityInterface>>\nGet many","parameters-4#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-4#Returns":"Promise<UserEntityInterface[] | CrudResultPaginatedInterface<UserEntityInterface>>","implementation-of-3#Implementation of":"CrudControllerInterface.getMany","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:86","getone#getOne()":"getOne(crudRequest): Promise<UserEntityInterface>\nGet one","parameters-5#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-5#Returns":"Promise<UserEntityInterface>","implementation-of-4#Implementation of":"CrudControllerInterface.getOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:97","recoverone#recoverOne()":"recoverOne(crudRequest): Promise<UserEntityInterface>\nRecover one","parameters-6#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object","returns-6#Returns":"Promise<UserEntityInterface>","implementation-of-5#Implementation of":"CrudControllerInterface.recoverOne","defined-in-6#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:196","updateone#updateOne()":"updateOne(crudRequest, userUpdateDto, userId?, authorizededUser?): Promise<UserEntityInterface>\nUpdate one","parameters-7#Parameters":"Parameter\tType\tDescription\tcrudRequest\tCrudRequestInterface\tthe CRUD request object\tuserUpdateDto\tUserUpdateDto\tuser update dto\tuserId?\tstring\t-\tauthorizededUser?\tAuthenticatedUserInterface\t-","returns-7#Returns":"Promise<UserEntityInterface>","implementation-of-6#Implementation of":"CrudControllerInterface.updateOne","defined-in-7#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.controller.ts:153"}},"/reference/rockets/nestjs-user/classes/UserAccessQueryService":{"title":"Class: UserAccessQueryService","data":{"implements#Implements":"CanAccess","constructors#Constructors":"","new-useraccessqueryservice#new UserAccessQueryService()":"new UserAccessQueryService(): UserAccessQueryService","returns#Returns":"UserAccessQueryService","methods#Methods":"","canaccess#canAccess()":"canAccess(context): Promise<boolean>","parameters#Parameters":"Parameter\tType\tcontext\tAccessControlContext","returns-1#Returns":"Promise<boolean>","implementation-of#Implementation of":"CanAccess.canAccess","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-access-query.service.ts:14","canupdatepassword#canUpdatePassword()":"protected canUpdatePassword(context): Promise<boolean>","parameters-1#Parameters":"Parameter\tType\tcontext\tAccessControlContext","returns-2#Returns":"Promise<boolean>","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-access-query.service.ts:18"}},"/reference/rockets/nestjs-user/classes/UserCreateManyDto":{"title":"Class: UserCreateManyDto","data":{"":"User DTO","extends#Extends":"CrudCreateManyDto<UserCreatableInterface>","constructors#Constructors":"","new-usercreatemanydto#new UserCreateManyDto()":"new UserCreateManyDto(): UserCreateManyDto","returns#Returns":"UserCreateManyDto","inherited-from#Inherited from":"CrudCreateManyDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tbulk\tUserCreateDto[]\t[]\tCrudCreateManyDto.bulk"}},"/reference/rockets/nestjs-user/classes/UserDto":{"title":"Class: UserDto","data":{"":"User DTO","extends#Extends":"CommonEntityDto","implements#Implements":"UserInterface","constructors#Constructors":"","new-userdto#new UserDto()":"new UserDto(): UserDto","returns#Returns":"UserDto","inherited-from#Inherited from":"CommonEntityDto.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\tundefined\tActive\t-\tdateCreated\tDate\tundefined\tDate created\tUserInterface.dateCreated CommonEntityDto.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted\tUserInterface.dateDeleted CommonEntityDto.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated\tUserInterface.dateUpdated CommonEntityDto.dateUpdated\temail\tstring\t''\tEmail\t-\tid\tstring\tundefined\t-\tUserInterface.id CommonEntityDto.id\tusername\tstring\t''\tUsername\t-\tversion\tnumber\tundefined\tVersion\tUserInterface.version CommonEntityDto.version"}},"/reference/rockets/nestjs-user/classes/UserCrudService":{"title":"Class: UserCrudService","data":{"":"User CRUD service","extends#Extends":"TypeOrmCrudService<UserEntityInterface>","constructors#Constructors":"","new-usercrudservice#new UserCrudService()":"new UserCrudService(userRepo): UserCrudService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tuserRepo\tRepository<UserEntityInterface>\tinstance of the user repository.","returns#Returns":"UserCrudService","overrides#Overrides":"TypeOrmCrudService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-crud.service.ts:18","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\talias\treadonly\tstring\t-\tTypeOrmCrudService.alias\tcount\treadonly\t(options?: FindManyOptions<UserEntityInterface>) => Promise<number>\t-\tTypeOrmCrudService.count\tcrudQueryHelper\treadonly\tCrudQueryHelper\t-\tTypeOrmCrudService.crudQueryHelper\tdbName\tprotected\t\"mysql\" | \"mariadb\" | \"postgres\" | \"cockroachdb\" | \"sqlite\" | \"mssql\" | \"sap\" | \"oracle\" | \"cordova\" | \"nativescript\" | \"react-native\" | \"sqljs\" | \"mongodb\" | \"aurora-mysql\" | \"aurora-postgres\" | \"expo\" | \"better-sqlite3\" | \"capacitor\" | \"spanner\"\t-\tTypeOrmCrudService.dbName\tentityColumns\tprotected\tstring[]\t-\tTypeOrmCrudService.entityColumns\tentityColumnsHash\tprotected\tObjectLiteral\t-\tTypeOrmCrudService.entityColumnsHash\tentityHasDeleteColumn\tprotected\tboolean\t-\tTypeOrmCrudService.entityHasDeleteColumn\tentityPrimaryColumns\tprotected\tstring[]\t-\tTypeOrmCrudService.entityPrimaryColumns\tentityRelationsHash\tprotected\tMap<string, IAllowedRelation>\t-\tTypeOrmCrudService.entityRelationsHash\tentityType\treadonly\tClassType<UserEntityInterface>\t-\tTypeOrmCrudService.entityType\tfind\treadonly\t(options?: FindManyOptions<UserEntityInterface>) => Promise<UserEntityInterface[]>\t-\tTypeOrmCrudService.find\tfindOne\treadonly\t(options: FindOneOptions<UserEntityInterface>) => Promise<null | UserEntityInterface>\t-\tTypeOrmCrudService.findOne\trepo\tprotected\tRepository<UserEntityInterface>\t-\tTypeOrmCrudService.repo\tsqlInjectionRegEx\tprotected\tRegExp[]\t-\tTypeOrmCrudService.sqlInjectionRegEx\tuserRepo\treadonly\tRepository<UserEntityInterface>\tinstance of the user repository.\t-","methods#Methods":"","builderaddbrackets#builderAddBrackets()":"protected builderAddBrackets(builder, condition, brackets): void","parameters-1#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<UserEntityInterface>\tcondition\tSConditionKey\tbrackets\tBrackets","returns-1#Returns":"void","inherited-from#Inherited from":"TypeOrmCrudService.builderAddBrackets","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:53","buildersetwhere#builderSetWhere()":"protected builderSetWhere(builder, condition, field, value, operator?): void","parameters-2#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<UserEntityInterface>\tcondition\tSConditionKey\tfield\tstring\tvalue\tany\toperator?\tComparisonOperator","returns-2#Returns":"void","inherited-from-1#Inherited from":"TypeOrmCrudService.builderSetWhere","defined-in-2#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:54","createbuilder#createBuilder()":"createBuilder(parsed, options, many?, withDeleted?): Promise<SelectQueryBuilder<UserEntityInterface>>","parameters-3#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions\tmany?\tboolean\twithDeleted?\tboolean","returns-3#Returns":"Promise<SelectQueryBuilder<UserEntityInterface>>","inherited-from-2#Inherited from":"TypeOrmCrudService.createBuilder","defined-in-3#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:38","createmany#createMany()":"createMany(req, dto, queryOptions?): Promise<UserEntityInterface[]>","parameters-4#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tCreateManyDto<DeepPartial<UserEntityInterface>>\tqueryOptions?\tCrudQueryOptionsInterface","returns-4#Returns":"Promise<UserEntityInterface[]>","inherited-from-3#Inherited from":"TypeOrmCrudService.createMany","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:15","createone#createOne()":"createOne(req, dto, queryOptions?): Promise<UserEntityInterface>","parameters-5#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<UserEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-5#Returns":"Promise<UserEntityInterface>","inherited-from-4#Inherited from":"TypeOrmCrudService.createOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:16","createpageinfo#createPageInfo()":"createPageInfo(data, total, limit, offset): GetManyDefaultResponse<UserEntityInterface>","parameters-6#Parameters":"Parameter\tType\tdata\tUserEntityInterface[]\ttotal\tnumber\tlimit\tnumber\toffset\tnumber","returns-6#Returns":"GetManyDefaultResponse<UserEntityInterface>","inherited-from-5#Inherited from":"TypeOrmCrudService.createPageInfo","defined-in-6#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:15","decidepagination#decidePagination()":"decidePagination(parsed, options): boolean","parameters-7#Parameters":"Parameter\tType\tparsed\tParsedRequestParams\toptions\tCrudRequestOptions","returns-7#Returns":"boolean","inherited-from-6#Inherited from":"TypeOrmCrudService.decidePagination","defined-in-7#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:16","deleteone#deleteOne()":"deleteOne(req, queryOptions?): Promise<void | UserEntityInterface>","parameters-8#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-8#Returns":"Promise<void | UserEntityInterface>","inherited-from-7#Inherited from":"TypeOrmCrudService.deleteOne","defined-in-8#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:19","dogetmany#doGetMany()":"protected doGetMany(builder, query, options): Promise<UserEntityInterface[] | GetManyDefaultResponse<UserEntityInterface>>","parameters-9#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<UserEntityInterface>\tquery\tParsedRequestParams\toptions\tCrudRequestOptions","returns-9#Returns":"Promise<UserEntityInterface[] | GetManyDefaultResponse<UserEntityInterface>>","inherited-from-8#Inherited from":"TypeOrmCrudService.doGetMany","defined-in-9#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:39","getallowedcolumns#getAllowedColumns()":"protected getAllowedColumns(columns, options): string[]","parameters-10#Parameters":"Parameter\tType\tcolumns\tstring[]\toptions\tQueryOptions","returns-10#Returns":"string[]","inherited-from-9#Inherited from":"TypeOrmCrudService.getAllowedColumns","defined-in-10#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:43","getentitycolumns#getEntityColumns()":"protected getEntityColumns(entityMetadata): object","parameters-11#Parameters":"Parameter\tType\tentityMetadata\tEntityMetadata","returns-11#Returns":"object\nName\tType\tcolumns\tstring[]\tprimaryColumns\tstring[]","inherited-from-10#Inherited from":"TypeOrmCrudService.getEntityColumns","defined-in-11#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:44","getfieldwithalias#getFieldWithAlias()":"protected getFieldWithAlias(field, sort?): string","parameters-12#Parameters":"Parameter\tType\tfield\tstring\tsort?\tboolean","returns-12#Returns":"string","inherited-from-11#Inherited from":"TypeOrmCrudService.getFieldWithAlias","defined-in-12#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:58","getmany#getMany()":"getMany(req, queryOptions?): Promise<UserEntityInterface[] | CrudResultPaginatedInterface<UserEntityInterface>>","parameters-13#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-13#Returns":"Promise<UserEntityInterface[] | CrudResultPaginatedInterface<UserEntityInterface>>","inherited-from-12#Inherited from":"TypeOrmCrudService.getMany","defined-in-13#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:13","getone#getOne()":"getOne(req, queryOptions?): Promise<UserEntityInterface>","parameters-14#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-14#Returns":"Promise<UserEntityInterface>","inherited-from-13#Inherited from":"TypeOrmCrudService.getOne","defined-in-14#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:14","getoneorfail#getOneOrFail()":"protected getOneOrFail(req, shallow?, withDeleted?): Promise<UserEntityInterface>","parameters-15#Parameters":"Parameter\tType\treq\tCrudRequest\tshallow?\tboolean\twithDeleted?\tboolean","returns-15#Returns":"Promise<UserEntityInterface>","inherited-from-14#Inherited from":"TypeOrmCrudService.getOneOrFail","defined-in-15#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:41","getparamfilters#getParamFilters()":"getParamFilters(parsed): ObjectLiteral","parameters-16#Parameters":"Parameter\tType\tparsed\tParsedRequestParams","returns-16#Returns":"ObjectLiteral","inherited-from-15#Inherited from":"TypeOrmCrudService.getParamFilters","defined-in-16#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:37","getprimaryparams#getPrimaryParams()":"getPrimaryParams(options): string[]","parameters-17#Parameters":"Parameter\tType\toptions\tCrudRequestOptions","returns-17#Returns":"string[]","inherited-from-16#Inherited from":"TypeOrmCrudService.getPrimaryParams","defined-in-17#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:19","getrelationmetadata#getRelationMetadata()":"protected getRelationMetadata(field, options): IAllowedRelation","parameters-18#Parameters":"Parameter\tType\tfield\tstring\toptions\tJoinOption","returns-18#Returns":"IAllowedRelation","inherited-from-17#Inherited from":"TypeOrmCrudService.getRelationMetadata","defined-in-18#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:48","getselect#getSelect()":"protected getSelect(query, options): string[]","parameters-19#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-19#Returns":"string[]","inherited-from-18#Inherited from":"TypeOrmCrudService.getSelect","defined-in-19#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:23","getskip#getSkip()":"getSkip(query, take): null | number","parameters-20#Parameters":"Parameter\tType\tquery\tParsedRequestParams\ttake\tnumber","returns-20#Returns":"null | number","inherited-from-19#Inherited from":"TypeOrmCrudService.getSkip","defined-in-20#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:18","getsort#getSort()":"protected getSort(query, options): ObjectLiteral","parameters-21#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-21#Returns":"ObjectLiteral","inherited-from-20#Inherited from":"TypeOrmCrudService.getSort","defined-in-21#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:57","gettake#getTake()":"getTake(query, options): null | number","parameters-22#Parameters":"Parameter\tType\tquery\tParsedRequestParams\toptions\tQueryOptions","returns-22#Returns":"null | number","inherited-from-21#Inherited from":"TypeOrmCrudService.getTake","defined-in-22#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:17","mapoperatorstoquery#mapOperatorsToQuery()":"protected mapOperatorsToQuery(cond, param): object","parameters-23#Parameters":"Parameter\tType\tcond\tQueryFilter\tparam\tany","returns-23#Returns":"object\nName\tType\tparams\tObjectLiteral\tstr\tstring","inherited-from-22#Inherited from":"TypeOrmCrudService.mapOperatorsToQuery","defined-in-23#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:60","mapsort#mapSort()":"protected mapSort(sort): ObjectLiteral","parameters-24#Parameters":"Parameter\tType\tsort\tQuerySort[]","returns-24#Returns":"ObjectLiteral","inherited-from-23#Inherited from":"TypeOrmCrudService.mapSort","defined-in-24#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:59","oninitmapentitycolumns#onInitMapEntityColumns()":"protected onInitMapEntityColumns(): void","returns-25#Returns":"void","inherited-from-24#Inherited from":"TypeOrmCrudService.onInitMapEntityColumns","defined-in-25#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:40","prepareentitybeforesave#prepareEntityBeforeSave()":"protected prepareEntityBeforeSave(dto, parsed): UserEntityInterface","parameters-25#Parameters":"Parameter\tType\tdto\tDeepPartial<UserEntityInterface>\tparsed\tParsedRequestParams","returns-26#Returns":"UserEntityInterface","inherited-from-25#Inherited from":"TypeOrmCrudService.prepareEntityBeforeSave","defined-in-26#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:42","recoverone#recoverOne()":"recoverOne(req, queryOptions?): Promise<UserEntityInterface>","parameters-26#Parameters":"Parameter\tType\treq\tCrudRequest\tqueryOptions?\tCrudQueryOptionsInterface","returns-27#Returns":"Promise<UserEntityInterface>","inherited-from-26#Inherited from":"TypeOrmCrudService.recoverOne","defined-in-27#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:20","replaceone#replaceOne()":"replaceOne(req, dto, queryOptions?): Promise<UserEntityInterface>","parameters-27#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<UserEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-28#Returns":"Promise<UserEntityInterface>","inherited-from-27#Inherited from":"TypeOrmCrudService.replaceOne","defined-in-28#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:18","setandwhere#setAndWhere()":"protected setAndWhere(cond, i, builder): void","parameters-28#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<UserEntityInterface> | WhereExpression","returns-29#Returns":"void","inherited-from-28#Inherited from":"TypeOrmCrudService.setAndWhere","defined-in-29#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:50","setjoin#setJoin()":"protected setJoin(cond, joinOptions, builder): boolean","parameters-29#Parameters":"Parameter\tType\tcond\tQueryJoin\tjoinOptions\tJoinOptions\tbuilder\tSelectQueryBuilder<UserEntityInterface>","returns-30#Returns":"boolean","inherited-from-29#Inherited from":"TypeOrmCrudService.setJoin","defined-in-30#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:22","setorwhere#setOrWhere()":"protected setOrWhere(cond, i, builder): void","parameters-30#Parameters":"Parameter\tType\tcond\tQueryFilter\ti\tany\tbuilder\tSelectQueryBuilder<UserEntityInterface> | WhereExpression","returns-31#Returns":"void","inherited-from-30#Inherited from":"TypeOrmCrudService.setOrWhere","defined-in-31#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:51","setsearchcondition#setSearchCondition()":"protected setSearchCondition(builder, search, condition?): void","parameters-31#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<UserEntityInterface>\tsearch\tSCondition\tcondition?\tSConditionKey","returns-32#Returns":"void","inherited-from-31#Inherited from":"TypeOrmCrudService.setSearchCondition","defined-in-32#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:52","setsearchfieldobjectcondition#setSearchFieldObjectCondition()":"protected setSearchFieldObjectCondition(builder, condition, field, object): void","parameters-32#Parameters":"Parameter\tType\tbuilder\tSelectQueryBuilder<UserEntityInterface>\tcondition\tSConditionKey\tfield\tstring\tobject\tany","returns-33#Returns":"void","inherited-from-32#Inherited from":"TypeOrmCrudService.setSearchFieldObjectCondition","defined-in-33#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud-typeorm/lib/typeorm-crud.service.d.ts:55","throwbadrequestexception#throwBadRequestException()":"throwBadRequestException(msg?): BadRequestException","parameters-33#Parameters":"Parameter\tType\tmsg?\tany","returns-34#Returns":"BadRequestException","inherited-from-33#Inherited from":"TypeOrmCrudService.throwBadRequestException","defined-in-34#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:13","thrownotfoundexception#throwNotFoundException()":"throwNotFoundException(name): NotFoundException","parameters-34#Parameters":"Parameter\tType\tname\tstring","returns-35#Returns":"NotFoundException","inherited-from-34#Inherited from":"TypeOrmCrudService.throwNotFoundException","defined-in-35#Defined in":".tmp/repos/rockets/node_modules/@nestjsx/crud/lib/services/crud-service.abstract.d.ts:14","transaction#transaction()":"transaction(options?): TransactionProxy","parameters-35#Parameters":"Parameter\tType\toptions?\tSafeTransactionOptionsInterface","returns-36#Returns":"TransactionProxy","inherited-from-35#Inherited from":"TypeOrmCrudService.transaction","defined-in-36#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:21","updateone#updateOne()":"updateOne(req, dto, queryOptions?): Promise<UserEntityInterface>","parameters-36#Parameters":"Parameter\tType\treq\tCrudRequest\tdto\tDeepPartial<UserEntityInterface>\tqueryOptions?\tCrudQueryOptionsInterface","returns-37#Returns":"Promise<UserEntityInterface>","inherited-from-36#Inherited from":"TypeOrmCrudService.updateOne","defined-in-37#Defined in":".tmp/repos/rockets/packages/nestjs-crud/dist/services/typeorm-crud.service.d.ts:17"}},"/reference/rockets/nestjs-user/classes/UserException":{"title":"Class: UserException","data":{"":"Generic user exception.","extends#Extends":"Error","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-userexception#new UserException()":"new UserException(message, originalError?): UserException","parameters#Parameters":"Parameter\tType\tmessage\tstring\toriginalError?\tunknown","returns#Returns":"UserException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/exceptions/user-exception.ts:14","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.message\tpublic\tstring\tundefined\t-\t-\tcontext.originalError\tpublic\tError\tundefined\t-\t-\terrorCode\tpublic\tstring\t'USER_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/nestjs-user/classes/UserLookupService":{"title":"Class: UserLookupService","data":{"":"User lookup service","extends#Extends":"LookupService<UserEntityInterface>","implements#Implements":"UserLookupServiceInterface","constructors#Constructors":"","new-userlookupservice#new UserLookupService()":"new UserLookupService(repo): UserLookupService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<UserEntityInterface>\tinstance of the user repo","returns#Returns":"UserLookupService","overrides#Overrides":"LookupService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-lookup.service.ts:28","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"LookupService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:14","methods#Methods":"","byemail#byEmail()":"byEmail(email, queryOptions?): Promise<null | UserEntityInterface>\nGet user for the given email.","parameters-1#Parameters":"Parameter\tType\tDescription\temail\tstring\tthe email\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<null | UserEntityInterface>","implementation-of#Implementation of":"UserLookupServiceInterface.byEmail","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-lookup.service.ts:40","byid#byId()":"byId(id, queryOptions?): Promise<null | UserEntityInterface>\nGet entity for the given id.","parameters-2#Parameters":"Parameter\tType\tDescription\tid\tstring\tthe id\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-3#Returns":"Promise<null | UserEntityInterface>","implementation-of-1#Implementation of":"UserLookupServiceInterface.byId","inherited-from-1#Inherited from":"LookupService.byId","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/lookup.service.d.ts:7","bysubject#bySubject()":"bySubject(subject, queryOptions?): Promise<null | UserEntityInterface>\nGet user for the given subject.","parameters-3#Parameters":"Parameter\tType\tDescription\tsubject\tstring\tthe subject\tqueryOptions?\tQueryOptionsInterface\t-","returns-4#Returns":"Promise<null | UserEntityInterface>","implementation-of-2#Implementation of":"UserLookupServiceInterface.bySubject","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-lookup.service.ts:52","byusername#byUsername()":"byUsername(username, queryOptions?): Promise<null | UserEntityInterface>\nGet user for the given username.","parameters-4#Parameters":"Parameter\tType\tDescription\tusername\tstring\tthe username\tqueryOptions?\tQueryOptionsInterface\t-","returns-5#Returns":"Promise<null | UserEntityInterface>","implementation-of-3#Implementation of":"UserLookupServiceInterface.byUsername","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-lookup.service.ts:64","find#find()":"find(options, queryOptions?): Promise<Promise<UserEntityInterface[]>>\nFind wrapper.","parameters-5#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<UserEntityInterface>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-6#Returns":"Promise<Promise<UserEntityInterface[]>>","inherited-from-2#Inherited from":"LookupService.find","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:10","findone#findOne()":"findOne(options, queryOptions?): Promise<null | UserEntityInterface>\nFind One wrapper.","parameters-6#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<UserEntityInterface>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-7#Returns":"Promise<null | UserEntityInterface>","inherited-from-3#Inherited from":"LookupService.findOne","defined-in-7#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:11","repository#repository()":"repository(queryOptions?): Repository<UserEntityInterface>\nReturn the correct repository instance.","parameters-7#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-8#Returns":"Repository<UserEntityInterface>","inherited-from-4#Inherited from":"LookupService.repository","defined-in-8#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:12","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-8#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-9#Returns":"TransactionProxy","inherited-from-5#Inherited from":"LookupService.transaction","defined-in-9#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:13"}},"/reference/rockets/nestjs-user/classes/UserModule":{"title":"Class: UserModule","data":{"":"User Module","extends#Extends":"UserModuleClass","constructors#Constructors":"","new-usermodule#new UserModule()":"new UserModule(): UserModule","returns#Returns":"UserModule","inherited-from#Inherited from":"UserModuleClass.constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tUserOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.module.ts:34","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tUserOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.module.ts:26","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tUserAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.module.ts:30","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tUserOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"UserModuleClass.register","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.module.ts:18","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tUserAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"UserModuleClass.registerAsync","defined-in-5#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/user.module.ts:22"}},"/reference/rockets/nestjs-user/classes/UserMutateService":{"title":"Class: UserMutateService","data":{"":"User mutate service","extends#Extends":"MutateService<UserEntityInterface, UserCreatableInterface, UserUpdatableInterface>","implements#Implements":"UserMutateServiceInterface","constructors#Constructors":"","new-usermutateservice#new UserMutateService()":"new UserMutateService(repo, userPasswordService): UserMutateService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<UserEntityInterface>\tinstance of the user repo\tuserPasswordService\tUserPasswordService\tinstance of a user password service","returns#Returns":"UserMutateService","overrides#Overrides":"MutateService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-mutate.service.ts:39","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tOverrides\tcreateDto\tprotected\ttypeof UserCreateDto\tUserCreateDto\t-\tMutateService.createDto\tupdateDto\tprotected\ttypeof UserUpdateDto\tUserUpdateDto\t-\tMutateService.updateDto\tuserPasswordService\treadonly\tUserPasswordService\tundefined\tinstance of a user password service\t-","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"MutateService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:14","methods#Methods":"","create#create()":"create(data, queryOptions?): Promise<UserEntityInterface>\nCreate one","parameters-1#Parameters":"Parameter\tType\tDescription\tdata\tUserCreatableInterface\tthe reference to create\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<UserEntityInterface>the created reference","implementation-of#Implementation of":"UserMutateServiceInterface.create","inherited-from-1#Inherited from":"MutateService.create","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:9","find#find()":"find(options, queryOptions?): Promise<Promise<UserEntityInterface[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<UserEntityInterface>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<UserEntityInterface[]>>","inherited-from-2#Inherited from":"MutateService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:10","findbyid#findById()":"protected findById(id, queryOptions?): Promise<UserEntityInterface>\nInternal","parameters-3#Parameters":"Parameter\tType\tid\tstring\tqueryOptions?\tQueryOptionsInterface","returns-4#Returns":"Promise<UserEntityInterface>","inherited-from-3#Inherited from":"MutateService.findById","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:17","findone#findOne()":"findOne(options, queryOptions?): Promise<null | UserEntityInterface>\nFind One wrapper.","parameters-4#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<UserEntityInterface>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-5#Returns":"Promise<null | UserEntityInterface>","inherited-from-4#Inherited from":"MutateService.findOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:11","remove#remove()":"remove(data, queryOptions?): Promise<UserEntityInterface>\nRemove one","parameters-5#Parameters":"Parameter\tType\tDescription\tdata\tDeepPartial<UserEntityInterface> & ReferenceIdInterface<string>\tthe reference data to remove\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-6#Returns":"Promise<UserEntityInterface>the removed reference","implementation-of-1#Implementation of":"UserMutateServiceInterface.remove","inherited-from-5#Inherited from":"MutateService.remove","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:12","replace#replace()":"replace(data, queryOptions?): Promise<UserEntityInterface>\nReplace one","parameters-6#Parameters":"Parameter\tType\tDescription\tdata\tUserCreatableInterface & ReferenceIdInterface<string>\tthe reference data to replace\tqueryOptions?\tQueryOptionsInterface\t-","returns-7#Returns":"Promise<UserEntityInterface>the replaced reference","implementation-of-2#Implementation of":"UserMutateServiceInterface.replace","inherited-from-6#Inherited from":"MutateService.replace","defined-in-7#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:11","repository#repository()":"repository(queryOptions?): Repository<UserEntityInterface>\nReturn the correct repository instance.","parameters-7#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-8#Returns":"Repository<UserEntityInterface>","inherited-from-7#Inherited from":"MutateService.repository","defined-in-8#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:12","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-8#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-9#Returns":"TransactionProxy","inherited-from-8#Inherited from":"MutateService.transaction","defined-in-9#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/base.service.d.ts:13","transform#transform()":"protected transform<T>(user): Promise<DeepPartial<UserEntityInterface>>\nInternal","type-parameters#Type Parameters":"Type Parameter\tT extends DeepPartial<UserEntityInterface>","parameters-9#Parameters":"Parameter\tType\tuser\tT | T & PasswordPlainInterface","returns-10#Returns":"Promise<DeepPartial<UserEntityInterface>>","overrides-1#Overrides":"MutateService.transform","defined-in-10#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-mutate.service.ts:47","update#update()":"update(data, queryOptions?): Promise<UserEntityInterface>\nUpdate one","parameters-10#Parameters":"Parameter\tType\tDescription\tdata\tUserUpdatableInterface & ReferenceIdInterface<string>\tthe reference data to update\tqueryOptions?\tQueryOptionsInterface\t-","returns-11#Returns":"Promise<UserEntityInterface>the updated reference","implementation-of-3#Implementation of":"UserMutateServiceInterface.update","inherited-from-9#Inherited from":"MutateService.update","defined-in-11#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:10","validate#validate()":"protected validate<T>(type, data): Promise<T>\nInternal","type-parameters-1#Type Parameters":"Type Parameter\tT extends DeepPartial<UserEntityInterface>","parameters-11#Parameters":"Parameter\tType\ttype\tType<T>\tdata\tT","returns-12#Returns":"Promise<T>","inherited-from-10#Inherited from":"MutateService.validate","defined-in-12#Defined in":".tmp/repos/rockets/packages/typeorm-common/dist/services/mutate.service.d.ts:15"}},"/reference/rockets/nestjs-user/classes/UserPaginatedDto":{"title":"Class: UserPaginatedDto","data":{"":"User paginated DTO","extends#Extends":"CrudResponsePaginatedDto<UserInterface>","constructors#Constructors":"","new-userpaginateddto#new UserPaginatedDto()":"new UserPaginatedDto(): UserPaginatedDto","returns#Returns":"UserPaginatedDto","inherited-from#Inherited from":"CrudResponsePaginatedDto.constructor","properties#Properties":"Property\tType\tDefault value\tOverrides\tInherited from\tcount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.count\tdata\tUserDto[]\t[]\tCrudResponsePaginatedDto.data\t-\tpage\tnumber\tundefined\t-\tCrudResponsePaginatedDto.page\tpageCount\tnumber\tundefined\t-\tCrudResponsePaginatedDto.pageCount\ttotal\tnumber\tundefined\t-\tCrudResponsePaginatedDto.total"}},"/reference/rockets/nestjs-user/classes/UserPasswordDto":{"title":"Class: UserPasswordDto","data":{"":"User plain password DTO","extended-by#Extended by":"UserPasswordUpdateDto","implements#Implements":"PasswordPlainInterface","constructors#Constructors":"","new-userpassworddto#new UserPasswordDto()":"new UserPasswordDto(): UserPasswordDto","returns#Returns":"UserPasswordDto","properties#Properties":"Property\tType\tDescription\tpassword\tstring\tPassword"}},"/reference/rockets/nestjs-user/classes/UserPasswordService":{"title":"Class: UserPasswordService","data":{"":"User password service","implements#Implements":"UserPasswordServiceInterface","constructors#Constructors":"","new-userpasswordservice#new UserPasswordService()":"new UserPasswordService(userLookupService, passwordCreationService, userPasswordHistoryService?): UserPasswordService\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\tuserLookupService\tUserLookupServiceInterface\tuser lookup service\tpasswordCreationService\tPasswordCreationServiceInterface\tpassword creation service\tuserPasswordHistoryService?\tUserPasswordHistoryServiceInterface\t-","returns#Returns":"UserPasswordService","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-password.service.ts:34","properties#Properties":"Property\tModifier\tType\tDescription\tpasswordCreationService\treadonly\tPasswordCreationServiceInterface\tpassword creation service\tuserLookupService\treadonly\tUserLookupServiceInterface\tuser lookup service","methods#Methods":"","getpasswordstore#getPasswordStore()":"getPasswordStore(userId): Promise<ReferenceIdInterface<string> & PasswordStorageInterface>\nGet the object containing the password store by user id.Object must have reference id and password storage interface.","parameters-1#Parameters":"Parameter\tType\tDescription\tuserId\tstring\tThe id of the user that is being updated","returns-1#Returns":"Promise<ReferenceIdInterface<string> & PasswordStorageInterface>The user being updated","implementation-of#Implementation of":"UserPasswordServiceInterface.getPasswordStore","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-password.service.ts:106","setpassword#setPassword()":"setPassword(passwordDto, userToUpdateId?, authorizedUser?): Promise<Omit<Partial<PasswordPlainInterface>, \"password\"> | Omit<Partial<PasswordPlainInterface>, \"password\"> & Partial<PasswordStorageInterface>>\nSet the password (hash) on the user object.","parameters-2#Parameters":"Parameter\tType\tDescription\tpasswordDto\tPartial<PasswordPlainInterface & PasswordPlainCurrentInterface>\tThe object containing the password, and optionally the current password.\tuserToUpdateId?\tstring\tThe id of the user being updated.\tauthorizedUser?\tAuthenticatedUserInterface\tThe authorized user","returns-2#Returns":"Promise<Omit<Partial<PasswordPlainInterface>, \"password\"> | Omit<Partial<PasswordPlainInterface>, \"password\"> & Partial<PasswordStorageInterface>>","implementation-of-1#Implementation of":"UserPasswordServiceInterface.setPassword","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-password.service.ts:44","validatecurrent#validateCurrent()":"protected validateCurrent(target, password?, authorizedUser?): Promise<boolean>","parameters-3#Parameters":"Parameter\tType\ttarget\tReferenceIdInterface<string> & PasswordStorageInterface\tpassword?\tstring\tauthorizedUser?\tAuthenticatedUserInterface","returns-3#Returns":"Promise<boolean>","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-password.service.ts:140","validatehistory#validateHistory()":"protected validateHistory(user, password?): Promise<boolean>","parameters-4#Parameters":"Parameter\tType\tuser\tReferenceIdInterface<string>\tpassword?\tstring","returns-4#Returns":"Promise<boolean>","defined-in-4#Defined in":".tmp/repos/rockets/packages/nestjs-user/src/services/user-password.service.ts:166"}},"/reference/rockets/nestjs-user/classes/UserPasswordUpdateDto":{"title":"Class: UserPasswordUpdateDto","data":{"":"User update password DTO","extends#Extends":"UserPasswordDto","implements#Implements":"PasswordPlainCurrentInterface","constructors#Constructors":"","new-userpasswordupdatedto#new UserPasswordUpdateDto()":"new UserPasswordUpdateDto(): UserPasswordUpdateDto","returns#Returns":"UserPasswordUpdateDto","inherited-from#Inherited from":"UserPasswordDto.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tpassword\tstring\tPassword\tUserPasswordDto.password\tpasswordCurrent\tstring\tCurrent Password\t-"}},"/reference/rockets/nestjs-user/classes/UserPostgresEntity":{"title":"Class: abstract UserPostgresEntity","data":{"":"User Entity","extends#Extends":"CommonPostgresEntity","implements#Implements":"UserEntityInterface","constructors#Constructors":"","new-userpostgresentity#new UserPostgresEntity()":"new UserPostgresEntity(): UserPostgresEntity","returns#Returns":"UserPostgresEntity","inherited-from#Inherited from":"CommonPostgresEntity.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\tundefined\tActive\t-\tdateCreated\tDate\tundefined\tDate created.\tUserEntityInterface.dateCreated CommonPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted.\tUserEntityInterface.dateDeleted CommonPostgresEntity.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated.\tUserEntityInterface.dateUpdated CommonPostgresEntity.dateUpdated\temail\tstring\tundefined\tEmail\t-\tid\tstring\tundefined\t-\tUserEntityInterface.id CommonPostgresEntity.id\tpasswordHash\tnull | string\tnull\tPassword hash\t-\tpasswordSalt\tnull | string\tnull\tPassword salt\t-\tuserPasswordHistory?\tUserPasswordHistoryEntityInterface\tundefined\t-\t-\tusername\tstring\tundefined\tUsername\t-\tversion\tnumber\tundefined\tVersion\tUserEntityInterface.version CommonPostgresEntity.version"}},"/reference/rockets/nestjs-user/classes/UserSqliteEntity":{"title":"Class: abstract UserSqliteEntity","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"CommonSqliteEntity","implements#Implements":"UserEntityInterface","constructors#Constructors":"","new-usersqliteentity#new UserSqliteEntity()":"new UserSqliteEntity(): UserSqliteEntity","returns#Returns":"UserSqliteEntity","inherited-from#Inherited from":"CommonSqliteEntity.constructor","properties#Properties":"Property\tType\tDefault value\tDescription\tInherited from\tactive\tboolean\tundefined\tActive\t-\tdateCreated\tDate\tundefined\tDate created.\tUserEntityInterface.dateCreated CommonSqliteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tundefined\tDate deleted.\tUserEntityInterface.dateDeleted CommonSqliteEntity.dateDeleted\tdateUpdated\tDate\tundefined\tDate updated.\tUserEntityInterface.dateUpdated CommonSqliteEntity.dateUpdated\temail\tstring\tundefined\tEmail\t-\tid\tstring\tundefined\t-\tUserEntityInterface.id CommonSqliteEntity.id\tpasswordHash\tnull | string\tnull\tPassword hash\t-\tpasswordSalt\tnull | string\tnull\tPassword salt\t-\tuserPasswordHistory?\tUserPasswordHistoryEntityInterface\tundefined\t-\t-\tusername\tstring\tundefined\tUsername\t-\tversion\tnumber\tundefined\tVersion\tUserEntityInterface.version CommonSqliteEntity.version"}},"/reference/rockets/nestjs-user/globals":{"title":"@concepta/nestjs-user","data":{"enumerations#Enumerations":"UserResource","classes#Classes":"UserAccessQueryService\nUserController\nUserCreateDto\nUserCreateManyDto\nUserCrudService\nUserDto\nUserException\nUserLookupService\nUserModule\nUserMutateService\nUserPaginatedDto\nUserPasswordDto\nUserPasswordService\nUserPasswordUpdateDto\nUserPostgresEntity\nUserSqliteEntity\nUserUpdateDto","interfaces#Interfaces":"UserEntityInterface\nUserLookupServiceInterface\nUserMutateServiceInterface\nUserPasswordServiceInterface"}},"/reference/rockets/nestjs-user/classes/UserUpdateDto":{"title":"Class: UserUpdateDto","data":{"":"User Update DTO","extends#Extends":"Partial<UserPasswordDto> & Partial<Pick<UserDto, \"email\" | \"active\">> & Partial<UserPasswordUpdateDto>","implements#Implements":"UserUpdatableInterface","constructors#Constructors":"","new-userupdatedto#new UserUpdateDto()":"new UserUpdateDto(...args): UserUpdateDto","parameters#Parameters":"Parameter\tType\t...args\tany[]","returns#Returns":"UserUpdateDto","inherited-from#Inherited from":"IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).constructor","defined-in#Defined in":".tmp/repos/rockets/node_modules/@nestjs/common/interfaces/type.interface.d.ts:2","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tactive?\tpublic\tboolean\tundefined\tActive\tUserUpdatableInterface.active IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).active\temail?\tpublic\tstring\t''\tEmail\tUserUpdatableInterface.email IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).email\tpassword?\tpublic\tstring\tundefined\tPassword\tUserUpdatableInterface.password IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).password\tpasswordCurrent?\tpublic\tstring\tundefined\tCurrent Password\tUserUpdatableInterface.passwordCurrent IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).passwordCurrent\targuments\tstatic\tany\tundefined\t-\tIntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).arguments\tcaller\tstatic\tFunction\tundefined\t-\tIntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).caller\tlength\treadonly\tnumber\tundefined\t-\tIntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).length\tname\treadonly\tstring\tundefined\tReturns the name of the function. Function names are read-only and can not be changed.\tIntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).name","methods#Methods":"","hasinstance#[hasInstance]()":"static [hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"static apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"static bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"static call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"static toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"IntersectionType( PartialType(PickType(UserDto, ['email', 'active'] as const)), PartialType(UserPasswordDto), PartialType(UserPasswordUpdateDto), ).toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/nestjs-user/enumerations/UserResource":{"title":"Enumeration: UserResource","data":{"enumeration-members#Enumeration Members":"Enumeration Member\tValue\tMany\t\"user-list\"\tOne\t\"user\""}},"/reference/rockets/nestjs-user/interfaces/UserEntityInterface":{"title":"Interface: UserEntityInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"UserInterface.PasswordStorageInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tactive\tboolean\t-\tUserInterface.active\tdateCreated\tDate\t-\tUserInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tUserInterface.dateDeleted\tdateUpdated\tDate\t-\tUserInterface.dateUpdated\temail\tstring\t-\tUserInterface.email\tid\tstring\t-\tUserInterface.id\tpasswordHash\tnull | string\tHashed password\tPasswordStorageInterface.passwordHash\tpasswordSalt\tnull | string\tSalt used to hash password\tPasswordStorageInterface.passwordSalt\tusername\tstring\t-\tUserInterface.username\tversion\tnumber\t-\tUserInterface.version"}},"/reference/rockets/nestjs-user/interfaces/UserLookupServiceInterface":{"title":"Interface: UserLookupServiceInterface","data":{"extends#Extends":"LookupIdInterface.LookupEmailInterface<ReferenceId, ReferenceIdInterface, QueryOptionsInterface>.LookupSubjectInterface<ReferenceSubject, ReferenceIdInterface, QueryOptionsInterface>.LookupUsernameInterface<ReferenceUsername, ReferenceIdInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tbyEmail\t(email: string, options?: QueryOptionsInterface) => Promise<null | ReferenceIdInterface<string>>\tLookupEmailInterface.byEmail\tbyId\t(id: string, options?: ReferenceQueryOptionsInterface) => Promise<null | ReferenceIdInterface<string>>\tLookupIdInterface.byId\tbySubject\t(subject: string, options?: QueryOptionsInterface) => Promise<null | ReferenceIdInterface<string>>\tLookupSubjectInterface.bySubject\tbyUsername\t(username: string, options?: QueryOptionsInterface) => Promise<null | ReferenceIdInterface<string>>\tLookupUsernameInterface.byUsername"}},"/reference/rockets/nestjs-user/interfaces/UserPasswordServiceInterface":{"title":"Interface: UserPasswordServiceInterface","data":{"properties#Properties":"Property\tType\tDescription\tgetPasswordStore\t(userId: string) => Promise<ReferenceIdInterface<string> & PasswordStorageInterface>\tGet the object containing the password store by user id. Object must have reference id and password storage interface.\tsetPassword\t(passwordDto: Partial<PasswordPlainInterface & PasswordPlainCurrentInterface>, userToUpdateId?: string, authorizedUser?: AuthenticatedUserInterface) => Promise<Omit<Partial<PasswordPlainInterface>, \"password\"> | Omit<Partial<PasswordPlainInterface>, \"password\"> & Partial<PasswordStorageInterface>>\tSet the password (hash) on the user object."}},"/reference/rockets/packages":{"title":"Rockets","data":{"packages#Packages":"@concepta/nestjs-access-control\n@concepta/nestjs-auth-github\n@concepta/nestjs-auth-jwt\n@concepta/nestjs-auth-local\n@concepta/nestjs-auth-recovery\n@concepta/nestjs-auth-refresh\n@concepta/nestjs-authentication\n@concepta/nestjs-cache\n@concepta/nestjs-common\n@concepta/nestjs-core\n@concepta/nestjs-crud\n@concepta/nestjs-email\n@concepta/nestjs-event\n@concepta/nestjs-exception\n@concepta/nestjs-federated\n@concepta/nestjs-invitation\n@concepta/nestjs-jwt\n@concepta/nestjs-logger\n@concepta/nestjs-org\n@concepta/nestjs-otp\n@concepta/nestjs-password\n@concepta/nestjs-role\n@concepta/nestjs-swagger-ui\n@concepta/nestjs-typeorm-ext\n@concepta/nestjs-user\n@concepta/ts-common\n@concepta/ts-core\n@concepta/typeorm-common"}},"/reference/rockets/nestjs-user/interfaces/UserMutateServiceInterface":{"title":"Interface: UserMutateServiceInterface","data":{"extends#Extends":"CreateOneInterface<UserCreatableInterface, UserEntityInterface>.UpdateOneInterface<UserUpdatableInterface & ReferenceIdInterface, UserEntityInterface, QueryOptionsInterface>.ReplaceOneInterface<UserCreatableInterface & ReferenceIdInterface, UserEntityInterface, QueryOptionsInterface>.RemoveOneInterface<UserEntityInterface, UserEntityInterface, QueryOptionsInterface>","properties#Properties":"Property\tType\tInherited from\tcreate\t(object: UserCreatableInterface, options?: ReferenceQueryOptionsInterface) => Promise<UserEntityInterface>\tCreateOneInterface.create\tremove\t(object: UserEntityInterface, options?: QueryOptionsInterface) => Promise<UserEntityInterface>\tRemoveOneInterface.remove\treplace\t(object: UserCreatableInterface & ReferenceIdInterface<string>, options?: QueryOptionsInterface) => Promise<UserEntityInterface>\tReplaceOneInterface.replace\tupdate\t(object: UserUpdatableInterface & ReferenceIdInterface<string>, options?: QueryOptionsInterface) => Promise<UserEntityInterface>\tUpdateOneInterface.update"}},"/reference/rockets/ts-common/README":{"title":"Rockets Typescript Core","data":{"":"Core Typescript interfaces, classes and utilities.","project#Project":"","installation#Installation":"yarn add @concepta/ts-common"}},"/reference/rockets/ts-common/globals":{"title":"@concepta/ts-common","data":{"interfaces#Interfaces":"AuthenticatedUserInterface\nAuthenticationAccessInterface\nAuthenticationCodeInterface\nAuthenticationLoginInterface\nAuthenticationRefreshInterface\nAuthenticationResponseInterface\nAuthorizationPayloadInterface\nCacheClearInterface\nCacheCreatableInterface\nCacheCreateInterface\nCacheDeleteInterface\nCacheGetOneInterface\nCacheInterface\nCacheUpdatableInterface\nCacheUpdateInterface\nEmailSendInterface\nEmailSendOptionsInterface\nFederatedCreatableInterface\nFederatedInterface\nFederatedUpdatableInterface\nInvitationAcceptedEventPayloadInterface\nInvitationGetUserEventPayloadInterface\nInvitationGetUserEventResponseInterface\nInvitationInterface\nOrgCreatableInterface\nOrgInterface\nOrgMemberInterface\nOrgOwnerInterface\nOrgUpdatableInterface\nOtpClearInterface\nOtpCreatableInterface\nOtpCreateInterface\nOtpDeleteInterface\nOtpInterface\nOtpValidateInterface\nPasswordPlainCurrentInterface\nPasswordPlainInterface\nRoleAssigneesInterface\nRoleAssignmentCreatableInterface\nRoleAssignmentInterface\nRoleCreatableInterface\nRoleInterface\nRoleUpdatableInterface\nUserCreatableInterface\nUserInterface\nUserOwnableInterface\nUserUpdatableInterface","variables#Variables":"INVITATION_MODULE_CATEGORY_ORG_KEY\nINVITATION_MODULE_CATEGORY_USER_KEY"}},"/reference/rockets/ts-common/interfaces/AuthenticatedUserInterface":{"title":"Interface: AuthenticatedUserInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface","properties#Properties":"Property\tType\tInherited from\tid\tstring\tReferenceIdInterface.id"}},"/reference/rockets/ts-common/interfaces/AuthenticationAccessInterface":{"title":"Interface: AuthenticationAccessInterface","data":{"":"Authentication access token interface","extended-by#Extended by":"AuthenticationResponseInterface","properties#Properties":"Property\tType\tDescription\taccessToken\tstring\tThe access token."}},"/reference/rockets/ts-common/interfaces/AuthenticationRefreshInterface":{"title":"Interface: AuthenticationRefreshInterface","data":{"extended-by#Extended by":"AuthenticationResponseInterface","properties#Properties":"Property\tType\trefreshToken\tstring"}},"/reference/rockets/ts-common/interfaces/AuthenticationLoginInterface":{"title":"Interface: AuthenticationLoginInterface","data":{"":"Password plain text interface","extends#Extends":"ReferenceUsernameInterface.PasswordPlainInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tpassword\tstring\tPassword\tPasswordPlainInterface.password\tusername\tstring\t-\tReferenceUsernameInterface.username"}},"/reference/rockets/ts-common/interfaces/AuthenticationCodeInterface":{"title":"Interface: AuthenticationCodeInterface","data":{"properties#Properties":"Property\tType\tcode\tstring"}},"/reference/rockets/ts-common/interfaces/AuthorizationPayloadInterface":{"title":"Interface: AuthorizationPayloadInterface","data":{"":"Identifiable by subject (JWT).","extends#Extends":"ReferenceSubjectInterface","properties#Properties":"Property\tType\tInherited from\tsub\tstring\tReferenceSubjectInterface.sub"}},"/reference/rockets/ts-common/interfaces/CacheClearInterface":{"title":"Interface: CacheClearInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","clear#clear()":"clear(assignment, cache, options?): Promise<void>\nClear all caches for assign in given category.","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the repository\tcache\tPick<CacheInterface, \"assignee\">\tThe cache to clear\toptions?\tO\t-","returns#Returns":"Promise<void>","defined-in#Defined in":"ts-common/src/cache/interfaces/cache-clear.interface.ts:16"}},"/reference/rockets/ts-common/interfaces/AuthenticationResponseInterface":{"title":"Interface: AuthenticationResponseInterface","data":{"":"Authentication response interface","extends#Extends":"AuthenticationAccessInterface.AuthenticationRefreshInterface","properties#Properties":"Property\tType\tDescription\tInherited from\taccessToken\tstring\tThe access token.\tAuthenticationAccessInterface.accessToken\trefreshToken\tstring\t-\tAuthenticationRefreshInterface.refreshToken"}},"/reference/rockets/ts-common/interfaces/CacheCreatableInterface":{"title":"Interface: CacheCreatableInterface","data":{"extends#Extends":"Pick<CacheInterface, \"key\" | \"type\" | \"data\" | \"assignee\">","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tPick.assignee\tdata\tnull | string\tdata of the cache\tPick.data\texpiresIn\tnull | string\t-\t-\tkey\tstring\tkey to be used as reference for the cache data\tPick.key\ttype\tstring\tType of the passcode\tPick.type"}},"/reference/rockets/ts-common/interfaces/CacheCreateInterface":{"title":"Interface: CacheCreateInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","create#create()":"create(assignment, cache, options?): Promise<CacheInterface>\nCreate a cache with a for the given assignee.","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe cache assignment\tcache\tCacheCreatableInterface\tThe CACHE to create\toptions?\tO\t-","returns#Returns":"Promise<CacheInterface>","defined-in#Defined in":"ts-common/src/cache/interfaces/cache-create.interface.ts:18"}},"/reference/rockets/ts-common/interfaces/CacheDeleteInterface":{"title":"Interface: CacheDeleteInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","delete#delete()":"delete(assignment, cache, options?): Promise<void>\nDelete a cache based on params","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe cache assignment\tcache\tPick<CacheInterface, \"assignee\" | \"type\" | \"key\">\tThe dto with unique keys to delete\toptions?\tO\t-","returns#Returns":"Promise<void>","defined-in#Defined in":"ts-common/src/cache/interfaces/cache-delete.interface.ts:16"}},"/reference/rockets/ts-common/interfaces/CacheGetOneInterface":{"title":"Interface: CacheGetOneInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","get#get()":"get(assignment, cache, queryOptions?): Promise<null | CacheInterface>\nGet One cache based on params","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe cache assignment\tcache\tPick<CacheInterface, \"assignee\" | \"type\" | \"key\">\tThe dto with unique keys to delete\tqueryOptions?\tO\t-","returns#Returns":"Promise<null | CacheInterface>","defined-in#Defined in":"ts-common/src/cache/interfaces/cache-get-one.interface.ts:16"}},"/reference/rockets/ts-common/interfaces/CacheUpdateInterface":{"title":"Interface: CacheUpdateInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","update#update()":"update(assignment, cache, options?): Promise<CacheInterface>\nUpdate a cache based on params","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe cache assignment\tcache\tCacheUpdatableInterface\tThe dto with unique keys to delete\toptions?\tO\t-","returns#Returns":"Promise<CacheInterface>","defined-in#Defined in":"ts-common/src/cache/interfaces/cache-update.interface.ts:17"}},"/reference/rockets/ts-common/interfaces/CacheUpdatableInterface":{"title":"Interface: CacheUpdatableInterface","data":{"extends#Extends":"Pick<CacheInterface, \"key\" | \"type\" | \"data\" | \"assignee\">","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tPick.assignee\tdata\tnull | string\tdata of the cache\tPick.data\texpiresIn\tnull | string\t-\t-\tkey\tstring\tkey to be used as reference for the cache data\tPick.key\ttype\tstring\tType of the passcode\tPick.type"}},"/reference/rockets/ts-common/interfaces/CacheInterface":{"title":"Interface: CacheInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceAssigneeInterface.AuditInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tReferenceAssigneeInterface.assignee\tdata\tnull | string\tdata of the cache\t-\tdateCreated\tDate\t-\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tAuditInterface.dateDeleted\tdateUpdated\tDate\t-\tAuditInterface.dateUpdated\texpirationDate\tnull | Date\tDate it will expire\t-\tid\tstring\t-\tReferenceIdInterface.id\tkey\tstring\tkey to be used as reference for the cache data\t-\ttype\tstring\tType of the passcode\t-\tversion\tnumber\t-\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/EmailSendOptionsInterface":{"title":"Interface: EmailSendOptionsInterface","data":{"properties#Properties":"Property\tType\tbcc?\tstring | Address | (string | Address)[]\tcc?\tstring | Address | (string | Address)[]\tcontext?\tLiteralObject<unknown>\tfrom?\tstring | Address\ticalEvent?\tstring | IcalAttachment | Buffer | Readable\treplyTo?\tstring | Address\tsubject?\tstring\ttemplate?\tstring\tto?\tstring | Address | (string | Address)[]"}},"/reference/rockets/ts-common/interfaces/EmailSendInterface":{"title":"Interface: EmailSendInterface","data":{"extended-by#Extended by":"","methods#Methods":"","sendmail#sendMail()":"sendMail(sendMailOptions): Promise<void>","parameters#Parameters":"Parameter\tType\tsendMailOptions\tEmailSendOptionsInterface","returns#Returns":"Promise<void>","defined-in#Defined in":"ts-common/src/email/interfaces/email-send.interface.ts:4"}},"/reference/rockets/ts-common/interfaces/FederatedCreatableInterface":{"title":"Interface: FederatedCreatableInterface","data":{"extends#Extends":"Pick<FederatedInterface, \"provider\" | \"subject\" | \"user\">","properties#Properties":"Property\tType\tDescription\tInherited from\tprovider\tstring\tProvider name (github, facebook, etc)\tPick.provider\tsubject\tstring\tThe reference identification for provider TODO: rename to sub via ReferenceSubjectInterface\tPick.subject\tuser\tReferenceIdInterface<string>\tThe user federated will be associated to\tPick.user"}},"/reference/rockets/ts-common/interfaces/InvitationAcceptedEventPayloadInterface":{"title":"Interface: InvitationAcceptedEventPayloadInterface","data":{"properties#Properties":"Property\tType\tdata?\tLiteralObject<unknown>\tinvitation\tInvitationInterface\tqueryOptions?\tReferenceQueryOptionsInterface"}},"/reference/rockets/ts-common/interfaces/FederatedInterface":{"title":"Interface: FederatedInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.AuditInterface","extended-by#Extended by":"","properties#Properties":"Property\tType\tDescription\tInherited from\tdateCreated\tDate\t-\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tAuditInterface.dateDeleted\tdateUpdated\tDate\t-\tAuditInterface.dateUpdated\tid\tstring\t-\tReferenceIdInterface.id\tprovider\tstring\tProvider name (github, facebook, etc)\t-\tsubject\tstring\tThe reference identification for provider TODO: rename to sub via ReferenceSubjectInterface\t-\tuser\tReferenceIdInterface<string>\tThe user federated will be associated to\t-\tversion\tnumber\t-\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/FederatedUpdatableInterface":{"title":"Interface: FederatedUpdatableInterface","data":{"extends#Extends":"Pick<FederatedInterface, \"provider\" | \"subject\">","properties#Properties":"Property\tType\tDescription\tInherited from\tprovider\tstring\tProvider name (github, facebook, etc)\tPick.provider\tsubject\tstring\tThe reference identification for provider TODO: rename to sub via ReferenceSubjectInterface\tPick.subject"}},"/reference/rockets/ts-common/interfaces/InvitationGetUserEventPayloadInterface":{"title":"Interface: InvitationGetUserEventPayloadInterface","data":{"properties#Properties":"Property\tType\tdata?\tLiteralObject<unknown>\temail\tstring\tqueryOptions?\tReferenceQueryOptionsInterface"}},"/reference/rockets/ts-common/interfaces/InvitationGetUserEventResponseInterface":{"title":"Interface: InvitationGetUserEventResponseInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceEmailInterface","properties#Properties":"Property\tType\tInherited from\temail\tstring\tReferenceEmailInterface.email\tid\tstring\tReferenceIdInterface.id"}},"/reference/rockets/ts-common/interfaces/OrgCreatableInterface":{"title":"Interface: OrgCreatableInterface","data":{"extends#Extends":"Pick<OrgInterface, \"name\" | \"owner\">.Partial<Pick<OrgInterface, \"active\">>","properties#Properties":"Property\tType\tDescription\tInherited from\tactive?\tboolean\t-\tPartial.active\tname\tstring\tName\tPick.name\towner\tReferenceIdInterface<string>\tOrg Owner\tPick.owner"}},"/reference/rockets/ts-common/interfaces/InvitationInterface":{"title":"Interface: InvitationInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceActiveInterface.AuditInterface","properties#Properties":"Property\tType\tInherited from\tactive\tboolean\tReferenceActiveInterface.active\tcategory\tstring\t-\tcode\tstring\t-\tconstraints?\tLiteralObject<unknown>\t-\tdateCreated\tDate\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\tAuditInterface.dateDeleted\tdateUpdated\tDate\tAuditInterface.dateUpdated\temail\tstring\t-\tid\tstring\tReferenceIdInterface.id\tuser\tReferenceIdInterface<string>\t-\tversion\tnumber\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/OrgInterface":{"title":"Interface: OrgInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceActiveInterface.AuditInterface.OrgOwnerInterface","extended-by#Extended by":"","properties#Properties":"Property\tType\tDescription\tInherited from\tactive\tboolean\t-\tReferenceActiveInterface.active\tdateCreated\tDate\t-\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tAuditInterface.dateDeleted\tdateUpdated\tDate\t-\tAuditInterface.dateUpdated\tid\tstring\t-\tReferenceIdInterface.id\tmembers?\tOrgMemberInterface\t-\t-\tname\tstring\tName\t-\towner\tReferenceIdInterface<string>\tOrg Owner\tOrgOwnerInterface.owner\tversion\tnumber\t-\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/OrgOwnerInterface":{"title":"Interface: OrgOwnerInterface","data":{"extended-by#Extended by":"OrgInterface","properties#Properties":"Property\tType\tDescription\towner\tReferenceIdInterface<string>\tOrg Owner"}},"/reference/rockets/ts-common/interfaces/OrgUpdatableInterface":{"title":"Interface: OrgUpdatableInterface","data":{"extends#Extends":"Pick<OrgInterface, \"name\" | \"active\" | \"owner\">","properties#Properties":"Property\tType\tDescription\tInherited from\tactive\tboolean\t-\tPick.active\tname\tstring\tName\tPick.name\towner\tReferenceIdInterface<string>\tOrg Owner\tPick.owner"}},"/reference/rockets/ts-common/interfaces/OrgMemberInterface":{"title":"Interface: OrgMemberInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceActiveInterface.AuditInterface","properties#Properties":"Property\tType\tInherited from\tactive\tboolean\tReferenceActiveInterface.active\tdateCreated\tDate\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\tAuditInterface.dateDeleted\tdateUpdated\tDate\tAuditInterface.dateUpdated\tid\tstring\tReferenceIdInterface.id\torgId\tstring\t-\tuserId\tstring\t-\tversion\tnumber\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/OtpClearInterface":{"title":"Interface: OtpClearInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","clear#clear()":"clear(assignment, otp, options?): Promise<void>\nClear all otps for assign in given category.","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe assignment of the repository\totp\tPick<OtpInterface, \"assignee\" | \"category\">\tThe otp to clear\toptions?\tO\t-","returns#Returns":"Promise<void>","defined-in#Defined in":"ts-common/src/otp/interfaces/otp-clear.interface.ts:16"}},"/reference/rockets/ts-common/interfaces/OtpCreateInterface":{"title":"Interface: OtpCreateInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","create#create()":"create(assignment, otp, options?): Promise<OtpInterface>\nCreate a otp with a for the given assignee.","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe otp assignment\totp\tOtpCreatableInterface\tThe OTP to create\toptions?\tO\t-","returns#Returns":"Promise<OtpInterface>","defined-in#Defined in":"ts-common/src/otp/interfaces/otp-create.interface.ts:18"}},"/reference/rockets/ts-common/interfaces/OtpCreatableInterface":{"title":"Interface: OtpCreatableInterface","data":{"extends#Extends":"Pick<OtpInterface, \"category\" | \"type\" | \"assignee\">","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tPick.assignee\tcategory\tstring\tName\tPick.category\texpiresIn\tstring\t-\t-\ttype\tstring\tType of the passcode\tPick.type"}},"/reference/rockets/ts-common/interfaces/OtpInterface":{"title":"Interface: OtpInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceAssigneeInterface.AuditInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tReferenceAssigneeInterface.assignee\tcategory\tstring\tName\t-\tdateCreated\tDate\t-\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tAuditInterface.dateDeleted\tdateUpdated\tDate\t-\tAuditInterface.dateUpdated\texpirationDate\tDate\tDate it will expire\t-\tid\tstring\t-\tReferenceIdInterface.id\tpasscode\tstring\tPasscode\t-\ttype\tstring\tType of the passcode\t-\tversion\tnumber\t-\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/OtpDeleteInterface":{"title":"Interface: OtpDeleteInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","delete#delete()":"delete(assignment, otp, options?): Promise<void>\nDelete a otp based on params","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe otp assignment\totp\tPick<OtpInterface, \"assignee\" | \"category\" | \"passcode\">\tThe otp to delete\toptions?\tO\t-","returns#Returns":"Promise<void>","defined-in#Defined in":"ts-common/src/otp/interfaces/otp-delete.interface.ts:16"}},"/reference/rockets/ts-common/interfaces/PasswordPlainCurrentInterface":{"title":"Interface: PasswordPlainCurrentInterface","data":{"":"Password current text interface","properties#Properties":"Property\tType\tDescription\tpasswordCurrent\tstring\tCurrent Password"}},"/reference/rockets/ts-common/interfaces/OtpValidateInterface":{"title":"Interface: OtpValidateInterface<O>","data":{"type-parameters#Type Parameters":"Type Parameter\tDefault type\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","methods#Methods":"","validate#validate()":"validate(assignment, otp, deleteIfValid, options?): Promise<null | ReferenceAssigneeInterface<ReferenceIdInterface<string>>>\nCheck if otp is valid","parameters#Parameters":"Parameter\tType\tDescription\tassignment\tstring\tThe otp assignment\totp\tPick<OtpInterface, \"category\" | \"passcode\">\tThe otp to validate\tdeleteIfValid\tboolean\tIf true, delete the otp if it is valid\toptions?\tO\t-","returns#Returns":"Promise<null | ReferenceAssigneeInterface<ReferenceIdInterface<string>>>","defined-in#Defined in":"ts-common/src/otp/interfaces/otp-validate.interface.ts:18"}},"/reference/rockets/ts-common/interfaces/PasswordPlainInterface":{"title":"Interface: PasswordPlainInterface","data":{"":"Password plain text interface","extended-by#Extended by":"AuthenticationLoginInterface","properties#Properties":"Property\tType\tDescription\tpassword\tstring\tPassword"}},"/reference/rockets/ts-common/interfaces/RoleAssigneesInterface":{"title":"Interface: RoleAssigneesInterface","data":{"extended-by#Extended by":"RoleInterface","properties#Properties":"Property\tType\tassignees\tReferenceAssigneeInterface<ReferenceIdInterface<string>>[]"}},"/reference/rockets/ts-common/interfaces/RoleAssignmentInterface":{"title":"Interface: RoleAssignmentInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.AuditInterface.ReferenceAssigneeInterface","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tReferenceAssigneeInterface.assignee\tdateCreated\tDate\t-\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tAuditInterface.dateDeleted\tdateUpdated\tDate\t-\tAuditInterface.dateUpdated\tid\tstring\t-\tReferenceIdInterface.id\trole\tReferenceIdInterface<string>\tRole\t-\tversion\tnumber\t-\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/RoleAssignmentCreatableInterface":{"title":"Interface: RoleAssignmentCreatableInterface","data":{"extends#Extends":"Pick<RoleAssignmentInterface, \"role\" | \"assignee\">","properties#Properties":"Property\tType\tDescription\tInherited from\tassignee\tReferenceIdInterface<string>\t-\tPick.assignee\trole\tReferenceIdInterface<string>\tRole\tPick.role"}},"/reference/rockets/ts-common/interfaces/RoleInterface":{"title":"Interface: RoleInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.RoleAssigneesInterface.AuditInterface","extended-by#Extended by":"","properties#Properties":"Property\tType\tDescription\tInherited from\tassignees\tReferenceAssigneeInterface<ReferenceIdInterface<string>>[]\t-\tRoleAssigneesInterface.assignees\tdateCreated\tDate\t-\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\t-\tAuditInterface.dateDeleted\tdateUpdated\tDate\t-\tAuditInterface.dateUpdated\tdescription\tstring\tName\t-\tid\tstring\t-\tReferenceIdInterface.id\tname\tstring\tName\t-\tversion\tnumber\t-\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/RoleUpdatableInterface":{"title":"Interface: RoleUpdatableInterface","data":{"extends#Extends":"Pick<RoleInterface, \"name\" | \"description\">","properties#Properties":"Property\tType\tDescription\tInherited from\tdescription\tstring\tName\tPick.description\tname\tstring\tName\tPick.name"}},"/reference/rockets/ts-common/interfaces/UserCreatableInterface":{"title":"Interface: UserCreatableInterface","data":{"extends#Extends":"Pick<UserInterface, \"username\" | \"email\">.Partial<Pick<UserInterface, \"active\">>.Partial<PasswordPlainInterface>","properties#Properties":"Property\tType\tDescription\tInherited from\tactive?\tboolean\t-\tPartial.active\temail\tstring\t-\tPick.email\tpassword?\tstring\tPassword\tPartial.password\tusername\tstring\t-\tPick.username"}},"/reference/rockets/ts-common/interfaces/RoleCreatableInterface":{"title":"Interface: RoleCreatableInterface","data":{"extends#Extends":"Pick<RoleInterface, \"name\" | \"description\">","properties#Properties":"Property\tType\tDescription\tInherited from\tdescription\tstring\tName\tPick.description\tname\tstring\tName\tPick.name"}},"/reference/rockets/ts-common/interfaces/UserOwnableInterface":{"title":"Interface: UserOwnableInterface","data":{"properties#Properties":"Property\tType\tuser?\tUserInterface\tuserId\tstring"}},"/reference/rockets/ts-common/interfaces/UserInterface":{"title":"Interface: UserInterface","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extends#Extends":"ReferenceIdInterface.ReferenceEmailInterface.ReferenceUsernameInterface.ReferenceActiveInterface.AuditInterface","extended-by#Extended by":"","properties#Properties":"Property\tType\tInherited from\tactive\tboolean\tReferenceActiveInterface.active\tdateCreated\tDate\tAuditInterface.dateCreated\tdateDeleted\tAuditDateDeleted\tAuditInterface.dateDeleted\tdateUpdated\tDate\tAuditInterface.dateUpdated\temail\tstring\tReferenceEmailInterface.email\tid\tstring\tReferenceIdInterface.id\tusername\tstring\tReferenceUsernameInterface.username\tversion\tnumber\tAuditInterface.version"}},"/reference/rockets/ts-common/interfaces/UserUpdatableInterface":{"title":"Interface: UserUpdatableInterface","data":{"extends#Extends":"Partial<Pick<UserCreatableInterface, \"email\" | \"password\" | \"active\">>.Partial<PasswordPlainCurrentInterface>","properties#Properties":"Property\tType\tDescription\tInherited from\tactive?\tboolean\t-\tPartial.active\temail?\tstring\t-\tPartial.email\tpassword?\tstring\tPassword\tPartial.password\tpasswordCurrent?\tstring\tCurrent Password\tPartial.passwordCurrent"}},"/reference/rockets/ts-common/variables/INVITATION_MODULE_CATEGORY_USER_KEY":{"title":"Variable: INVITATION_MODULE_CATEGORY_USER_KEY","data":{"":"const INVITATION_MODULE_CATEGORY_USER_KEY: \"user\" = 'user'","defined-in#Defined in":"ts-common/src/invitation/invitation.contants.ts:1"}},"/reference/rockets/ts-core/README":{"title":"Rockets Typescript Core","data":{"":"Core Typescript interfaces, classes and utilities.","project#Project":"","installation#Installation":"yarn add @concepta/ts-core"}},"/reference/rockets/ts-common/variables/INVITATION_MODULE_CATEGORY_ORG_KEY":{"title":"Variable: INVITATION_MODULE_CATEGORY_ORG_KEY","data":{"":"const INVITATION_MODULE_CATEGORY_ORG_KEY: \"org\" = 'org'","defined-in#Defined in":"ts-common/src/invitation/invitation.contants.ts:2"}},"/reference/rockets/ts-core/classes/NotAnErrorException":{"title":"Class: NotAnErrorException","data":{"extends#Extends":"Error","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-notanerrorexception#new NotAnErrorException()":"new NotAnErrorException(originalError, message): NotAnErrorException","parameters#Parameters":"Parameter\tType\tDefault value\toriginalError\tunknown\tundefined\tmessage\tstring\t'An error was caught that is not an Error object'","returns#Returns":"NotAnErrorException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/exceptions/not-an-error.exception.ts:10","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.originalError\tpublic\tunknown\tundefined\t-\t-\terrorCode\tpublic\tstring\t'NOT_AN_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/ts-core/functions/mapNonErrorToException":{"title":"Function: mapNonErrorToException()","data":{"":"mapNonErrorToException(originalError): Error","parameters#Parameters":"Parameter\tType\toriginalError\tunknown","returns#Returns":"Error","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/utils/map-non-error-to-exception.util.ts:3"}},"/reference/rockets/ts-core/globals":{"title":"@concepta/ts-core","data":{"classes#Classes":"NotAnErrorException","interfaces#Interfaces":"AuditDateCreatedInterface\nAuditDateDeletedInterface\nAuditDateUpdatedInterface\nAuditInterface\nAuditVersionInterface\nCreateOneInterface\nExceptionInterface\nLiteralObject\nLookupEmailInterface\nLookupIdInterface\nLookupSubjectInterface\nLookupUsernameInterface\nReferenceActiveInterface\nReferenceAssigneeInterface\nReferenceEmailInterface\nReferenceIdInterface\nReferenceQueryOptionsInterface\nReferenceSubjectInterface\nReferenceUsernameInterface\nRemoveOneInterface\nReplaceOneInterface\nType\nUpdateOneInterface","type-aliases#Type Aliases":"AuditDateCreated\nAuditDateDeleted\nAuditDateUpdated\nAuditVersion\nExceptionContext\nReferenceActive\nReferenceAssignment\nReferenceEmail\nReferenceId\nReferenceSubject\nReferenceUsername","functions#Functions":"mapNonErrorToException"}},"/reference/rockets/ts-core/interfaces/AuditDateCreatedInterface":{"title":"Interface: AuditDateCreatedInterface<T>","data":{"":"Date data was created.","extended-by#Extended by":"AuditInterface","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tAuditDateCreated","properties#Properties":"Property\tType\tdateCreated\tT"}},"/reference/rockets/ts-core/interfaces/AuditDateDeletedInterface":{"title":"Interface: AuditDateDeletedInterface<T>","data":{"":"Date data was deleted.","extended-by#Extended by":"AuditInterface","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tAuditDateDeleted","properties#Properties":"Property\tType\tdateDeleted\tT"}},"/reference/rockets/ts-core/interfaces/AuditInterface":{"title":"Interface: AuditInterface","data":{"":"Date data was created.","extends#Extends":"AuditDateCreatedInterface.AuditDateUpdatedInterface.AuditDateDeletedInterface.AuditVersionInterface","extended-by#Extended by":"","properties#Properties":"Property\tType\tInherited from\tdateCreated\tDate\tAuditDateCreatedInterface.dateCreated\tdateDeleted\tAuditDateDeleted\tAuditDateDeletedInterface.dateDeleted\tdateUpdated\tDate\tAuditDateUpdatedInterface.dateUpdated\tversion\tnumber\tAuditVersionInterface.version"}},"/reference/rockets/ts-core/interfaces/AuditDateUpdatedInterface":{"title":"Interface: AuditDateUpdatedInterface<T>","data":{"":"Date data was last updated.","extended-by#Extended by":"AuditInterface","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tAuditDateUpdated","properties#Properties":"Property\tType\tdateUpdated\tT"}},"/reference/rockets/ts-core/interfaces/CreateOneInterface":{"title":"Interface: CreateOneInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\t-\tU extends ReferenceIdInterface\t-\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\tcreate\t(object: T, options?: O) => Promise<U>"}},"/reference/rockets/ts-core/interfaces/ExceptionInterface":{"title":"Interface: ExceptionInterface","data":{"extends#Extends":"Error","extended-by#Extended by":"","properties#Properties":"Property\tType\tDescription\tInherited from\tcontext?\tExceptionContext\tAdditional context\t-\terrorCode\tstring\tThe error code.\t-\tmessage\tstring\t-\tError.message\tname\tstring\t-\tError.name\tstack?\tstring\t-\tError.stack"}},"/reference/rockets/ts-core/interfaces/AuditVersionInterface":{"title":"Interface: AuditVersionInterface<T>","data":{"":"The latest version of the data.","extended-by#Extended by":"AuditInterface","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tAuditVersion","properties#Properties":"Property\tType\tversion\tT"}},"/reference/rockets/ts-core/interfaces/LookupIdInterface":{"title":"Interface: LookupIdInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceId\tU\tReferenceIdInterface\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\tbyId\t(id: T, options?: O) => Promise<null | U>"}},"/reference/rockets/ts-core/interfaces/LiteralObject":{"title":"Interface: LiteralObject<T>","data":{"extends#Extends":"Record<string, T>","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tunknown"}},"/reference/rockets/ts-core/interfaces/LookupEmailInterface":{"title":"Interface: LookupEmailInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceEmail\tU\tReferenceIdInterface\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\tbyEmail\t(email: T, options?: O) => Promise<null | U>"}},"/reference/rockets/ts-core/interfaces/LookupSubjectInterface":{"title":"Interface: LookupSubjectInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceSubject\tU\tReferenceIdInterface\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\tbySubject\t(subject: T, options?: O) => Promise<null | U>"}},"/reference/rockets/ts-core/interfaces/LookupUsernameInterface":{"title":"Interface: LookupUsernameInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceUsername\tU\tReferenceIdInterface\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\tbyUsername\t(username: T, options?: O) => Promise<null | U>"}},"/reference/rockets/nestjs-jwt/classes/JwtModule":{"title":"Class: JwtModule","data":{"extends#Extends":"JwtModuleClass","constructors#Constructors":"","new-jwtmodule#new JwtModule()":"new JwtModule(): JwtModule","returns#Returns":"JwtModule","inherited-from#Inherited from":"JwtModuleClass.constructor","defined-in#Defined in":"node_modules/@nestjs/common/module-utils/interfaces/configurable-module-cls.interface.d.ts:12","methods#Methods":"","forfeature#forFeature()":"static forFeature(options): DynamicModule","parameters#Parameters":"Parameter\tType\toptions\tJwtOptions","returns-1#Returns":"DynamicModule","defined-in-1#Defined in":"packages/nestjs-jwt/src/jwt.module.ts:30","forroot#forRoot()":"static forRoot(options): DynamicModule","parameters-1#Parameters":"Parameter\tType\toptions\tJwtOptions","returns-2#Returns":"DynamicModule","defined-in-2#Defined in":"packages/nestjs-jwt/src/jwt.module.ts:22","forrootasync#forRootAsync()":"static forRootAsync(options): DynamicModule","parameters-2#Parameters":"Parameter\tType\toptions\tJwtAsyncOptions","returns-3#Returns":"DynamicModule","defined-in-3#Defined in":"packages/nestjs-jwt/src/jwt.module.ts:26","register#register()":"static register(options): DynamicModule","parameters-3#Parameters":"Parameter\tType\toptions\tJwtOptions","returns-4#Returns":"DynamicModule","overrides#Overrides":"JwtModuleClass.register","defined-in-4#Defined in":"packages/nestjs-jwt/src/jwt.module.ts:14","registerasync#registerAsync()":"static registerAsync(options): DynamicModule","parameters-4#Parameters":"Parameter\tType\toptions\tJwtAsyncOptions","returns-5#Returns":"DynamicModule","overrides-1#Overrides":"JwtModuleClass.registerAsync","defined-in-5#Defined in":"packages/nestjs-jwt/src/jwt.module.ts:18"}},"/reference/rockets/ts-core/interfaces/ReferenceActiveInterface":{"title":"Interface: ReferenceActiveInterface<T>","data":{"":"Identifiable by active.","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceActive","properties#Properties":"Property\tType\tactive\tT"}},"/reference/rockets/ts-core/interfaces/ReferenceAssigneeInterface":{"title":"Interface: ReferenceAssigneeInterface<T>","data":{"":"Identifiable by assignee.","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT extends ReferenceIdInterface\tReferenceIdInterface","properties#Properties":"Property\tType\tassignee\tT"}},"/reference/rockets/ts-core/interfaces/ReferenceEmailInterface":{"title":"Interface: ReferenceEmailInterface<T>","data":{"":"Identifiable by email.","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceEmail","properties#Properties":"Property\tType\temail\tT"}},"/reference/rockets/ts-core/interfaces/ReferenceIdInterface":{"title":"Interface: ReferenceIdInterface<T>","data":{"":"Identifiable by id.","see#See":"https://en.wikipedia.org/wiki/Reference_(computer_science)","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceId","properties#Properties":"Property\tType\tid\tT"}},"/reference/rockets/ts-core/interfaces/ReferenceQueryOptionsInterface":{"title":"Interface: ReferenceQueryOptionsInterface","data":{}},"/reference/rockets/ts-core/interfaces/ReferenceUsernameInterface":{"title":"Interface: ReferenceUsernameInterface<T>","data":{"":"Identifiable by username.","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceUsername","properties#Properties":"Property\tType\tusername\tT"}},"/reference/rockets/ts-core/interfaces/ReferenceSubjectInterface":{"title":"Interface: ReferenceSubjectInterface<T>","data":{"":"Identifiable by subject (JWT).","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tReferenceSubject","properties#Properties":"Property\tType\tsub\tT"}},"/reference/rockets/ts-core/interfaces/ReplaceOneInterface":{"title":"Interface: ReplaceOneInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT extends ReferenceIdInterface\t-\tU extends ReferenceIdInterface\tT\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\treplace\t(object: T, options?: O) => Promise<U>"}},"/reference/rockets/ts-core/interfaces/RemoveOneInterface":{"title":"Interface: RemoveOneInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT extends ReferenceIdInterface\t-\tU extends ReferenceIdInterface\tT\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\tremove\t(object: T, options?: O) => Promise<U>"}},"/reference/rockets/ts-core/interfaces/Type":{"title":"Interface: Type<T>","data":{"extends#Extends":"Function","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT\tunknown","constructors#Constructors":"","new-type#new Type()":"new Type(...args): T","parameters#Parameters":"Parameter\tType\t...args\tunknown[]","returns#Returns":"T","inherited-from#Inherited from":"Function.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/utils/interfaces/type.interface.ts:2","properties#Properties":"Property\tModifier\tType\tDescription\tInherited from\targuments\tpublic\tany\t-\tFunction.arguments\tcaller\tpublic\tFunction\t-\tFunction.caller\tlength\treadonly\tnumber\t-\tFunction.length\tname\treadonly\tstring\tReturns the name of the function. Function names are read-only and can not be changed.\tFunction.name\tprototype\tpublic\tany\t-\tFunction.prototype","methods#Methods":"","hasinstance#[hasInstance]()":"[hasInstance](value): boolean\nDetermines whether the given value inherits from this function if this function was used\r\nas a constructor function.A constructor function can control which objects are recognized as its instances by\r\n'instanceof' by overriding this method.","parameters-1#Parameters":"Parameter\tType\tvalue\tany","returns-1#Returns":"boolean","inherited-from-1#Inherited from":"Function.[hasInstance]","defined-in-1#Defined in":"node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:162","apply#apply()":"apply(this, thisArg, argArray?): any\nCalls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.","parameters-2#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the this object.\targArray?\tany\tA set of arguments to be passed to the function.","returns-2#Returns":"any","inherited-from-2#Inherited from":"Function.apply","defined-in-2#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:280","bind#bind()":"bind(this, thisArg, ...argArray): any\nFor a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.","parameters-3#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tAn object to which the this keyword can refer inside the new function.\t...argArray\tany[]\tA list of arguments to be passed to the new function.","returns-3#Returns":"any","inherited-from-3#Inherited from":"Function.bind","defined-in-3#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:295","call#call()":"call(this, thisArg, ...argArray): any\nCalls a method of an object, substituting another object for the current object.","parameters-4#Parameters":"Parameter\tType\tDescription\tthis\tFunction\t-\tthisArg\tany\tThe object to be used as the current object.\t...argArray\tany[]\tA list of arguments to be passed to the method.","returns-4#Returns":"any","inherited-from-4#Inherited from":"Function.call","defined-in-4#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:287","tostring#toString()":"toString(): string\nReturns a string representation of a function.","returns-5#Returns":"string","inherited-from-5#Inherited from":"Function.toString","defined-in-5#Defined in":"node_modules/typescript/lib/lib.es5.d.ts:298"}},"/reference/rockets/ts-core/interfaces/UpdateOneInterface":{"title":"Interface: UpdateOneInterface<T, U, O>","data":{"extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tT extends ReferenceIdInterface\t-\tU extends ReferenceIdInterface\tT\tO extends ReferenceQueryOptionsInterface\tReferenceQueryOptionsInterface","properties#Properties":"Property\tType\tupdate\t(object: T, options?: O) => Promise<U>"}},"/reference/rockets/ts-core/type-aliases/AuditDateDeleted":{"title":"Type Alias: AuditDateDeleted","data":{"":"AuditDateDeleted: Date | null","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/audit/audit.types.ts:3"}},"/reference/rockets/ts-core/type-aliases/AuditVersion":{"title":"Type Alias: AuditVersion","data":{"":"AuditVersion: number","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/audit/audit.types.ts:4"}},"/reference/rockets/ts-core/type-aliases/AuditDateCreated":{"title":"Type Alias: AuditDateCreated","data":{"":"AuditDateCreated: Date","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/audit/audit.types.ts:1"}},"/reference/rockets/ts-core/type-aliases/AuditDateUpdated":{"title":"Type Alias: AuditDateUpdated","data":{"":"AuditDateUpdated: Date","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/audit/audit.types.ts:2"}},"/reference/rockets/ts-core/type-aliases/ExceptionContext":{"title":"Type Alias: ExceptionContext","data":{"":"ExceptionContext: Record<string, unknown> & object","type-declaration#Type declaration":"Name\tType\toriginalError\tunknown","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/core.types.ts:1"}},"/reference/rockets/ts-core/type-aliases/ReferenceAssignment":{"title":"Type Alias: ReferenceAssignment","data":{"":"ReferenceAssignment: string","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/references/reference.types.ts:7"}},"/reference/rockets/ts-core/type-aliases/ReferenceActive":{"title":"Type Alias: ReferenceActive","data":{"":"ReferenceActive: boolean","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/references/reference.types.ts:2"}},"/reference/rockets/ts-core/type-aliases/ReferenceEmail":{"title":"Type Alias: ReferenceEmail","data":{"":"ReferenceEmail: string","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/references/reference.types.ts:3"}},"/reference/rockets/ts-core/type-aliases/ReferenceId":{"title":"Type Alias: ReferenceId","data":{"":"ReferenceId: string","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/references/reference.types.ts:1"}},"/reference/rockets/ts-core/type-aliases/ReferenceSubject":{"title":"Type Alias: ReferenceSubject","data":{"":"ReferenceSubject: string","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/references/reference.types.ts:5"}},"/reference/rockets/ts-core/type-aliases/ReferenceUsername":{"title":"Type Alias: ReferenceUsername","data":{"":"ReferenceUsername: string","defined-in#Defined in":".tmp/repos/rockets/packages/ts-core/src/references/reference.types.ts:4"}},"/reference/rockets/typeorm-common/README":{"title":"Rockets TypeORM Common","data":{"":"The common module contains commonly used TypeORM embeds, utilities.","project#Project":"","installation#Installation":"yarn add @concepta/typeorm-common"}},"/reference/rockets/typeorm-common/classes/AuditSqlLiteEntity":{"title":"Class: abstract AuditSqlLiteEntity","data":{"":"Audit SqlLite Embed","extended-by#Extended by":"CommonSqliteEntity","implements#Implements":"AuditInterface","constructors#Constructors":"","new-auditsqlliteentity#new AuditSqlLiteEntity()":"new AuditSqlLiteEntity(): AuditSqlLiteEntity","returns#Returns":"AuditSqlLiteEntity","properties#Properties":"Property\tType\tDescription\tdateCreated\tDate\tDate created.\tdateDeleted\tAuditDateDeleted\tDate deleted.\tdateUpdated\tDate\tDate updated.\tversion\tnumber\tVersion"}},"/reference/rockets/typeorm-common/classes/AuditPostgresEntity":{"title":"Class: abstract AuditPostgresEntity","data":{"":"Audit Postgres Embed","extended-by#Extended by":"CommonPostgresEntity","implements#Implements":"AuditInterface","constructors#Constructors":"","new-auditpostgresentity#new AuditPostgresEntity()":"new AuditPostgresEntity(): AuditPostgresEntity","returns#Returns":"AuditPostgresEntity","properties#Properties":"Property\tType\tDescription\tdateCreated\tDate\tDate created.\tdateDeleted\tAuditDateDeleted\tDate deleted.\tdateUpdated\tDate\tDate updated.\tversion\tnumber\tVersion"}},"/reference/rockets/typeorm-common/classes/CommonPostgresEntity":{"title":"Class: abstract CommonPostgresEntity","data":{"":"Audit Postgres Embed","extends#Extends":"AuditPostgresEntity","extended-by#Extended by":"","implements#Implements":"ReferenceIdInterface\nAuditInterface","constructors#Constructors":"","new-commonpostgresentity#new CommonPostgresEntity()":"new CommonPostgresEntity(): CommonPostgresEntity","returns#Returns":"CommonPostgresEntity","inherited-from#Inherited from":"AuditPostgresEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tdateCreated\tDate\tDate created.\tAuditInterface.dateCreated AuditPostgresEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tAuditInterface.dateDeleted AuditPostgresEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tAuditInterface.dateUpdated AuditPostgresEntity.dateUpdated\tid\tstring\t-\t-\tversion\tnumber\tVersion\tAuditInterface.version AuditPostgresEntity.version"}},"/reference/rockets/typeorm-common/classes/BaseService":{"title":"Class: abstract BaseService<Entity>","data":{"":"Abstract service","extended-by#Extended by":"LookupService\nMutateService","type-parameters#Type Parameters":"Type Parameter\tEntity extends ReferenceIdInterface","constructors#Constructors":"","new-baseservice#new BaseService()":"new BaseService<Entity>(repo): BaseService<Entity>\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<Entity>\tinstance of the repo","returns#Returns":"BaseService<Entity>","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:22","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:87","methods#Methods":"","find#find()":"find(options, queryOptions?): Promise<Promise<Entity[]>>\nFind wrapper.","parameters-1#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<Entity>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-2#Returns":"Promise<Promise<Entity[]>>","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:32","findone#findOne()":"findOne(options, queryOptions?): Promise<null | Entity>\nFind One wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<Entity>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<null | Entity>","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:51","repository#repository()":"repository(queryOptions?): Repository<Entity>\nReturn the correct repository instance.","parameters-3#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-4#Returns":"Repository<Entity>","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:69","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-4#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-5#Returns":"TransactionProxy","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:78"}},"/reference/rockets/typeorm-common/classes/EntityManagerProxy":{"title":"Class: EntityManagerProxy","data":{"constructors#Constructors":"","new-entitymanagerproxy#new EntityManagerProxy()":"new EntityManagerProxy(_entityManager): EntityManagerProxy","parameters#Parameters":"Parameter\tType\t_entityManager\tEntityManager","returns#Returns":"EntityManagerProxy","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/entity-manager.proxy.ts:8","methods#Methods":"","entitymanager#entityManager()":"entityManager(): EntityManager","returns-1#Returns":"EntityManager","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/entity-manager.proxy.ts:10","repository#repository()":"repository<T>(repository, options?): Repository<T>","type-parameters#Type Parameters":"Type Parameter\tT extends ObjectLiteral","parameters-1#Parameters":"Parameter\tType\trepository\tRepository<T>\toptions?\tQueryOptionsInterface & EntityManagerOptionInterface","returns-2#Returns":"Repository<T>","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/entity-manager.proxy.ts:14","transaction#transaction()":"transaction(options?): TransactionProxy","parameters-2#Parameters":"Parameter\tType\toptions?\tSafeTransactionOptionsInterface","returns-3#Returns":"TransactionProxy","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/entity-manager.proxy.ts:30"}},"/reference/rockets/typeorm-common/classes/CommonSqliteEntity":{"title":"Class: abstract CommonSqliteEntity","data":{"":"Audit SqlLite Embed","extends#Extends":"AuditSqlLiteEntity","extended-by#Extended by":"","implements#Implements":"ReferenceIdInterface\nAuditInterface","constructors#Constructors":"","new-commonsqliteentity#new CommonSqliteEntity()":"new CommonSqliteEntity(): CommonSqliteEntity","returns#Returns":"CommonSqliteEntity","inherited-from#Inherited from":"AuditSqlLiteEntity.constructor","properties#Properties":"Property\tType\tDescription\tInherited from\tdateCreated\tDate\tDate created.\tAuditInterface.dateCreated AuditSqlLiteEntity.dateCreated\tdateDeleted\tAuditDateDeleted\tDate deleted.\tAuditInterface.dateDeleted AuditSqlLiteEntity.dateDeleted\tdateUpdated\tDate\tDate updated.\tAuditInterface.dateUpdated AuditSqlLiteEntity.dateUpdated\tid\tstring\t-\t-\tversion\tnumber\tVersion\tAuditInterface.version AuditSqlLiteEntity.version"}},"/reference/rockets/typeorm-common/classes/LookupService":{"title":"Class: abstract LookupService<Entity>","data":{"":"Abstract lookup service","extends#Extends":"BaseService<Entity>","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tEntity extends ReferenceIdInterface","implements#Implements":"LookupIdInterface<ReferenceId, Entity, QueryOptionsInterface>","constructors#Constructors":"","new-lookupservice#new LookupService()":"new LookupService<Entity>(repo): LookupService<Entity>\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<Entity>\tinstance of the repo","returns#Returns":"LookupService<Entity>","overrides#Overrides":"BaseService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/lookup.service.ts:22","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"BaseService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:87","methods#Methods":"","byid#byId()":"byId(id, queryOptions?): Promise<null | Entity>\nGet entity for the given id.","parameters-1#Parameters":"Parameter\tType\tDescription\tid\tstring\tthe id\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-2#Returns":"Promise<null | Entity>","implementation-of#Implementation of":"LookupIdInterface.byId","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/lookup.service.ts:32","find#find()":"find(options, queryOptions?): Promise<Promise<Entity[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<Entity>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<Entity[]>>","inherited-from-1#Inherited from":"BaseService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:32","findone#findOne()":"findOne(options, queryOptions?): Promise<null | Entity>\nFind One wrapper.","parameters-3#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<Entity>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-4#Returns":"Promise<null | Entity>","inherited-from-2#Inherited from":"BaseService.findOne","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:51","repository#repository()":"repository(queryOptions?): Repository<Entity>\nReturn the correct repository instance.","parameters-4#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-5#Returns":"Repository<Entity>","inherited-from-3#Inherited from":"BaseService.repository","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:69","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-5#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-6#Returns":"TransactionProxy","inherited-from-4#Inherited from":"BaseService.transaction","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:78"}},"/reference/rockets/typeorm-common/classes/MutateService":{"title":"Class: abstract MutateService<Entity, Creatable, Updatable, Replaceable, Removable>","data":{"":"Abstract mutate service","extends#Extends":"BaseService<Entity>","extended-by#Extended by":"","type-parameters#Type Parameters":"Type Parameter\tDefault type\tEntity extends ReferenceIdInterface\t-\tCreatable extends DeepPartial<Entity>\t-\tUpdatable extends DeepPartial<Entity>\t-\tReplaceable extends Creatable\tCreatable\tRemovable extends DeepPartial<Entity>\tDeepPartial<Entity>","implements#Implements":"CreateOneInterface<Creatable, Entity>\nUpdateOneInterface<Updatable & ReferenceIdInterface, Entity>\nReplaceOneInterface<Replaceable & ReferenceIdInterface, Entity>\nRemoveOneInterface<Removable & ReferenceIdInterface, Entity>","constructors#Constructors":"","new-mutateservice#new MutateService()":"new MutateService<Entity, Creatable, Updatable, Replaceable, Removable>(repo): MutateService<Entity, Creatable, Updatable, Replaceable, Removable>\nConstructor","parameters#Parameters":"Parameter\tType\tDescription\trepo\tRepository<Entity>\tinstance of the repo","returns#Returns":"MutateService<Entity, Creatable, Updatable, Replaceable, Removable>","overrides#Overrides":"BaseService.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:44","properties#Properties":"Property\tModifier\tType\tcreateDto\tabstract\tType<Creatable>\tupdateDto\tabstract\tType<Updatable>","accessors#Accessors":"","metadata#metadata":"get protected metadata(): EntityMetadata\nInternal","returns-1#Returns":"EntityMetadata","inherited-from#Inherited from":"BaseService.metadata","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:87","methods#Methods":"","create#create()":"create(data, queryOptions?): Promise<Entity>\nCreate one","parameters-1#Parameters":"Parameter\tType\tDescription\tdata\tCreatable\tthe reference to create\tqueryOptions?\tQueryOptionsInterface\t-","returns-2#Returns":"Promise<Entity>the created reference","implementation-of#Implementation of":"CreateOneInterface.create","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:54","find#find()":"find(options, queryOptions?): Promise<Promise<Entity[]>>\nFind wrapper.","parameters-2#Parameters":"Parameter\tType\tDescription\toptions\tFindManyOptions<Entity>\tFind many options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-3#Returns":"Promise<Promise<Entity[]>>","inherited-from-1#Inherited from":"BaseService.find","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:32","findbyid#findById()":"protected findById(id, queryOptions?): Promise<Entity>\nInternal","parameters-3#Parameters":"Parameter\tType\tid\tstring\tqueryOptions?\tQueryOptionsInterface","returns-4#Returns":"Promise<Entity>","defined-in-4#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:203","findone#findOne()":"findOne(options, queryOptions?): Promise<null | Entity>\nFind One wrapper.","parameters-4#Parameters":"Parameter\tType\tDescription\toptions\tFindOneOptions<Entity>\tFind one options\tqueryOptions?\tQueryOptionsInterface\tQuery options","returns-5#Returns":"Promise<null | Entity>","inherited-from-2#Inherited from":"BaseService.findOne","defined-in-5#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:51","remove#remove()":"remove(data, queryOptions?): Promise<Entity>\nRemove one","parameters-5#Parameters":"Parameter\tType\tDescription\tdata\tRemovable & ReferenceIdInterface<string>\tthe reference data to remove\tqueryOptions?\tQueryOptionsInterface\tquery options","returns-6#Returns":"Promise<Entity>the removed reference","implementation-of-1#Implementation of":"RemoveOneInterface.remove","defined-in-6#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:125","replace#replace()":"replace(data, queryOptions?): Promise<Entity>\nReplace one","parameters-6#Parameters":"Parameter\tType\tDescription\tdata\tReplaceable & ReferenceIdInterface<string>\tthe reference data to replace\tqueryOptions?\tQueryOptionsInterface\t-","returns-7#Returns":"Promise<Entity>the replaced reference","implementation-of-2#Implementation of":"ReplaceOneInterface.replace","defined-in-7#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:99","repository#repository()":"repository(queryOptions?): Repository<Entity>\nReturn the correct repository instance.","parameters-7#Parameters":"Parameter\tType\tDescription\tqueryOptions?\tQueryOptionsInterface\tOptions","returns-8#Returns":"Repository<Entity>","inherited-from-3#Inherited from":"BaseService.repository","defined-in-8#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:69","transaction#transaction()":"transaction(options?): TransactionProxy\nReturn a transaction instance.","parameters-8#Parameters":"Parameter\tType\tDescription\toptions?\tSafeTransactionOptionsInterface\tOptions","returns-9#Returns":"TransactionProxy","inherited-from-4#Inherited from":"BaseService.transaction","defined-in-9#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/base.service.ts:78","transform#transform()":"protected transform(data, _queryOptions?): Promise<DeepPartial<Entity>>\nInternal","parameters-9#Parameters":"Parameter\tType\tdata\tDeepPartial<Entity>\t_queryOptions?\tQueryOptionsInterface","returns-10#Returns":"Promise<DeepPartial<Entity>>","defined-in-10#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:193","update#update()":"update(data, queryOptions?): Promise<Entity>\nUpdate one","parameters-10#Parameters":"Parameter\tType\tDescription\tdata\tUpdatable & ReferenceIdInterface<string>\tthe reference data to update\tqueryOptions?\tQueryOptionsInterface\t-","returns-11#Returns":"Promise<Entity>the updated reference","implementation-of-3#Implementation of":"UpdateOneInterface.update","defined-in-11#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:74","validate#validate()":"protected validate<T>(type, data): Promise<T>\nInternal","type-parameters-1#Type Parameters":"Type Parameter\tT extends ReferenceIdInterface<string> | object","parameters-11#Parameters":"Parameter\tType\ttype\tType<T>\tdata\tT","returns-12#Returns":"Promise<T>","defined-in-12#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/services/mutate.service.ts:168"}},"/reference/rockets/typeorm-common/classes/ReferenceIdNoMatchException":{"title":"Class: ReferenceIdNoMatchException","data":{"extends#Extends":"Error","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-referenceidnomatchexception#new ReferenceIdNoMatchException()":"new ReferenceIdNoMatchException(entityName, id, message): ReferenceIdNoMatchException","parameters#Parameters":"Parameter\tType\tDefault value\tentityName\tstring\tundefined\tid\tstring\tundefined\tmessage\tstring\t'No match for %s reference id %s.'","returns#Returns":"ReferenceIdNoMatchException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/exceptions/reference-id-no-match.exception.ts:15","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.entityName\tpublic\tstring\tundefined\t-\t-\tcontext.id\tpublic\tstring\tundefined\t-\t-\terrorCode\tpublic\tstring\t'REFERENCE_ID_NO_MATCH'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/typeorm-common/classes/ReferenceLookupException":{"title":"Class: ReferenceLookupException","data":{"extends#Extends":"Error","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-referencelookupexception#new ReferenceLookupException()":"new ReferenceLookupException(entityName, originalError, message): ReferenceLookupException","parameters#Parameters":"Parameter\tType\tDefault value\tentityName\tstring\tundefined\toriginalError\tunknown\tundefined\tmessage\tstring\t'Error while trying to lookup a %s reference'","returns#Returns":"ReferenceLookupException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/exceptions/reference-lookup.exception.ts:15","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.entityName\tpublic\tstring\tundefined\t-\t-\tcontext.originalError\tpublic\tError\tundefined\t-\t-\terrorCode\tpublic\tstring\t'REFERENCE_LOOKUP_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/typeorm-common/classes/ReferenceMutateException":{"title":"Class: ReferenceMutateException","data":{"extends#Extends":"Error","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-referencemutateexception#new ReferenceMutateException()":"new ReferenceMutateException(entityName, originalError, message): ReferenceMutateException","parameters#Parameters":"Parameter\tType\tDefault value\tentityName\tstring\tundefined\toriginalError\tunknown\tundefined\tmessage\tstring\t'Error while trying to mutate a %s reference'","returns#Returns":"ReferenceMutateException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/exceptions/reference-mutate.exception.ts:15","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.entityName\tpublic\tstring\tundefined\t-\t-\tcontext.originalError\tpublic\tError\tundefined\t-\t-\terrorCode\tpublic\tstring\t'REFERENCE_MUTATE_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/typeorm-common/classes/ReferenceValidationException":{"title":"Class: ReferenceValidationException","data":{"extends#Extends":"Error","implements#Implements":"ExceptionInterface","constructors#Constructors":"","new-referencevalidationexception#new ReferenceValidationException()":"new ReferenceValidationException(entityName, validationErrors, message): ReferenceValidationException","parameters#Parameters":"Parameter\tType\tDefault value\tentityName\tstring\tundefined\tvalidationErrors\tValidationError[]\tundefined\tmessage\tstring\t'Data for the %s reference is not valid'","returns#Returns":"ReferenceValidationException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/exceptions/reference-validation.exception.ts:16","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tobject\tundefined\tAdditional context\t-\tcontext.entityName\tpublic\tstring\tundefined\t-\t-\tcontext.validationErrors\tpublic\tValidationError[]\tundefined\t-\t-\terrorCode\tpublic\tstring\t'REFERENCE_VALIDATION_ERROR'\tThe error code.\t-\tmessage\tpublic\tstring\tundefined\t-\tExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-1#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-1#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-1#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/typeorm-common/classes/RepositoryProxy":{"title":"Class: RepositoryProxy<T>","data":{"type-parameters#Type Parameters":"Type Parameter\tT extends ObjectLiteral","constructors#Constructors":"","new-repositoryproxy#new RepositoryProxy()":"new RepositoryProxy<T>(targetRepository): RepositoryProxy<T>","parameters#Parameters":"Parameter\tType\ttargetRepository\tRepository<T>","returns#Returns":"RepositoryProxy<T>","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/repository.proxy.ts:10","methods#Methods":"","entitymanager#entityManager()":"entityManager(): EntityManager","returns-1#Returns":"EntityManager","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/repository.proxy.ts:14","repository#repository()":"repository(queryOptions?): Repository<T>","parameters-1#Parameters":"Parameter\tType\tqueryOptions?\tQueryOptionsInterface","returns-2#Returns":"Repository<T>","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/repository.proxy.ts:18","transaction#transaction()":"transaction(options?): TransactionProxy","parameters-2#Parameters":"Parameter\tType\toptions?\tSafeTransactionOptionsInterface","returns-3#Returns":"TransactionProxy","defined-in-3#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/repository.proxy.ts:25"}},"/reference/rockets/typeorm-common/classes/TransactionProxy":{"title":"Class: TransactionProxy","data":{"constructors#Constructors":"","new-transactionproxy#new TransactionProxy()":"new TransactionProxy(entityManager, options?): TransactionProxy","parameters#Parameters":"Parameter\tType\tentityManager\tEntityManager\toptions?\tSafeTransactionOptionsInterface","returns#Returns":"TransactionProxy","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/transaction.proxy.ts:16","methods#Methods":"","commit#commit()":"commit<T>(runInTransaction): Promise<T>","type-parameters#Type Parameters":"Type Parameter\tT","parameters-1#Parameters":"Parameter\tType\trunInTransaction\tTransactionCallback<T>","returns-1#Returns":"Promise<T>","defined-in-1#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/transaction.proxy.ts:36","repository#repository()":"repository<E>(targetRepository): Repository<E>","type-parameters-1#Type Parameters":"Type Parameter\tE extends ObjectLiteral","parameters-2#Parameters":"Parameter\tType\ttargetRepository\tRepository<E>","returns-2#Returns":"Repository<E>","defined-in-2#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/proxies/transaction.proxy.ts:24"}},"/reference/rockets/typeorm-common/globals":{"title":"@concepta/typeorm-common","data":{"classes#Classes":"AuditPostgresEntity\nAuditSqlLiteEntity\nBaseService\nCommonPostgresEntity\nCommonSqliteEntity\nEntityManagerProxy\nLookupService\nMutateService\nReferenceIdNoMatchException\nReferenceLookupException\nReferenceMutateException\nReferenceValidationException\nRepositoryProxy\nTransactionProxy","interfaces#Interfaces":"QueryOptionsInterface\nSafeTransactionOptionsInterface","type-aliases#Type Aliases":"RunInTransactionCallback","functions#Functions":"createEntityManagerMock"}},"/reference/rockets/typeorm-common/functions/createEntityManagerMock":{"title":"Function: createEntityManagerMock()","data":{"":"createEntityManagerMock(): EntityManagerMock","returns#Returns":"EntityManagerMock","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/testing/utils/create-entity-manager.mock.ts:1"}},"/reference/rockets/typeorm-common/interfaces/QueryOptionsInterface":{"title":"Interface: QueryOptionsInterface","data":{"properties#Properties":"Property\tType\ttransaction?\tTransactionProxy"}},"/reference/rockets/typeorm-common/interfaces/SafeTransactionOptionsInterface":{"title":"Interface: SafeTransactionOptionsInterface","data":{"properties#Properties":"Property\tType\tisolationLevel?\tIsolationLevel\tstrict?\tboolean\ttransaction?\tTransactionProxy"}},"/reference/rockets/typeorm-common/type-aliases/RunInTransactionCallback":{"title":"Type Alias: RunInTransactionCallback()<T>","data":{"":"RunInTransactionCallback<T>: (entityManager) => Promise<T>","type-parameters#Type Parameters":"Type Parameter\tT","parameters#Parameters":"Parameter\tType\tentityManager\tEntityManager | undefined","returns#Returns":"Promise<T>","defined-in#Defined in":".tmp/repos/rockets/packages/typeorm-common/src/typeorm-common.types.ts:3"}},"/reference/rockets/nestjs-access-control/README":{"title":"Rockets NestJS Access Control","data":{"":"Advanced access control guard for NestJS with optional per-request filtering.","project#Project":"Tutorials\nGetting Started with Access Control\nInstallation\nBasic Setup\nExample\nSimple User Entity\nYour custom ACL rules\nYour custom AccessControlService\nImplement on your controller (Passport guard example)\nImport the module into your app\nHow-To Guides\nCreating a Custom Access Query Service\nExample of Importing Dependencies in AccessControlModule\nUsing Dependency in Access Query Service\nDisable AccessControlGuard\nCreate a custom AccessControlGuard\nUsing @AccessControlCreateOne Decorator\nSetting Permissions\nUsing in a Controller\nUsing @AccessControlUpdateOne Decorator\nSetting Permissions\nUsing in a Controller\nUsing @AccessControlReadOne Decorator\nSetting Permissions\nUsing in a Controller\nUsing in a Controller to get own information only\nUsing @AccessControlDeleteOne Decorator\nSetting Permissions\nUsing in a Controller\nUsing @AccessControlCreateMany Decorator\nSetting Permissions\nUsing in a Controller\nUsing @AccessControlReadMany Decorator\nSetting Permissions\nUsing in a Controller\nReference\nNestJS AuthGuard Pattern\nACL Module\nExplanation\nIMPORTANT\nWhat is Access Control?\nHow AccessControlService Works\nKey Responsibilities\nHow Access Query Service Works\nOverview\nCustom Logic in the Service\nHow AccessControlGuard Works\nPractical Examples\nBenefits\nWhy Use Access Control?\nSynchronous vs Asynchronous Registration\nGlobal vs Feature-Specific Registration","getting-started-with-access-control#Getting Started with Access Control":"","installation#Installation":"Install the @concepta/nestjs-access-control package using yarn or npm:\nyarn add @concepta/nestjs-access-control\nnpm install @concepta/nestjs-access-control","basic-setup#Basic Setup":"To set up the @concepta/nestjs-access-control module, you need to\ndefine your access control rules, create a custom access query service,\nand import the AccessControlModule into your app module. This ensures\nthat your application can enforce access control policies based on the\ndefined rules and services.","example#Example":"These are very rough examples. We intend to improve them ASAP.","simple-user-entity#Simple User Entity":"Define a simple User entity using TypeORM and class-transformer.\nimport { Entity, Column, ManyToMany, Unique } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Role } from '../auth/role.entity';\n@Entity()\n@Unique(['username'])\nexport class User {\n  @Column()\n  username!: string;\n  @Column()\n  @Exclude()\n  password!: string;\n  @Column()\n  @Exclude()\n  salt!: string;\n  @ManyToMany(() => Role, (role) => role.users, {\n    eager: true,\n    onDelete: 'CASCADE',\n  })\n  roles!: Role[];\n}","your-custom-acl-rules#Your custom ACL rules":"Define custom ACL rules as documented by the\naccesscontrol library.Here we are defining a custom AccessControl to contains the rules of\nour authorization system. The acRules will be used to grant specific\npermissions of a resource, to a defined role.Please make sure to review a Important section to understand\nimportant concepts of Access Control.\n// app.acl.ts\nimport { AccessControl } from 'accesscontrol';\n/**\n * All the possible roles of the system.\n */\nexport enum AppRole {\n  SuperAdmin = 'SuperAdmin',\n  User = 'User',\n}\n/**\n * All the possible resources of the system.\n */\nexport enum AppResource {\n  User = 'user',\n  UserList = 'user-list',\n}\nconst allResources = Object.values(AppResource);\nconst allRoles = Object.values(AppRole);\nexport const acRules: AccessControl = new AccessControl();\n// admins can do whatever they want\nacRules\n  .grant([AppRole.SuperAdmin])\n  .resource(allResources)\n  .createOwn()\n  .createAny()\n  .readOwn()\n  .readAny()\n  .updateOwn()\n  .updateAny()\n  .deleteOwn()\n  .deleteAny();\n// regular users can read self\nacRules.grant(AppRole.User).resource([AppResource.User]).readOwn();\n// make sure nobody can delete themselves\nacRules.deny(allRoles).resource(AppResource.User).deleteOwn();","your-custom-accesscontrolservice#Your custom AccessControlService":"The access control service is not required in the settings, since we already\nhave a default AccessControlService in the module. However, let's create a\nnew one for the purposes of this tutorial. AccessControlService is responsible\nfor getting the user and its roles.In the following example, we are assuming that our request as a user property\nwith the roles specified on it, the method getUserRoles will be used internally\non our default AccessControlGuard to check if the combination of the resource,\nroles and permissions are valid.The ACService is a provider, and you can be inject any other provider you may\nneed to get the correct user and its roles.\nimport { AccessControlService } from 'nestjs-access-control';\nimport { ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { User } from '../user/user.entity';\nexport class ACService implements AccessControlService {\n  async getUser<T>(context: ExecutionContext): Promise<T> {\n    const request = context.switchToHttp().getRequest();\n    // request.user should be something like this\n    // { id: '1', username: 'john', roles: [{ id: '1', name: 'User' }] }\n    return request.user as T;\n  }\n  async getUserRoles(context: ExecutionContext): Promise<string | string[]> {\n    const user = await this.getUser<User>(context);\n    if (!user || !user.roles) throw new UnauthorizedException();\n    return user.roles.map((role) => role.name);\n  }\n}","implement-on-your-controller-passport-guard-example#Implement on your controller (Passport guard example)":"The guard decorators, will be used to apply the specified actions for that endpoint.\nfor example:\n @AccessControlReadMany(AppResource.UserList)\n  async getMany(@Query() query: unknown) {\n    // ...\n  }\nFor this code, we are applying the AccessControlReadMany\ndecorator to the getMany endpoint. This means that only users\nwith a role that has been granted the read permission for the\nAppResource.UserList resource can get the list of users.For example, you need to grant the read permission to the\nUser role for the UserList resource:\nacRules.grant(AppRole.User).resource([AppResource.User]).readOwn();\n// or\nacRules.grant(AppRole.User).resource([AppResource.User]).readAny();\nCheck Important section to understand the\ndifference between own and any.Let's create our controller.\nimport { ApiTags } from '@nestjs/swagger';\nimport { Controller, Body, Query, Param } from '@nestjs/common';\nimport {\n  AccessControlCreateMany,\n  AccessControlCreateOne,\n  AccessControlDeleteOne,\n  AccessControlReadMany,\n  AccessControlReadOne,\n  AccessControlRecoverOne,\n  AccessControlUpdateOne,\n} from '@concepta/nestjs-access-control';\nimport { UserResource } from './user.types';\nimport { UserCreateDto } from './dto/user-create.dto';\nimport { UserCreateManyDto } from './dto/user-create-many.dto';\nimport { UserUpdateDto } from './dto/user-update.dto';\n/**\n * User controller.\n */\n@Controller('user')\n@ApiTags('user')\nexport class UserController {\n  /**\n   * Get many\n   */\n  @AccessControlReadMany(AppResource.UserList)\n  async getMany(@Query() query: unknown) {\n    // ...\n  }\n  /**\n   * Get one\n   */\n  @AccessControlReadOne(AppResource.User)\n  async getOne(@Param('id') id: string) {\n    // ...\n  }\n  /**\n   * Create many\n   */\n  @AccessControlCreateMany(AppResource.UserList)\n  async createMany(@Body() userCreateManyDto: UserCreateManyDto) {\n    // ...\n  }\n  /**\n   * Create one\n   */\n  @AccessControlCreateOne(AppResource.User)\n  async createOne(@Body() userCreateDto: UserCreateDto) {\n    // ...\n  }\n  /**\n   * Update one\n   */\n  @AccessControlUpdateOne(AppResource.User)\n  async updateOne(\n    @Param('id') userId: string,\n    @Body() userUpdateDto: UserUpdateDto,\n  ) {\n    // ...\n  }\n  /**\n   * Delete one\n   */\n  @AccessControlDeleteOne(AppResource.User)\n  async deleteOne(@Param('id') id: string) {\n    // ...\n  }\n  /**\n   * Recover one\n   */\n  @AccessControlRecoverOne(AppResource.User)\n  async recoverOne(@Param('id') id: string) {\n    // ...\n  }\n}","import-the-module-into-your-app#Import the module into your app":"Import and register the AccessControlModule in your app module.\nsettings.rules is the only property mandatory.\n//...\n@Module({\n  imports: [\n    // ...\n    AccessControlModule.forRoot({\n      settings: { rules: acRules },\n      service: new ACService(),\n    }),\n    // ...\n  ],\n  controllers: [UserController],\n  providers: [],\n})\nexport class AppModule {}","creating-a-custom-access-query-service#Creating a Custom Access Query Service":"AccessQueryService is a service that will be used to check\nif the user can access the resource. Any custom validation\nfor a specific endpoint or a controller should be done by creating a\ncustom query service. The query service created should be added to\nthe queryServices settings on module definition to make sure it will\nbecome a provider to be injected in any other service. Once this is\ndone, we can go ahead and add the query for any endpoint of the\ncontroller with @AccessControlQuery decorator.To create a custom query service, follow these steps:\nDefine the Service: Create a new service class that\nimplements CanAccess from @concepta/nestjs-access-control.\nThe canAccess method will provide you all information\nyou need to manage your access.\nIn the following example, we check if a password update for\nthe User resource is being performed by the user that is trying\nto update it.\n//...\nexport class MyUserAccessQueryService implements CanAccess {\n  async canAccess(context: AccessControlContext): Promise<boolean> {\n    const { resource, action } = context.getQuery();\n    if (resource === AppResource.User && action === ActionEnum.UPDATE) {\n      const userAuthorizedDto = plainToInstance(UserDto, context.getUser());\n      const params = context.getRequest('params');\n      const userParamDto = plainToInstance(UserDto, params);\n      const body = context.getRequest('body');\n      const userPasswordDto = plainToInstance(UserPasswordDto, body);\n      if (userParamDto.id && userPasswordDto?.password) {\n        return userParamDto.id === userAuthorizedDto.id;\n      }\n    }\n    // does not apply\n    return true;\n  }\n}\nRegister the Service: Register the custom service in your module.\n//...\nAccessControlModule.forRoot({\n  settings: { rules: acRules },\n  queryServices: [MyUserAccessQueryService],\n}),\n//...\nSet AccessControlQuery: Set AccessControlQuery to the controller.\n@Controller('user')\n@ApiTags('user')\nexport class UserController {\n  //...\n  @AccessControlUpdateOne(AppResource.User)\n  @AccessControlQuery({\n    service: MyUserAccessQueryService,\n  })\n  async updateOne(\n    @Param('id') userId: string,\n    @Body() userUpdateDto: UserUpdateDto,\n  ) {\n    // ...\n  }\n  //...\n}","example-of-importing-dependencies-in-accesscontrolmodule#Example of Importing Dependencies in AccessControlModule":"When creating access query services that depend on other modules,\nyou need to ensure that these dependencies are imported into the\nAccessControlModule. Here's an example of how to set this up:\nimport { Module } from '@nestjs/common';\nimport { AccessControlModule } from '@concepta/nestjs-access-control';\nimport { SomeModule } from './some.module';\nimport { AnotherModule } from './another.module';\nimport { SomeAccessQueryService } from './some-access-query.service';\nimport { AnotherAccessQueryService } from './another-access-query.service';\n@Module({\n  imports: [\n    SomeModule,\n    AnotherModule,\n    AccessControlModule.forRoot({\n      settings: { rules: acRules },\n      imports: [SomeModule, AnotherModule],\n      queryServices: [SomeAccessQueryService, AnotherAccessQueryService],\n    }),\n  ],\n})\nexport class AppModule {}","using-dependency-in-access-query-service#Using Dependency in Access Query Service":"Here's an example of how to use a dependency in an access query service:\nimport { Injectable } from '@nestjs/common';\nimport {\n  CanAccess,\n  AccessControlContext,\n} from '@concepta/nestjs-access-control';\nimport { SomeService } from './some.service';\n@Injectable()\nexport class SomeAccessQueryService implements CanAccess {\n  constructor(private readonly someService: SomeService) {}\n  async canAccess(context: AccessControlContext): Promise<boolean> {\n    const user = context.getUser();\n    // Use someService to check if the user can access the resource\n    return this.someService.canUserAccessResource(user);\n  }\n}","disable-accesscontrolguard#Disable AccessControlGuard":"You can disable all access control guards globally if needed.\nThis can be useful for development or testing purposes.\nTo disable the guards, set the appGuard option to false\nin the AccessControlModule configuration:\nAccessControlModule.forRoot({\n  settings: { rules: acRules },\n  appGuard: false,\n}),","create-a-custom-accesscontrolguard#Create a custom AccessControlGuard":"This module contains a default AccessControlGuard that can\nbe used to protect endpoints with one of the many @AccessControl\ndecorators. This guard will use the logic at\nAccessControlService and AccessQueryService to check permissions.However, you can create a custom guard if you need to. By creating a\nclass that extends CanActivate from @nestjs/common, you can create\na custom guard that will be used to protect your endpoints.Please keep in mind that the guard will be set globally for all endpoints.\n@Injectable()\nexport class MyAccessControlGuard implements CanActivate {\n  public async canActivate(context: ExecutionContext): Promise<boolean> {\n    // your custom logic here\n    return true;\n  }\n}\nAccessControlModule.forRoot({\n      settings: { rules: acRules },\n      appGuard: new MyAccessControlGuard(),\n    }),","using-accesscontrolcreateone-decorator#Using @AccessControlCreateOne Decorator":"The @AccessControlCreateOne decorator is used to grant create\npermissions for a single resource. This decorator is a shortcut for\ndefining access control grants for creating one resource.","setting-create-one-permissions#Setting Create One Permissions":"First, define your access control rules using the AccessControl\nlibrary. This example shows how to set permissions for different roles.\n//...\nac.grant(AppRole.User)\n  .createOwn(AppResource.User);\n//...","using-create-one-in-a-controller#Using Create One in a Controller":"Next, use the @AccessControlCreateOne decorator in your controller\nto protect the route that handles the creation of a single resource.\n  @Post()\n  @AccessControlCreateOne(AppResource.User)\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }","using-accesscontrolupdateone-decorator#Using @AccessControlUpdateOne Decorator":"The @AccessControlUpdateOne decorator is used to grant update\npermissions for a single resource. This decorator is a shortcut for\ndefining access control grants for updating one resource.","setting-update-one-permissions#Setting Update One Permissions":"First, define your access control rules using the AccessControl\nlibrary. This example shows how to set permissions for different roles.\nac.grant(AppRole.User)\n  .updateOwn(AppResource.User)\n//...","using-update-one-in-a-controller#Using Update One in a Controller":"Next, use the @AccessControlUpdateOne decorator in your controller\nto protect the route that handles the updating of a single resource.\n  @Put(':id')\n  @AccessControlUpdateOne(AppResource.User)\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }","using-accesscontrolreadone-decorator#Using @AccessControlReadOne Decorator":"The @AccessControlReadOne decorator grants read permissions for a single\nresource. It is a shortcut for defining access control grants for reading one resource.","setting-read-one-permissions#Setting Read One Permissions":"First, define your access control rules using the AccessControl library.\nThis example shows how to set permissions for different roles.Please refer to the Important Notes Section for better\nunderstanding of the permissions.\n//...\n// User can only read their own information\nac.grant(AppRole.User)\n  .readOwn(AppResource.User)\n// Admin can read any information of resource User\n// (however you still need to specify this authorization on AccessControlReadOne)\nac.grant(AppRole.Admin)\n  .readAny(AppResource.User)\n// ...","using-read-one-in-a-controller#Using Read One in a Controller":"Next, use the @AccessControlReadOne decorator in your controller\nto protect the route that handles the reading of a single resource.\n//...\n  @Get(':id')\n  @AccessControlReadOne(AppResource.User)\n  getOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n//...","using-in-a-controller-to-get-own-information-only#Using in a Controller to get own information only":"User that contains Role User can only get their own information.\nUser that contains Role Admin can get any information of resource User.\n//...\n  @Get(':id')\n  @AccessControlReadOne(AppResource.User)\n  getOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n//...","using-accesscontroldeleteone-decorator#Using @AccessControlDeleteOne Decorator":"The @AccessControlDeleteOne decorator is used to grant delete\npermissions for a single resource. This decorator is a shortcut\nfor defining access control grants for deleting one resource.","setting-delete-one-permissions#Setting Delete One Permissions":"First, define your access control rules using the AccessControl\nlibrary. This example shows how to set permissions for different roles.\n//...\nac.grant(AppRole.User)\n  .deleteOwn(AppResource.User)\n//...","using-delete-one-in-a-controller#Using Delete One in a Controller":"Next, use the @AccessControlDeleteOne decorator in your controller\nto protect the route that handles the deletion of a single resource.\n//...\n  @Delete(':id')\n  @AccessControlDeleteOne(AppResource.User)\n  deleteOne(@Param('id') id: string) {\n    return this.userService.delete(id);\n  }\n//...","using-accesscontrolcreatemany-decorator#Using @AccessControlCreateMany Decorator":"The @AccessControlCreateMany decorator is used to grant creat\npermissions for multiple resources. This decorator is a shortcut\nfor defining access control grants for creating many resources.","setting-create-many-permissions#Setting Create Many Permissions":"First, define your access control rules using the AccessControl\nlibrary. This example shows how to set permissions for different roles.\n//...\nac.grant(AppRole.User)\n  .createAny(AppResource.User)\n//...","using-create-many-in-a-controller#Using Create Many in a Controller":"Next, use the @AccessControlCreateMany decorator in your controller\nto protect the route that handles the creation of multiple resources.\n//...\n  @Post('bulk')\n  @AccessControlCreateMany(AppResource.User)\n  createMany(@Body() createUsersDto: CreateUsersDto) {\n    return this.userService.createMany(createUsersDto);\n  }\n//...","using-accesscontrolreadmany-decorator#Using @AccessControlReadMany Decorator":"The @AccessControlReadMany decorator is used to grant read\npermissions for multiple resources. This decorator is a shortcut for\ndefining access control grants for reading multiple resources.","setting-read-many-permissions#Setting Read Many Permissions":"First, define your access control rules using the AccessControl library.\nThis example shows how to set permissions for different roles.\n//...\nac.grant(AppRole.User)\n  .readAny(AppResource.Article)\n// ...","using-read-many-in-a-controller#Using Read Many in a Controller":"Next, use the @AccessControlReadMany decorator in your controller to\nprotect the route that handles the reading of multiple resources.\n//...\n  @Get(':id')\n  @AccessControlReadMany(AppResource.Article)\n  getMany() {\n    return this.articleService.getMany();\n  }\n//...","reference#Reference":"","nestjs-authguard-pattern#NestJS AuthGuard Pattern":"For more details on the AuthGuard pattern,\ncheck the official NestJS documentation.","acl-module#ACL Module":"For more details on the accesscontrol module,\ncheck the official accesscontrol documentation.","explanation#Explanation":"","important#IMPORTANT":"When building your ACL, you need to remember these!\nThis module only helps you apply a pattern. There is no magic;\nyou are ultimately responsible for\nchecking that your ACL works in all contexts.\nHere is the pattern:\nGiving any access implies that the role IS NOT restricted by ownership,\nor other rules, to that action/resource combination.\nGiving own access implies that the role IS restricted by ownership to\nthat action/resource combination (it is often required to enforce this\nrule with a filter to check the data layer when not all information\nrequired to check ownership exists in the parameters or query string.)\n!!! Important !!!\nAll roles that are given any access to a resource will NOT be passed\nthrough access filters since any implies they should have all access.","what-is-access-control#What is Access Control?":"Access control in a software context refers to the selective restriction\nof access to resources. It ensures that only authorized users can access\nor modify data within an application.","how-accesscontrolservice-works#How AccessControlService Works":"The AccessControlService is a crucial component in the access control system.\nIt is responsible for retrieving user information and their associated roles,\nwhich are then used by the AccessControlGuard to enforce access control rules.\nHere’s a detailed breakdown of its functionality:","key-responsibilities#Key Responsibilities":"User Retrieval:\nThe AccessControlService provides a method to retrieve the current user\nfrom the execution context. This is typically done by extracting the user\ninformation from the request object.\nRole Retrieval:\nIt also provides a method to retrieve the roles associated with the current\nuser. This is essential for determining what actions the user is permitted\nto perform.","how-access-query-service-works#How Access Query Service Works":"The Query Services are services that should be used to define authorization\nlogic for a specific endpoint or controller. we can either have a query service\nthat runs for all endpoints, or we can create one for each endpoint or\ncontroller that we want to protect.","overview#Overview":"The MyUserAccessQueryService is designed to manage and control user access\npermissions within your application. The service should be added to the\n@AccessControlQuery decorator to protect the route that handles the access\nof a single or multiple resource. Once the service is defined, the\nAccessControlGuard will use this logic internally to check if the user is\nauthorized to access the resource.","custom-logic-in-the-service#Custom Logic in the Service":"canAccess Method:\nThis method is used to determine if a user can access a\nparticular resource.\nYou can add custom logic to check the user's role and the action\nthey want to perform.\nFor example, you might allow users with a 'manager' role to read\nand update data, but restrict 'employee' roles to only read data.\ncanUpdatePassword Method:\nThis method is used to control whether a user can update their password.\nYou can add custom logic to ensure that users can only update their own\npasswords.\nFor example, you might check if the user is trying to update their own\npassword and deny the request if they are trying to update someone\nelse's password.","how-accesscontrolguard-works#How AccessControlGuard Works":"The AccessControlGuard uses the methods provided by\nAccessControlService and AccessQueryService to enforce access\ncontrol rules. Here’s how it works:\nGuard Initialization:\nWhen a request is made to a protected route, the AccessControlGuard\nis triggered.\nThe guard gets what permission was granted for what resource.\nRole Verification:\nThe guard then calls the getUserRoles method to get the roles of the\nuser.\nBased on the roles, the guard checks if the user has the necessary\npermissions to access the requested resource.\nAccess Queries Check:\nThe guard then uses the access control queries defined to determine\nif the user is allowed to perform the requested action on the resource.\nIf the user has the required permissions, the request is allowed to\nproceed. Otherwise, it is denied.","practical-examples#Practical Examples":"Role-Based Access:\nManagers can view and edit all employee records.\nEmployees can only view their own records and cannot edit them.\nPassword Management:\nUsers can change their own passwords but cannot change the passwords\nof other users.\nAdministrators might have the ability to reset passwords for any user.","benefits#Benefits":"Enhanced Security: By implementing custom access control logic,\nyou can ensure that sensitive data is only accessible to authorized users.\nFlexibility: The service allows you to define complex access rules\nthat can be tailored to your application's specific needs.\nCompliance: Proper access control helps in meeting regulatory\nrequirements by ensuring that only authorized users can access or\nmodify data.","why-use-access-control#Why Use Access Control?":"Implementing access control ensures that your application maintains\ndata integrity and security by allowing only authorized users to\nperform specific actions.","synchronous-vs-asynchronous-registration#Synchronous vs Asynchronous Registration":"Synchronous Registration: Use when configuration options are\nstatic and available at startup.\nAsynchronous Registration: Use when configuration options need\nto be retrieved from external sources at runtime.","global-vs-feature-specific-registration#Global vs Feature-Specific Registration":"Global Registration: Makes the module available throughout the\nentire application.\nFeature-Specific Registration: Allows the module to be registered\nonly for specific features or modules within the application."}},"/reference/rockets/nestjs-auth-jwt/README":{"title":"Rockets NestJS JWT Authentication","data":{"":"Authenticate requests using JWT tokens passed via the\nrequest (headers, cookies, body, query, etc).","project#Project":"","table-of-contents#Table of Contents":"Tutorials\n1. Getting Started with AuthJwtModule\n1.1 Introduction\nOverview of the Library\nPurpose and Key Features\n1.2 Installation\nInstall the AuthJwtModule package\nAdd the AuthJwtModule to Your NestJS Application\n1.3 Basic Setup in a NestJS Project\nScenario: Users have a list of pets\nStep 1: Create Entities\nStep 2: Create Services\nStep 3: Create Controller\nStep 4: Configure the Module\n1.4 First Authentication with JWT\nValidating the Setup\nStep 1: Obtain a JWT Token\nStep 2: Make an Authenticated Request\nExample CURL Calls\nObtain a JWT token\nExample JWT response\nMake an authenticated request using the token\nExample authenticated response\nHow-To Guides\nSetting Up a custom Module for Providers\n1. Registering AuthJwtModule Synchronously\n2. Registering AuthJwtModule Asynchronously\n3. Global Registering AuthJwtModule Asynchronously\n4. Using Custom User Lookup Service\n5. Implementing and Using Custom Token Verification Service\n6. Setting Up a Custom Guard\nStep 1: Implement the Custom Guard\nStep 2: Provide the Custom Guard in Module Configuration\n7. Disabling the Guard\nDisable the Guard in Module Configuration\n8. Overwriting the Settings\n9. Integration with Other NestJS Modules\nReference\n1. AuthJwtModule API Reference\n2. AuthJwtOptionsInterface\n3. AuthJwtModule Classes and Interfaces\nEngineering Concepts\nConceptual Overview of JWT Authentication\nWhat is JWT?\nBenefits of Using JWT\nDesign Choices in AuthJwtModule\nWhy Use NestJS Guards?\nSynchronous vs Asynchronous Registration\nGlobal vs Feature-Specific Registration\nIntegrating AuthJwtModule with Other Modules\nHow AuthJwtModule Works with AuthLocalModule\nIntegrating with AuthRefreshModule","tutorials#Tutorials":"","1-getting-started-with-authjwtmodule#1. Getting Started with AuthJwtModule":"","11-introduction#1.1 Introduction":"","overview-of-the-library#Overview of the Library":"The AuthJwtModule is a powerful yet easy-to-use NestJS module designed for\nimplementing JWT-based authentication. With a few simple steps, you can integrate\nsecure authentication into your application without hassle.","purpose-and-key-features#Purpose and Key Features":"Ease of Use: The primary goal of AuthJwtModule is to simplify the process\nof adding JWT authentication to your NestJS application. All you need to do is provide\nconfiguration data, and the module handles the rest.\nProtect By Default: Be default the AuthJwtModule provides a global APP_GUARD\nto protect all routes by default. This can easily be overridden using the\n@AuthPublic decorator.\nSynchronous and Asynchronous Registration: Flexibly register the module either\nsynchronously or asynchronously, depending on your application's needs.\nGlobal and Feature-Specific Registration: Use the module globally across your\napplication or tailor it for specific features.\nSeamless Integration: Easily integrates with other NestJS modules like\n@concepta/nestjs-auth-local, @concepta/nestjs-auth-refresh, and more.","12-installation#1.2 Installation":"","install-the-authjwtmodule-package#Install the AuthJwtModule package":"To get started, install the @concepta/nestjs-auth-jwt packages and some other\ndependencies from npm or yarn:\nnpm install class-transformer\nnpm install class-validator\nnpm install @nestjs/jwt\nnpm install @concepta/ts-core\nnpm install @concepta/nestjs-authentication\nnpm install @concepta/nestjs-jwt\nnpm install @concepta/nestjs-auth-jwt\nor\nyarn add class-transformer\nyarn add class-validator\nyarn add @nestjs/jwt\nyarn add @concepta/ts-core\nyarn add @concepta/nestjs-authentication\nyarn add @concepta/nestjs-jwt\nyarn add @concepta/nestjs-auth-jwt","add-the-authjwtmodule-to-your-nestjs-application#Add the AuthJwtModule to Your NestJS Application":"Import the AuthJwtModule and required services in your application module.\nEnsure to import JwtModule and provide the necessary configuration options,\nincluding the required userLookupService.","13-basic-setup-in-a-nestjs-project#1.3 Basic Setup in a NestJS Project":"","scenario-users-have-a-list-of-pets#Scenario: Users have a list of pets":"To demonstrate this scenario, we will set up an application where users can\nhave a list of pets. We will create the necessary entities, services, module\nconfigurations to simulate the environment.\nNote: The @concepta/nestjs-user module can be used in place of our\nexample User related prerequisites.","step-1-create-entities#Step 1: Create Entities":"First, create the User and Pet entities.\n// user.entity.ts\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { Pet } from './pet.entity';\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  name: string;\n  @OneToMany(() => Pet, pet => pet.user)\n  pets: Pet[];\n}\n// pet.entity.ts\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from './user.entity';\n@Entity()\nexport class Pet {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  name: string;\n  @ManyToOne(() => User, user => user.pets)\n  user: User;\n}","step-2-create-services#Step 2: Create Services":"Next, create services for User and Pet to handle the business logic.\n// user.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository<User>,\n  ) {}\n  findAll(): Promise<User[]> {\n    return this.userRepository.find({ relations: ['pets'] });\n  }\n  findOne(id: string): Promise<User> {\n    return this.userRepository.findOne({\n      where: { id },\n      relations: ['pets'],\n    });\n  }\n}\n// user-lookup.service.ts\nimport { AuthJwtUserLookupServiceInterface } from '@concepta/nestjs-auth-jwt';\nimport { ReferenceIdInterface, ReferenceSubject } from '@concepta/ts-core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nexport class UserLookupService implements AuthJwtUserLookupServiceInterface {\n   constructor(\n    private userService: UserService,\n  ) {}\n  async bySubject(subject: ReferenceSubject): Promise<ReferenceIdInterface> {\n    // return authorized user\n    return this.userService.findOne(subject);\n  }\n}\n// pet.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Pet } from './pet.entity';\n@Injectable()\nexport class PetService {\n  constructor(\n    @InjectRepository(Pet)\n    private petRepository: Repository<Pet>,\n  ) {}\n  findAll(): Promise<Pet[]> {\n    return this.petRepository.find();\n  }\n  findByUserId(userId: number): Promise<Pet[]> {\n    return this.petRepository.find({ where: { user: { id: userId } } });\n  }\n}","step-3-create-controller#Step 3: Create Controller":"Create a controller to handle the HTTP requests.\nUse @AuthPublic decorator from @concepta/nestjs-authentication\non the controller or individual routes if you want to override the\nglobal JWT guard to make the route public.\n// user.controller.ts\nimport { Controller, Get, Param } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PetService } from './pet.service';\nimport { AuthJwtGuard } from '@concepta/nestjs-auth-jwt';\n@Controller('user')\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private petService: PetService,\n  ) {}\n  @Get(':id/pets')\n  async getPets(@Param('id') userId: number) {\n    return this.petService.findByUserId(userId);\n  }\n}","step-4-configure-the-module#Step 4: Configure the Module":"Configure the module to include the necessary services, controllers, and guards.\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthJwtModule } from '@concepta/nestjs-auth-jwt';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { PetService } from './pet.service';\nimport { User } from './user.entity';\nimport { Pet } from './pet.entity';\nimport { JwtModule, ExtractJwt } from '@concepta/nestjs-jwt';\nimport { ConfigService } from '@nestjs/config';\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Pet]),\n    JwtModule.forRoot({}), // <- required for AuthJwtModule to work\n    AuthJwtModule.registerAsync({\n      inject: [UserService],\n      useFactory: async (userLookupService: UserService) => ({\n        userLookupService,        \n      }),\n    }),\n  ],\n  controllers: [UserController],\n  providers: [UserService, PetService],\n});\nexport class UserModule {};","14-first-authentication-with-jwt#1.4 First Authentication with JWT":"","validating-the-setup#Validating the Setup":"To validate the setup, you can use curl commands to simulate\nfrontend requests.By following these steps, you can validate that the setup is\nworking correctly and that authenticated requests to the user/:id/pets\nendpoint return the expected list of pets for a given user.Here are the steps to test the user/:id/pets endpoint:","step-1-obtain-a-jwt-token#Step 1: Obtain a JWT Token":"Assuming you have an authentication endpoint to obtain a JWT token,\nuse curl to get the token. Replace [auth-url] with your actual\nauthentication URL, and [username] and [password] with valid credentials.\ncurl -X POST [auth-url] \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"[username]\", \"password\": \"[password]\"}'\nThis should return a response with a JWT token, which you'll use for\nauthenticated requests.","step-2-make-an-authenticated-request#Step 2: Make an Authenticated Request":"Use the JWT token obtained in the previous step to make an authenticated\nrequest to the user/:id/pets endpoint. Replace [jwt-token] with the actual\ntoken and [user-id] with a valid user ID.\ncurl -X GET http://localhost:3000/user/[user-id]/pets \\\n  -H \"Authorization: Bearer [jwt-token]\"","example-curl-calls#Example Curl Calls":"Here is an example sequence of curl commands:","obtain-a-jwt-token#Obtain a JWT token":"curl -X POST http://localhost:3000/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"testuser\", \"password\": \"testpassword\"}'","example-jwt-response#Example JWT response":"{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}","make-an-authenticated-request-using-the-token#Make an authenticated request using the token":"curl -X GET http://localhost:3000/user/1/pets \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"","example-authenticated-response#Example authenticated response":"[\n  {\n    \"id\": 1,\n    \"name\": \"Fluffy\",\n    \"user\": {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"pets\": []\n    }\n  }\n]","how-to-guides#How-To Guides":"","setting-up-a-custom-module-for-providers#Setting Up a Custom Module for Providers":"Before diving into the How-To Guides, we'll set up a custom module that\nincludes the necessary providers and exports for UserLookupService,\nMyVerifyTokenService, and MyAppGuard.This will ensure that our asynchronous registration examples can\ninject these services correctly.\nimport { Module } from '@nestjs/common';\nimport { UserLookupService } from './user-lookup.service';\nimport { MyVerifyTokenService } from './verify-token.service';\nimport { MyAppGuard } from './my-app-guard';\n@Module({\n  providers: [UserLookupService, MyVerifyTokenService, MyAppGuard],\n  exports: [UserLookupService, MyVerifyTokenService, MyAppGuard],\n});\nexport class MyProviderModule {};","1-registering-authjwtmodule-synchronously#1. Registering AuthJwtModule Synchronously":"import * as jwt from 'jsonwebtoken';\nimport { Module } from '@nestjs/common';\nimport { AuthJwtModule } from '@concepta/nestjs-auth-jwt';\nimport { JwtModule, ExtractJwt } from '@concepta/nestjs-jwt';\nimport { UserLookupService } from './user-lookup.service';\n// define the verifyToken function\nconst verifyToken = async (\n  token: string,\n  done: (error: any, payload?: any) => void\n) => {\n  try {\n    const payload = await jwt.verify(token, 'your-secret-key');\n    done(null, payload);\n  } catch (error) {\n    done(error);\n  }\n};\n@Module({\n  imports: [\n    JwtModule.forRoot({}), // <- required for AuthJwtModule to work\n    AuthJwtModule.register({\n      userLookupService: new UserLookupService(), // <- required\n      settings: {\n        jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n        verifyToken,\n      },\n      verifyTokenService: new MyVerifyTokenService(), // <- optional custom service\n      appGuard: new MyAppGuard(), // <- optional custom guard\n    }),\n  ],\n})\nexport class AppModule {}","2-registering-authjwtmodule-asynchronously#2. Registering AuthJwtModule Asynchronously":"import * as jwt from 'jsonwebtoken';\nimport { Module } from '@nestjs/common';\nimport { AuthJwtModule } from '@concepta/nestjs-auth-jwt';\nimport { JwtModule, ExtractJwt } from '@concepta/nestjs-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { MyProviderModule } from './my-provider.module';\n// define the verifyToken function\nconst verifyToken = (configService: ConfigService) => async (\n  token: string,\n  done: (error: any, payload?: any) => void\n) => {\n  try {\n    const payload = await jwt.verify(token, configService.get('JWT_SECRET'));\n    done(null, payload);\n  } catch (error) {\n    done(error);\n  }\n};\n@Module({\n  imports: [\n    JwtModule.forRoot({}), // <- required for AuthJwtModule to work\n    MyProviderModule, // <- import the my provider module\n    AuthJwtModule.registerAsync({\n      imports: [MyProviderModule],\n      useFactory: async (\n        configService: ConfigService,\n        userLookupService: UserLookupService,\n        verifyTokenService: MyVerifyTokenService,\n        appGuard: MyAppGuard,\n      ) => ({\n        userLookupService, // injected via useFactory\n        settings: {\n          jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n          verifyToken: verifyToken(configService),\n        },\n        verifyTokenService, // injected via useFactory\n        appGuard, // injected via useFactory\n      }),\n      inject: [ConfigService, UserLookupService, MyVerifyTokenService, MyAppGuard],\n    }),\n  ],\n});\nexport class AppModule {};","3-global-registering-authjwtmodule-asynchronously#3. Global Registering AuthJwtModule Asynchronously":"import * as jwt from 'jsonwebtoken';\nimport { Module } from '@nestjs/common';\nimport { AuthJwtModule } from '@concepta/nestjs-auth-jwt';\nimport { JwtModule, ExtractJwt } from '@concepta/nestjs-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { MyProviderModule } from './my-provider.module';\n// define the verifyToken function\nconst verifyToken = (configService: ConfigService) => async (\n  token: string,\n  done: (error: any, payload?: any) => void\n) => {\n  try {\n    const payload = await jwt.verify(token, configService.get('JWT_SECRET'));\n    done(null, payload);\n  } catch (error) {\n    done(error);\n  }\n};\n@Module({\n  imports: [\n    JwtModule.forRoot({}), // <- required for AuthJwtModule to work\n    MyProviderModule, // <- import the my provider module\n    AuthJwtModule.forRootAsync({\n      imports: [MyProviderModule],\n      useFactory: async (\n        configService: ConfigService,\n        userLookupService: UserLookupService,\n        verifyTokenService: MyVerifyTokenService,\n        appGuard: MyAppGuard,\n      ) => ({\n        userLookupService, // injected via useFactory\n        settings: {\n          jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n          verifyToken: verifyToken(configService),\n        },\n        verifyTokenService, // injected via useFactory\n        appGuard, // injected via useFactory\n      }),\n      inject: [ConfigService, UserLookupService, MyVerifyTokenService, MyAppGuard],\n    }),\n  ],\n});\nexport class AppModule {};","4-using-custom-user-lookup-service#4. Using Custom User Lookup Service":"This service is responsible for looking up user information based\non the JWT payload. It implements the AuthJwtUserLookupServiceInterface\nand must be provided to the module.\nimport { AuthJwtUserLookupServiceInterface } from '@concepta/nestjs-auth-jwt';\nimport { ReferenceIdInterface, ReferenceSubject } from '@concepta/ts-core';\nexport class UserLookupService implements AuthJwtUserLookupServiceInterface {\n  async bySubject(subject: ReferenceSubject): Promise<ReferenceIdInterface>  {\n    // implement user lookup logic here\n  }\n}","5-implementing-and-using-custom-token-verification-service#5. Implementing and Using Custom Token Verification Service":"This service verifies JWT tokens. If not provided, the default verification\nlogic will be used. It extends the VerifyTokenServiceInterface.\nimport { JwtService } from '@nestjs/jwt';\nimport { Injectable } from '@nestjs/common';\nimport { VerifyTokenServiceInterface } from '@concepta/nestjs-authentication';\n@Injectable()\nexport class MyVerifyTokenService implements VerifyTokenServiceInterface {\n  accessToken(): ReturnType<JwtService['verifyAsync']> {\n    return new Promise((resolve, reject) => {\n      try {\n        // your custom logic to sign and validate the the token\n        resolve({ accessToken: 'access-token' });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  refreshToken(\n    ...args: Parameters<JwtService['verifyAsync']>\n  ): ReturnType<JwtService['verifyAsync']> {\n    return new Promise((resolve, reject) => {\n      try {\n        // your custom logic to sign and validate the the token\n        resolve({ accessToken: 'refresh-token' });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}","6-setting-up-a-custom-guard#6. Setting Up a Custom Guard":"To use a custom guard, you need to implement the CanActivate interface\nfrom NestJS and provide it in the module configuration.To take advantage of the ability to enable/disable guards via configuration\nsettings or with the @AuthPublic decorator, it is highly recommended that\nyou extend AuthJwtGuard class or call the AuthGuard() class factory from\nthe @concepta/nestjs-authentication module.","step-1-implement-the-custom-guard#Step 1: Implement the Custom Guard":"Create a custom guard by extending the AuthJwtGuard.\nimport { Injectable, ExecutionContext } from '@nestjs/common';\nimport { AuthGuard } from '@concepta/nestjs-authentication';\n@Injectable()\nexport class MyAppGuard extends AuthJwtGuard {\n  canActivate(context: ExecutionContext) {\n    // call super class first\n    if (!super.canActivate(context)) {\n      return false;\n    }\n    // implement your custom authentication logic here\n    return true;\n  }\n}","step-2-provide-the-custom-guard-in-module-configuration#Step 2: Provide the Custom Guard in Module Configuration":"Update the module configuration to use the custom guard.\n// ...\nAuthJwtModule.registerAsync({\n  useFactory: async (userLookupService: UserService) => ({\n    userLookupService,\n    appGuard: MyAppGuard, // use the custom guard\n  }),\n  inject: [UserService],\n}),\n// ...","7-disabling-the-guard#7. Disabling the Guard":"To completely disable the global guard for all routes, you can set the\nappGuard option to false.","disable-the-guard-in-module-configuration#Disable the Guard in Module Configuration":"Update the module configuration to disable the global APP_GUARD.\n// ...\nAuthJwtModule.registerAsync({\n  useFactory: async (userLookupService: UserService) => ({\n    userLookupService,\n    appGuard: false, // disable the global APP_GUARD\n  }),\n  inject: [UserService],\n}),\n// ...","8-overwriting-the-settings#8. Overwriting the settings":"import { ExtractJwt, JwtStrategyOptionsInterface } from \"@concepta/nestjs-jwt\";\nconst settings: JwtStrategyOptionsInterface = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  verifyToken: async (\n    token: string,\n    done: (error: any, payload?: any) => void,\n  ) => {\n    try {\n      // add custom logic ot validate token\n      const payload = { id: 'user-id' };\n      done(null, payload);\n    } catch (error) {\n      done(error);\n    }\n  },\n};\n// ...\nAuthJwtModule.registerAsync({\n  useFactory: async (userLookupService: UserService) => ({\n    userLookupService,\n    settings,\n  }),\n  inject: [UserService],\n}),\n// ...","9-integration-with-other-nestjs-modules#9. Integration with Other NestJS Modules":"Integrate @concepta/nestjs-auth-jwt with other NestJS modules like\n@concepta/nestjs-user, @concepta/nestjs-auth-local,\n@concepta/nestjs-auth-refresh, and more for a comprehensive\nauthentication system.Detailed Descriptions of All Classes, Methods, and Properties","1-authjwtmodule-api-reference#1. AuthJwtModule API Reference":"","registeroptions-authjwtoptions#register(options: AuthJwtOptions)":"Registers the module with synchronous options.","registerasyncoptions-authjwtasyncoptions#registerAsync(options: AuthJwtAsyncOptions)":"Registers the module with asynchronous options.","forrootoptions-authjwtoptions#forRoot(options: AuthJwtOptions)":"Registers the module globally with synchronous options.","forrootasyncoptions-authjwtasyncoptions#forRootAsync(options: AuthJwtAsyncOptions)":"Registers the module globally with asynchronous options.","forfeatureoptions-authjwtoptions#forFeature(options: AuthJwtOptions)":"Registers the module for specific features with custom options.","2-authjwtoptionsinterface#2. AuthJwtOptionsInterface":"The AuthJwtOptionsInterface provides various configuration options\nto customize the behavior of the AuthJwtModule.Below is a summary of the key options:","userlookupservice-required#userLookupService (required)":"Service for looking up user information based on JWT payload.","verifytokenservice-optional#verifyTokenService (optional)":"Service for verifying JWT tokens.","appguard-optional#appGuard (optional)":"Custom guard to protect routes; can be set to a custom guard or false.","settings-optional#settings (optional)":"JWT strategy settings, including token extraction and verification logic.","3-authjwtmodule-classes-and-interfaces#3. AuthJwtModule Classes and Interfaces":"AuthJwtUserLookupServiceInterface\nVerifyTokenServiceInterface\nJwtStrategyOptionsInterface","conceptual-overview-of-jwt-authentication#Conceptual Overview of JWT Authentication":"","what-is-jwt#What is JWT?":"JSON Web Tokens (JWT) are a compact, URL-safe means of representing claims to\nbe transferred between two parties.The token is composed of three parts: the header, payload, and signature.\nThe header typically consists of the token type (JWT) and the signing\nalgorithm (e.g., HMAC SHA256).The payload contains the claims, which are statements about an entity\n(typically, the user) and additional data. The signature is used to verify\nthat the sender of the JWT is who it says it is and to ensure that the message\nwasn't changed along the way.For more details on JWT, see the\nJWT Introduction.","benefits-of-using-jwt#Benefits of Using JWT":"JWTs offer several benefits for authentication and authorization:\nStateless: JWTs do not require storing user session information on\nthe server, which makes them ideal for scalable applications.\nCompact: Their small size allows them to be easily passed in URLs,\nPOST parameters, or inside HTTP headers.\nSelf-contained: JWTs contain all the necessary information about the\nuser, avoiding the need to query the database for each request once the user\nis authenticated.\nSecurity: JWTs can be signed using a secret (with HMAC algorithm) or\na public/private key pair (with RSA or ECDSA), ensuring the data integrity.\nFor more benefits, see the JWT Handbook.","design-choices-in-authjwtmodule#Design Choices in AuthJwtModule":"","why-use-nestjs-guards#Why Use NestJS Guards?":"Description: NestJS guards provide a way to control the access to various\nparts of the application by checking certain conditions before the route\nhandler is executed.In AuthJwtModule, guards are used to implement authentication and\nauthorization logic. By using guards, developers can apply security policies\nacross routes efficiently, ensuring that only authenticated and authorized\nusers can access protected resources.Read more about NestJS Guards.","synchronous-vs-asynchronous-registration#Synchronous vs Asynchronous Registration":"The AuthJwtModule supports both synchronous and asynchronous registration:\nSynchronous Registration: This method is used when the configuration\noptions are static and available at application startup. It simplifies the\nsetup process and is suitable for most use cases where configuration values\ndo not depend on external services.\nAsynchronous Registration: This method is beneficial when configuration\noptions need to be retrieved from external sources, such as a database or an\nexternal API, at runtime. It allows for more flexible and dynamic configuration\nbut requires an asynchronous factory function.\nFor more on module registration, see the NestJS Documentation.","global-vs-feature-specific-registration#Global vs Feature-Specific Registration":"The AuthJwtModule can be registered globally or for specific features:\nGlobal Registration: Makes the module available throughout the entire\napplication. This approach is useful when JWT authentication is required across\nall or most routes in the application.\nFeature-Specific Registration: Allows the module to be registered only\nfor specific features or modules within the application. This provides more\ngranular control, enabling different parts of the application to have distinct\nauthentication and authorization requirements.\nTo understand more about global and feature-specific registration, refer to the\nNestJS Module Documentation.","integrating-authjwtmodule-with-other-modules#Integrating AuthJwtModule with Other Modules":"","how-authjwtmodule-works-with-authlocalmodule#How AuthJwtModule Works with AuthLocalModule":"The AuthJwtModule can be seamlessly integrated with the\nAuthLocalModule to provide a comprehensive authentication solution.\nAuthLocalModule handles the initial authentication using local strategies\nsuch as username and password.Once the user is authenticated, AuthJwtModule can issue a JWT that the\nuser can use for subsequent requests. This integration allows for secure and\nefficient authentication processes combining the strengths of both modules.","integrating-with-authrefreshmodule#Integrating with AuthRefreshModule":"Integrating AuthJwtModule with AuthRefreshModule enables the\napplication to handle token refresh logic. Refresh tokens are used to obtain\nnew access tokens without requiring the user to re-authenticate.This setup enhances the user experience by maintaining sessions securely and\nseamlessly. The integration involves configuring both modules to use the same\ntoken issuance and verification mechanisms, ensuring smooth interoperability\nand security."}},"/reference/rockets/nestjs-auth-local/README":{"title":"Rockets NestJS Local Authentication","data":{"":"Authenticate requests using username/email and password against a local or\nremote data source.","project#Project":"","table-of-contents#Table of Contents":"Tutorials\n1. Getting Started with AuthLocalModule\n1.1 Introduction\nOverview of the Library\nPurpose and Key Features\n1.2 Installation\nInstall the AuthLocalModule package\nAdd the AuthLocalModule to Your NestJS Application\n1.3 Basic Setup in a NestJS Project\nScenario: Users can log in using local authentication\nStep 1: Create Entities\nStep 2: Create Services\nStep 3: Configure the Module\nValidating the Setup\nHow-To Guides\n1. Registering AuthLocalModule Synchronously\n2. Registering AuthLocalModule Asynchronously\n3. Global Registering AuthLocalModule Asynchronously\n4. Implementing User Lookup Service\n5. Implementing custom token issuance service\n6. Implementing a custom user validation service\n7. Implementing a custom password validation service\n8. Overriding the Settings\n9. Integration with Other NestJS Modules\nReference\n1. Explanation of Properties in AuthLocalOptionsInterface\n2. AuthLocalModule API Reference\nExplanation\nConceptual Overview of Local Authentication\nWhat is Local Authentication?\nBenefits of Using Local Authentication\nDesign Choices in AuthLocalModule\nWhy Use Local Authentication?\nSynchronous vs Asynchronous Registration\nGlobal vs Feature-Specific Registration","tutorials#Tutorials":"","1-getting-started-with-authlocalmodule#1. Getting Started with AuthLocalModule":"","11-introduction#1.1 Introduction":"","overview-of-the-library#Overview of the Library":"The AuthLocalModule is a robust NestJS module designed for implementing\nlocal authentication using username and password. This module leverages the\npassport-local strategy\nto authenticate users locally within your application.","purpose-and-key-features#Purpose and Key Features":"Local Authentication: Provides a straightforward way to implement local\nauthentication using username and password.\nSynchronous and Asynchronous Registration: Flexibly register the module\neither synchronously or asynchronously, depending on your application's needs.\nGlobal and Feature-Specific Registration: Use the module globally across\nyour application or tailor it for specific features.\nCustomizable: Easily customize various aspects such as user validation,\ntoken issuance, and password validation.","12-installation#1.2 Installation":"","install-the-authlocalmodule-package#Install the AuthLocalModule package:":"npm install class-transformer\nnpm install class-validator\nnpm install @concepta/ts-core\nnpm install @concepta/nestjs-authentication\nnpm install @concepta/nestjs-password\nnpm install @concepta/nestjs-jwt\nnpm install @concepta/nestjs-auth-local\nor\nyarn add class-transformer\nyarn add class-validator\nyarn add @concepta/ts-core\nyarn add @concepta/nestjs-authentication\nyarn add @concepta/nestjs-password\nyarn add @concepta/nestjs-jwt\nyarn add @concepta/nestjs-auth-local","add-the-authlocalmodule-to-your-nestjs-application#Add the AuthLocalModule to Your NestJS Application:":"Import the AuthLocalModule and required services in your application module.\nEnsure to provide the necessary configuration options at\nAuthLocalOptionsInterface.The AuthLocalOptionsInterface defines the configuration options for the\nlocal authentication strategy within a NestJS application using the\n@concepta/nestjs-auth-local package. This interface allows for the customization\nof userLookupService, issueTokenService, validateUserService, and\npasswordValidationService. Please see Reference for more\ndetails.Optional fields utilize default implementations, enabling straightforward\nintegration and flexibility to override with custom implementations as needed.\nThis setup ensures that developers can tailor the authentication process to\nspecific requirements while maintaining a robust and secure authentication\nframework.","13-basic-setup-in-a-nestjs-project#1.3 Basic Setup in a NestJS Project":"","scenario-users-can-log-in-using-local-authentication#Scenario: Users can log in using local authentication":"To test this scenario, we will set up an application where users can log\nin using a username and password. We will create the necessary entities, services, module configurations.\nNote: The @concepta/nestjs-user module can be used in place of our example User related prerequisites.","step-1-create-entities#Step 1: Create Entities":"First, create the User entity.\n// user.entity.ts\nexport class User {\n  id: number;\n  username: string;\n  password: string;\n}","step-2-create-services#Step 2: Create Services":"Next, you need to create the UserLookupService. This\nservice is responsible for the business logic related to\nretrieving user data. It should implement the\nAuthLocalUserLookupServiceInterface.Within this service, implement the byUsername method to\nfetch user details by their username (or email). Ensure that\nthe method  returns a User object containing passwordHash and\npasswordSalt.These attributes are crucial as they are used by the\nvalidateUser method in the passwordValidationService\nto authenticate the user, which is a configurable option\nin the AuthLocalModule.\n// user-lookup.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { ReferenceUsername } from '@concepta/ts-core';\nimport { AuthLocalUserLookupServiceInterface } from '@concepta/nestjs-auth-local';\nimport { AuthLocalCredentialsInterface } from '@concepta/nestjs-auth-local/dist/interfaces/auth-local-credentials.interface';\n@Injectable()\nexport class UserLookupService implements AuthLocalUserLookupServiceInterface {\n  async byUsername(\n    username: ReferenceUsername,\n  ): Promise<AuthLocalCredentialsInterface | null> {\n    // make sure this method will return a valid user with\n    // correct passwordHash and passwordSalt\n    // let's user this mock data for the purposes of this tutorial\n    return {\n      id: '5b3f5fd3-9426-4c4d-a06d-b4d55079034d',\n      username: username,\n      passwordHash:\n        '$2b$12$9rQ4qZx8gpTaTR4ic3LQ.OkebyVBa48DP42jErL1zfqF17WeG4hHC',\n      passwordSalt: '$2b$12$9rQ4qZx8gpTaTR4ic3LQ.O',\n      active: true,\n    };\n  }\n}","step-3-configure-the-module#Step 3: Configure the Module":"Configure the module to include the necessary services userLookupService.\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AuthLocalModule } from '@concepta/nestjs-auth-local';\nimport { JwtModule } from '@concepta/nestjs-jwt';\nimport { UserLookupService } from './user-lookup.service';\n@Module({\n  imports: [\n    JwtModule.forRoot({}),\n    AuthLocalModule.forRoot({\n      userLookupService: new UserLookupService(),\n    }),\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}","validating-the-setup#Validating the Setup":"To validate the setup, you can use curl commands to simulate frontend\nrequests. Here are the  steps to test the login endpoint:","step-1-obtain-a-jwt-token#Step 1: Obtain a JWT Token":"Assuming you have an endpoint to obtain a JWT token, use curl to get\nthe token. Replace auth-url with your actual authentication URL, and\nusername and password with valid credentials.\ncurl -X POST http://localhost:3000/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"testuser\", \"password\": \"testpassword\"}'\nThis should return a response with a login message.","example#Example":"Here is an example sequence of curl commands to validate the login setup:\nLogin Request:\nCommand:\ncurl -X POST http://localhost:3000/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"username\", \"password\": \"Test1234\"}'\nResponse (example):\n{\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..Zl2i59w89cgJxfI4lXn6VmOhC5GLEqMm2nWkiVKpEUs\",\n    \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..xEF7kObwkztrMF7J83S-xvDarABmjXYkqLFINPWbx6g\"\n}\nInvalid Credentials Request:\nCommand:\ncurl -X POST http://localhost:3000/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"testuser\", \"password\": \"wrongpassword\"}'\nResponse (example):\n{\n    \"statusCode\": 401,\n    \"message\": \"Unauthorized\"\n}","how-to-guides#How-To Guides":"","1-registering-authlocalmodule-synchronously#1. Registering AuthLocalModule Synchronously":"// app.module.ts\n//...\n  AuthLocalModule.register({\n    userLookupService: new MyUserLookupService(), // required\n  }),\n//...","2-registering-authlocalmodule-asynchronously#2. Registering AuthLocalModule Asynchronously":"// app.module.ts\nimport { MyUserLookupService } from './services/my-user-lookup.service.ts';\n//...\nAuthLocalModule.registerAsync({\n  useFactory: async (userLookupService: MyUserLookupService) => ({\n    userLookupService, // required\n  }),\n  inject: [MyUserLookupService],\n}),\n//...","3-global-registering-authlocalmodule-asynchronously#3. Global Registering AuthLocalModule Asynchronously":"// app.module.ts\n//...\nAuthLocalModule.forRootAsync({\n  useFactory: async (userLookupService: MyUserLookupService) => ({\n    userLookupService, \n  }),\n  inject: [MyUserLookupService],\n}),\n//...","4-implementing-user-lookup-service#4. Implementing User Lookup Service":"// my-user-lookup.service.ts\nimport { Injectable } from '@nestjs/common';\nimport {\n  AuthLocalUserLookupServiceInterface,\n  AuthLocalCredentialsInterface\n} from '@concepta/nestjs-auth-local';\n@Injectable()\nexport class MyUserLookupService\n  implements AuthLocalUserLookupServiceInterface {\n  async byUsername(username: string): Promise<AuthLocalCredentialsInterface | null> {\n    // implement custom logic to return the user's credentials\n    return null;\n  }\n}","5-implementing-custom-token-issuance-service#5. Implementing custom token issuance service":"There are two ways to implementing the custom token issue service. You can\ntake advantage of the default service, as seen here:\n// my-jwt-issue.service.ts\nimport { Injectable } from '@nestjs/common';\nimport {\n  JwtIssueService,\n  JwtIssueServiceInterface,\n  JwtSignService,\n} from '@concepta/nestjs-jwt';\n@Injectable()\nexport class MyJwtIssueService extends JwtIssueService {\n  constructor(protected readonly jwtSignService: JwtSignService) {\n    super(jwtSignService);\n  }\n  async accessToken(\n    ...args: Parameters<JwtIssueServiceInterface['accessToken']>\n  ) {\n    // your custom code\n    return super.accessToken(...args);\n  }\n  async refreshToken(\n    ...args: Parameters<JwtIssueServiceInterface['refreshToken']>\n  ) {\n    // your custom code\n    return super.refreshToken(...args);\n  }\n}\nOr you can completely replace the default implementation:\n// my-jwt-issue.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { JwtIssueServiceInterface } from '@concepta/nestjs-jwt';\n@Injectable()\nexport class MyJwtIssueService implements JwtIssueServiceInterface {\n  constructor() {}\n  async accessToken(\n    ...args: Parameters<JwtIssueServiceInterface['accessToken']>\n  ) {\n    // your custom code\n  }\n  async refreshToken(\n    ...args: Parameters<JwtIssueServiceInterface['refreshToken']>\n  ) {\n    // your custom code\n  }\n}","6-implementing-a-custom-user-validation-service#6. Implementing a custom user validation service":"The same approach can be done for AuthLocalValidateUserService you can\neither completely override the default implementation or you can take\nadvantage of the default implementation.\n// my-auth-local-validate-user.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { ReferenceActiveInterface, ReferenceIdInterface } from '@concepta/ts-core';\nimport {\n  AuthLocalValidateUserInterface,\n  AuthLocalValidateUserService\n} from '@concepta/nestjs-auth-local';\n@Injectable()\nexport class MyAuthLocalValidateUserService\n  extends AuthLocalValidateUserService\n{\n  \n  async validateUser(\n    dto: AuthLocalValidateUserInterface,\n  ): Promise<ReferenceIdInterface> {\n    // customize as needed\n    return super.validateUser(dto);\n  }\n  async isActive(\n    user: ReferenceIdInterface<string> & ReferenceActiveInterface<boolean>,\n  ): Promise<boolean> {\n    // customize as needed\n    return super.isActive(user);\n  }\n}\n// my-auth-local-validate-user.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { ReferenceActiveInterface, ReferenceIdInterface } from '@concepta/ts-core';\nimport {\n  AuthLocalValidateUserInterface,\n  AuthLocalValidateUserServiceInterface\n} from '@concepta/nestjs-auth-local';\n@Injectable()\nexport class MyAuthLocalValidateUserService\n  implements AuthLocalValidateUserServiceInterface\n{\n  async validateUser(\n    dto: AuthLocalValidateUserInterface,\n  ): Promise<ReferenceIdInterface> {\n    // your custom code\n    return {\n      id: '[userId]',\n      //...\n    }\n  }\n  async isActive(\n    user: ReferenceIdInterface<string> & ReferenceActiveInterface<boolean>,\n  ): Promise<boolean> {\n    // customize as needed\n    return true;\n  }\n}","7-implementing-a-custom-password-validation-service#7. Implementing a custom password validation service":"The PasswordValidationService in the @concepta/nestjs-password module\nprovides a default implementation using bcrypt for hashing and verifying passwords.\nHowever, depending on your application's requirements, you might need to use a\ndifferent method for password hashing or add additional validation logic.You can either extend the existing PasswordValidationService to leverage its\nbuilt-in functionalities while adding your enhancements, or completely\noverride it with your custom implementation.Overriding the Default Implementation:If your application requires a different hashing algorithm , you can replace\nthe default implementation with one that suits your needs.\n// my-password-validation.service.ts\nimport { Injectable } from '@nestjs/common';\nimport {\n  PasswordStorageInterface,\n  PasswordValidationServiceInterface,\n} from '@concepta/nestjs-password';\n@Injectable()\nexport class MyPasswordValidationService\n  implements PasswordValidationServiceInterface\n{\n  async validate(options: {\n    password: string;\n    passwordHash: string;\n    passwordSalt: string;\n  }): Promise<boolean> {\n    // customize as needed\n    return true;\n  }\n  async validateObject<T extends PasswordStorageInterface>(\n    password: string,\n    object: T,\n  ): Promise<boolean> {\n    // customize as needed\n    return true;\n  }\n}\nExtending the Default Service:If you want to add additional validation logic while keeping the current\nhashing and validation, you can extend the default service:\n// my-password-validation.service.ts\nimport {\n  PasswordStorageInterface,\n  PasswordValidationService,\n} from '@concepta/nestjs-password';\nimport { Injectable } from '@nestjs/common';\n@Injectable()\nexport class MyPasswordValidationService extends PasswordValidationService {\n  async validate(options: {\n    password: string;\n    passwordHash: string;\n    passwordSalt: string;\n  }): Promise<boolean> {\n    // customize as neeeded\n    return super.validate(options);\n  }\n  async validateObject<T extends PasswordStorageInterface>(\n    password: string,\n    object: T,\n  ): Promise<boolean> {\n    // customize as neeeded\n    return super.validateObject(password, object);\n  }\n}","8-overriding-the-settings#8. Overriding the Settings":"import { Type } from '@nestjs/common';\nexport class CustomLoginDto {\n  email: string;\n  password: string;\n}\nexport const localSettings = {\n  loginDto: CustomLoginDto,\n  usernameField: 'email',\n  passwordField: 'password'\n};\nAuthLocalModule.forRoot({\n  userLookupService: new UserLookupService(),\n  issueTokenService: new MyIssueTokenService(), // <- optional\n  passwordValidationService: new PasswordValidationService(), // <- optional\n  settings: localSettings\n}),","9-integration-with-other-nestjs-modules#9. Integration with Other NestJS Modules":"Integrate nestjs-auth-local with other NestJS modules like,\n@concepta/nestjs-authentication, @concepta/nestjs-auth-jwt,\n@concepta/nestjs-auth-refresh for a comprehensive authentication system.","reference#Reference":"For detailed information on the properties, methods, and classes used in the\n@concepta/nestjs-auth-local, please refer to the API documentation\navailable at AuthLocalModule API Documentation. This documentation provides\ncomprehensive details on the interfaces and services that you can utilize to\ncustomize and extend the authentication functionality within your NestJS\napplication.","explanation#Explanation":"","conceptual-overview-of-local-authentication#Conceptual Overview of Local Authentication":"","what-is-local-authentication#What is Local Authentication?":"Local Authentication is a method of verifying user identity based on credentials\n(username and password) stored locally within the application or in a connected\ndatabase.","benefits-of-using-local-authentication#Benefits of Using Local Authentication":"Simplicity: Easy to implement and manage.\nControl: Full control over user authentication and data.\nSecurity: When properly implemented, provides a secure way to authenticate\nusers.","design-choices-in-authlocalmodule#Design Choices in AuthLocalModule":"","why-use-local-authentication#Why Use Local Authentication?":"Local Authentication is ideal for applications that need to manage user\nauthentication directly within the application without relying on external\nidentity providers.","synchronous-vs-asynchronous-registration#Synchronous vs Asynchronous Registration":"Synchronous Registration: Used when configuration options are static and\navailable at startup.\nAsynchronous Registration: Used when configuration options need to be\nretrieved from external sources at runtime.","global-vs-feature-specific-registration#Global vs Feature-Specific Registration":"Global Registration: Makes the module available throughout the entire\napplication.\nFeature-Specific Registration: Allows the module to be registered only\nfor specific features or modules within the application."}},"/reference/rockets/nestjs-authentication/README":{"title":"Authentication Module Documentation","data":{"project#Project":"","table-of-contents#Table of Contents":"Tutorials\nIntroduction\nOverview of the Library\nPurpose and Key Features\nInstallation\nGetting Started\nOverview\nBasic Setup\nBasic Setup in a NestJS Project\nScenario: Users have a list of pets\nStep 1: Create Entities\nStep 2: Create Services\nStep 3: Create Controller\nStep 4: Configure the Module\nFirst Authentication with JWT\nValidating the Setup\nStep 1: Obtain a JWT Token\nStep 2: Make an Authenticated Request\nExample Curl Calls\nHow to Guides\n1. How to Set Up AuthenticationModule with forRoot and JwtModule from @concepta/nestjs-jwt\n2. How to Configure AuthenticationModule Settings\nExplanation\nConceptual Overview\nWhat is This Library?\nBenefits of Using This Library\nDesign Choices\nWhy Use NestJS Guards?\nGlobal, Synchronous vs Asynchronous Registration\nIntegration Details\nIntegrating with Other Modules","introduction#Introduction":"","overview-of-the-library#Overview of the Library":"This module is designed to manage JWT authentication processes within a\nNestJS application. It includes services for issuing JWTs, validating user\ncredentials, and verifying tokens. The services handle the generation of\naccess and refresh tokens, ensure users are active and meet authentication\ncriteria, and perform token validity checks, including additional validations\nif necessary. This comprehensive approach ensures secure user authentication\nand efficient token management.","purpose-and-key-features#Purpose and Key Features":"Secure Token Management: Provides robust mechanisms for issuing and\nmanaging access and refresh tokens, ensuring secure and efficient token\nlifecycle management.\nAbstract User Validation Service: Offers an abstract service to validate\nuser credentials and check user activity status, ensuring that only eligible\nusers can authenticate. This abstract nature requires implementations to\ndefine specific validation logic, allowing flexibility across different user\nmodels and authentication requirements.\nToken Verification: Includes capabilities to verify the authenticity and\nvalidity of tokens, with support for additional custom validations to meet\nspecific security requirements.\nCustomizable and Extensible: Designed to be flexible, allowing\ncustomization of token generation, user validation, and token verification\nprocesses to suit different application needs.\nIntegration with NestJS Ecosystem: Seamlessly integrates with other\nNestJS modules and services, leveraging the framework's features for enhanced\nfunctionality and performance.","installation#Installation":"To get started, install the AuthenticationModule package:yarn add @concepta/nestjs-authentication","getting-started#Getting Started":"","overview#Overview":"This section covers the basics of setting up the AuthenticationModule\nin a NestJS application.","basic-setup#Basic Setup":"The @concepta/nestjs-authentication module is designed to integrate\nseamlessly with other modules in the authentication suite, such as\n@concepta/nestjs-auth-jwt, @concepta/nestjs-auth-local,\n@concepta/nestjs-auth-recovery, and @concepta/nestjs-auth-refresh.For optimal functionality, it is recommended to use these modules together to\naddress various aspects of authentication and token management in your NestJS\napplication.To set up the @concepta/nestjs-authentication module, begin by installing\nthe necessary packages using your package manager.Here is a basic example using yarn:\nyarn add @concepta/nestjs-authentication @concepta/nestjs-auth-jwt @concepta/nestjs-auth-local @concepta/nestjs-auth-recovery @concepta/nestjs-auth-refresh","basic-setup-in-a-nestjs-project#Basic Setup in a NestJS Project":"","scenario-users-have-a-list-of-pets#Scenario: Users have a list of pets":"To demonstrate this scenario, we will set up an application\nwhere users can have a list of pets. We will create the necessary entities,\nservices, module configurations to simulate the environment.\nNote: The @concepta/nestjs-user module can be used in place of\nour example User related prerequisites.","step-1-create-entities#Step 1: Create Entities":"First, create the User and Pet entities.\n// user.entity.ts\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { Pet } from './pet.entity';\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  name: string;\n  @OneToMany(() => Pet, pet => pet.user)\n  pets: Pet[];\n}\n// pet.entity.ts\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from './user.entity';\n@Entity()\nexport class Pet {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  name: string;\n  @ManyToOne(() => User, user => user.pets)\n  user: User;\n}","step-2-create-services#Step 2: Create Services":"Next, create services for User and Pet to handle the business logic.\n// user.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository<User>,\n  ) {}\n  async findAll(): Promise<User[]> {\n    return this.userRepository.find({ relations: ['pets'] });\n  }\n  async findOne(id: string): Promise<User> {\n    return this.userRepository.findOne({\n      where: { id },\n      relations: ['pets'],\n    });\n  }\n  async create(userData: Partial<User>): Promise<User> {\n    const newUser = this.userRepository.create(userData);\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n}\n// pet.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Pet } from './pet.entity';\n@Injectable()\nexport class PetService {\n  constructor(\n    @InjectRepository(Pet)\n    private petRepository: Repository<Pet>,\n  ) {}\n  findAll(): Promise<Pet[]> {\n    return this.petRepository.find();\n  }\n  findByUserId(userId: number): Promise<Pet[]> {\n    return this.petRepository.find({ where: { user: { id: userId } } });\n  }\n}\nCreate the Lookup Service for AuthJwtModule\n// my-jwt-user-lookup.service.ts\nimport { AuthJwtUserLookupServiceInterface } from '@concepta/nestjs-auth-jwt/dist/interfaces/auth-jwt-user-lookup-service.interface';\nimport { ReferenceIdInterface, ReferenceSubject } from '@concepta/ts-core';\nexport class MyJwtUserLookupService implements AuthJwtUserLookupServiceInterface {\n  async bySubject(subject: ReferenceSubject): Promise<ReferenceIdInterface> {\n    // return authorized user\n    return {\n      id: '5b3f5fd3-9426-4c4d-a06d-b4d55079034d',\n    };\n  }\n}\nCreate the Lookup Service for Auth Local\n// my-auth-local-user-lookup.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { ReferenceUsername } from '@concepta/ts-core';\nimport { AuthLocalUserLookupServiceInterface } from '@concepta/nestjs-auth-local';\nimport { AuthLocalCredentialsInterface } from '@concepta/nestjs-auth-local/dist/interfaces/auth-local-credentials.interface';\n@Injectable()\nexport class MyAuthLocalUserLookupService implements AuthLocalUserLookupServiceInterface {\n  async byUsername(\n    username: ReferenceUsername,\n  ): Promise<AuthLocalCredentialsInterface | null> {\n    // make sure this method will return a valid user with\n    // correct passwordHash and passwordSalt\n    return {\n      id: '5b3f5fd3-9426-4c4d-a06d-b4d55079034d',\n      username: username,\n      passwordHash:\n        '$2b$12$9rQ4qZx8gpTaTR4ic3LQ.OkebyVBa48DP42jErL1zfqF17WeG4hHC',\n      passwordSalt: '$2b$12$9rQ4qZx8gpTaTR4ic3LQ.O',\n      active: true,\n    };\n  }\n}\nLet's create a password validation service and overwrite\nthe validate method, for demo purposes only.\n// my-auth-local-user-password-validation.service.ts\nimport {\n  PasswordStorageInterface,\n  PasswordValidationService,\n} from '@concepta/nestjs-password';\nimport { Injectable } from '@nestjs/common';\n@Injectable()\nexport class MyAuthLocalPasswordValidationService extends PasswordValidationService {\n  constructor() {\n    super();\n  }\n  async validate(options: {\n    password: string;\n    passwordHash: string;\n    passwordSalt: string;\n  }): Promise<boolean> {\n    // you should call super.validate to use the default password validation\n    return true;\n  }\n  async validateObject<T extends PasswordStorageInterface>(\n    password: string,\n    object: T,\n  ): Promise<boolean> {\n    return true;\n  }\n}\nLet's create a verify service to validate the token that will be\nreceived in the request.\nIf we need a custom logic to validate the access token you can\noverwrite this service.\n// jwt-verify-token.service.ts\nimport { JwtService } from '@nestjs/jwt';\nimport { Injectable } from '@nestjs/common';\nimport { VerifyTokenServiceInterface } from '@concepta/nestjs-authentication';\n@Injectable()\nexport class MyJwtVerifyTokenService implements VerifyTokenServiceInterface {\n  accessToken() {\n    // your custom logic to sign and validate the the token\n    return { accessToken: 'access-token' };\n  }\n  refreshToken(...args) {\n    // your custom logic to sign and validate the the token\n    return { accessToken: 'refresh-token' };\n  }\n}","step-3-create-controller#Step 3: Create Controller":"Create a controller to handle the HTTP requests.\nNote: Use the @AuthPublic decorator from @concepta/nestjs-authentication\non the controller or individual routes if you want to override the\nglobal JWT guard to make the route public.\n// user.controller.ts\nimport { Controller, Get, Param } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { PetService } from './pet.service';\nimport { AuthJwtGuard } from '@concepta/nestjs-auth-jwt';\n@Controller('user')\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private petService: PetService,\n  ) {}\n  @Get()\n  async findAll(): Promise<User[]> {\n    return this.userService.findAll();\n  }\n  @Post()\n  async create(@Body() userData: Partial<User>): Promise<User> {\n    return this.userService.create(userData);\n  }\n  @Get(':id/pets')\n  async getPets(@Param('id') userId: number) {\n    return this.petService.findByUserId(userId);\n  }\n}","step-4-configure-the-module#Step 4: Configure the Module":"Configure the module to include the necessary services, controllers, and guards.\nimport { TypeOrmExtModule } from '@concepta/nestjs-typeorm-ext';\nimport { Module } from '@nestjs/common';\nimport { Pet } from './entity/pet.entity';\nimport { User } from './user/user.entity';\nimport { JwtModule } from '@concepta/nestjs-jwt';\nimport { AuthenticationModule } from '@concepta/nestjs-authentication';\nimport { AuthJwtModule } from '@concepta/nestjs-auth-jwt';\nimport { MyJwtUserLookupService } from './services/my-jwt-user-lookup.service';\nimport { AuthLocalModule } from '@concepta/nestjs-auth-local';\nimport { MyAuthLocalUserLookupService } from './services/my-auth-local-user-lookup.service';\nimport { MyAuthLocalPasswordValidationService } from './services/my-auth-local-password-validation.service';\nimport { MyJwtVerifyTokenService } from './services/jwt-verify-token.service';\n@Module({\n  imports: [\n    TypeOrmExtModule.forRoot({\n      type: 'sqlite',\n      database: ':memory:',\n      synchronize: true,\n      entities: [User, Pet],\n    }),\n    AuthLocalModule.forRoot({\n      // this service contains the byUsername method\n      userLookupService: new MyAuthLocalUserLookupService(),\n      // this service contains the validate the password logic\n      passwordValidationService: new MyAuthLocalPasswordValidationService(), //\n    }),\n    AuthJwtModule.forRoot({\n      // this contains the bySubject method that will get user based on the token\n      userLookupService: new MyJwtUserLookupService(),\n      // service to validate the jwt token\n      verifyTokenService: new MyJwtVerifyTokenService(),\n    }),\n    AuthenticationModule.forRoot({}),\n    JwtModule.forRoot({}),\n  ],\n})\nexport class AppModule {}","first-authentication-with-jwt#First Authentication with JWT":"","validating-the-setup#Validating the Setup":"To validate the setup, you can use curl commands to simulate frontend requests.By following these steps, you can validate that the setup is working correctly\nand that authenticated requests to the user endpoint return the\nexpected list of pets for a given user.Here are the steps to test the user endpoint:","step-1-obtain-a-jwt-token#Step 1: Obtain a JWT Token":"The AuthLocalModule provide a controller with an authentication\nendpoint to obtain a JWT token, use curl to get the token.Replace [auth-url] with your actual authentication URL, and\n[username] and [password] with valid credentials. For our demo,\nsince we overwrote the passwordValidationService, we can use any password.\ncurl -X POST [auth-url] \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"[username]\", \"password\": \"[password]\"}'\nThis should return a response with a JWT token, which you'll use for\nauthenticated requests.","step-2-make-an-authenticated-request#Step 2: Make an Authenticated Request":"Use the JWT token obtained in the previous step to make an authenticated request\nto the user endpoint. Replace [jwt-token].\ncurl -X GET http://localhost:3000/user \\\n  -H \"Authorization: Bearer [jwt-token]\"","example-curl-calls#Example Curl Calls":"Here is an example sequence of curl commands:","obtain-a-jwt-token#Obtain a JWT token":"curl -X POST http://localhost:3000/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"testuser\", \"password\": \"testpassword\"}'","example-jwt-response#Example JWT response":"{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}","make-an-authenticated-request-using-the-token#Make an authenticated request using the token":"Assuming that are alerady inserted the user and its pets, let's try to retrieve it.\ncurl -X GET http://localhost:3000/user/5b3f5fd3-9426-4c4d-a06d-b4d55079034d/pets \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"","example-authenticated-response#Example authenticated response":"[\n  {\n    \"id\": 1,\n    \"name\": \"Fluffy\",\n    \"user\": {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"pets\": []\n    }\n  }\n]\nTo get authenticated user, we can use the decorator @AuthUser()\nthis will return whatever was defined at bySubject method from\nMyJwtUserLookupService.\n@Get(':id/pets')\n  async getPets(\n    @AuthUser() user: User,\n    @Param('id') userId: number\n  ) {\n    if (user.id !== userId) throw new UnauthorizedException()\n    return this.petService.findByUserId(userId);\n  }","how-to-guides#How to Guides":"","1-how-to-set-up-authenticationmodule-with-forroot-and-jwtmodule-from-conceptanestjs-jwt#1. How to Set Up AuthenticationModule with forRoot and JwtModule from @concepta/nestjs-jwt":"The @concepta/nestjs-authentication module is designed to integrate\nseamlessly with other modules in the authentication suite, such as\n@concepta/nestjs-auth-jwt, @concepta/nestjs-auth-local,\n@concepta/nestjs-auth-recovery, and @concepta/nestjs-auth-refresh.For optimal functionality, it is recommended to use these modules\ntogether to address various aspects of authentication and token management\nin your NestJS application.To set up the nestjs-authentication module, begin by installing the\nnecessary packages using your package manager.Here is a basic example using yarn:yarn add @nestjs-authentication @concepta/nestjs-jwt","example-setup#Example Setup":"To set up the AuthenticationModule and JwtModule, follow these steps:Import the modules in your application module:\n//...\n  AuthenticationModule.forRoot({}),\n  AuthJwtModule.forRoot({\n    // this lookup contains bySubject method\n    userLookupService: new JwtUserLookupService(),\n  }),\n  JwtModule.forRoot({\n    secret: 'your-secret-key',\n    signOptions: { expiresIn: '60s' },\n  }),\n//...\nThis setup configures the AuthenticationModule with global\nsettings and integrates the JwtModule for JWT-based authentication.","2-how-to-configure-authenticationmodule-settings#2. How to Configure AuthenticationModule Settings":"The AuthenticationModule provides several configurable settings to\ncustomize its behavior. Each setting can be defined in the module\nconfiguration and will create default services to be used in other modules.","settings-example#Settings Example":"Here is an example of how to configure each property of the settings:","1-enableguards-enables-or-disables-guards-globally#1. enableGuards: Enables or disables guards globally":"//...\nAuthenticationModule.forRoot({\n  settings: {\n    enableGuards: true, // Enables guards globally\n  },\n}),\n//...","2-issuetokenservice-custom-service-for-issuing-tokens#2. issueTokenService: Custom service for issuing tokens":"//...\n  AuthenticationModule.forRoot({\n    issueTokenService: new MyIssueTokenService(), // Custom token issuance service\n  }),\n//...\nImplementation :\nimport { Injectable } from '@nestjs/common';\nimport { JwtIssueService } from '@concepta/nestjs-jwt';\nimport { AuthenticationResponseInterface } from '@concepta/ts-common';\nimport { IssueTokenServiceInterface } from '../interfaces/issue-token-service.interface';\n@Injectable()\nexport class MyIssueTokenService implements IssueTokenServiceInterface {\n  constructor(protected readonly jwtIssueService: JwtIssueService) {}\n  async accessToken(...args: Parameters<JwtIssueService['accessToken']>) {\n    return this.jwtIssueService.accessToken(...args);\n  }\n  async refreshToken(...args: Parameters<JwtIssueService['refreshToken']>) {\n    return this.jwtIssueService.refreshToken(...args);\n  }\n  async responsePayload(\n    id: string,\n  ): Promise<AuthenticationResponseInterface> {\n    const payload = { sub: id };\n    const dto = new AuthenticationJwtResponseDto();\n    dto.accessToken = await this.accessToken(payload);\n    dto.refreshToken = await this.refreshToken(payload);\n    return dto;\n  }\n}","3-verifytokenservice-custom-service-for-verifying-tokens#3. verifyTokenService: Custom service for verifying tokens":"//...\n  AuthenticationModule.forRoot({\n    verifyTokenService: new MyVerifyTokenService(), // Custom token verification service\n  }),\n//...\nImplementation:\nimport { Injectable } from '@nestjs/common';\nimport { JwtVerifyService } from '@concepta/nestjs-jwt';\nimport { ValidateTokenServiceInterface } from '../interfaces/validate-token-service.interface';\nimport { VerifyTokenServiceInterface } from '../interfaces/verify-token-service.interface';\nimport { BadRequestException } from '@nestjs/common';\n@Injectable()\nexport class MyVerifyTokenService implements VerifyTokenServiceInterface {\n  constructor(\n    protected readonly jwtVerifyService: JwtVerifyService,\n    protected readonly validateTokenService?: ValidateTokenServiceInterface,\n  ) {}\n  async accessToken(...args: Parameters<JwtVerifyService['accessToken']>) {\n    const token = await this.jwtVerifyService.accessToken(...args);\n    if (await this.validateToken(token)) {\n      return token;\n    } else {\n      throw new BadRequestException(\n        'Access token was verified, but failed further validation.',\n      );\n    }\n  }\n  async refreshToken(...args: Parameters<JwtVerifyService['refreshToken']>) {\n    const token = await this.jwtVerifyService.refreshToken(...args);\n    if (await this.validateToken(token)) {\n      return token;\n    } else {\n      throw new BadRequestException(\n        'Refresh token was verified, but failed further validation.',\n      );\n    }\n  }\n  private async validateToken(\n    payload: Record<string, unknown>,\n  ): Promise<boolean> {\n    if (this.validateTokenService) {\n      return this.validateTokenService.validateToken(payload);\n    } else {\n      return true;\n    }\n  }\n}","4-validatetokenservice-custom-service-for-validating-tokens#4. validateTokenService: Custom service for validating tokens":"//...\nAuthenticationModule.forRoot({\n  validateTokenService: new MyValidateTokenService(), // Custom token validation service\n}),\n//...\nImplementation:\nimport { Injectable } from '@nestjs/common';\nimport { ValidateTokenServiceInterface } from '../interfaces/validate-token-service.interface';\n@Injectable()\nexport class MyValidateTokenService implements ValidateTokenServiceInterface {\n  async validateToken(payload: Record<string, unknown>): Promise<boolean> {\n    // Custom logic to validate the token\n    return true;\n  }\n}","explanation#Explanation":"","conceptual-overview#Conceptual Overview":"","what-is-this-library#What is This Library?":"The @concepta/nestjs-authentication library is a comprehensive\nsolution for managing authentication processes within a NestJS application.\nIt provides services for issuing JWTs, validating user credentials, and\nverifying tokens.The library integrates seamlessly with other modules in the authentication\nsuite, such as @concepta/nestjs-auth-jwt, @concepta/nestjs-auth-local,\n@concepta/nestjs-auth-recovery, and @concepta/nestjs-auth-refresh, making\nit a versatile choice for various authentication needs.","benefits-of-using-this-library#Benefits of Using This Library":"Secure Token Management: Robust mechanisms for issuing and managing\naccess and refresh tokens.\nAbstract User Validation Service: Flexible user validation service that\ncan be customized to meet specific requirements.\nToken Verification: Capabilities to verify the authenticity and validity\nof tokens, with support for additional custom validations.\nCustomizable and Extensible: Designed to be flexible, allowing\ncustomization of token generation, user validation, and token verification\nprocesses.\nIntegration with NestJS Ecosystem: Seamlessly integrates with other\nNestJS modules and services, leveraging the framework's features for enhanced\nfunctionality and performance.","design-choices#Design Choices":"","why-use-nestjs-guards#Why Use NestJS Guards?":"NestJS guards provide a way to control access to various parts of the\napplication by checking certain conditions before the route handler is executed.\nIn the nestjs-authentication module, guards are used to implement\nauthentication and authorization logic. By using guards, developers can apply\nsecurity policies across routes efficiently, ensuring that only authenticated\nand authorized users can access protected resources.","global-synchronous-vs-asynchronous-registration#Global, Synchronous vs Asynchronous Registration":"The nestjs-authentication module supports both synchronous and asynchronous\nregistration:\nGlobal Registration: Makes the module available throughout the entire\napplication. This approach is useful when JWT authentication is required across\nall or most routes in the application.\nSynchronous Registration: This method is used when the configuration\noptions are static and available at application startup. It simplifies the\nsetup process and is suitable for most use cases where configuration values do\nnot depend on external services.\nAsynchronous Registration: This method is beneficial when configuration\noptions need to be retrieved from external sources, such as a database or an\nexternal API, at runtime. It allows for more flexible and dynamic\nconfiguration but requires an asynchronous factory function.","integration-details#Integration Details":"","integrating-with-other-modules#Integrating with Other Modules":"The nestjs-authentication module integrates smoothly with other modules in the\nauthentication suite. Here are some integration details:\n@concepta/nestjs-auth-jwt: Use @concepta/nestjs-auth-jwt for JWT-based\nauthentication. Configure it to handle the issuance and verification of JWT\ntokens.\n@concepta/nestjs-auth-local: Use @concepta/nestjs-auth-local for local\nauthentication strategies such as username and password.\n@concepta/nestjs-auth-recovery: Use @concepta/nestjs-auth-recovery for\naccount recovery processes like password reset.\n@concepta/nestjs-auth-refresh: Use @concepta/nestjs-auth-refresh for\nhandling token refresh mechanisms.\nBy combining these modules, you can create a comprehensive authentication system\nthat meets various security requirements and user needs."}},"/reference/rockets/nestjs-auth-refresh/README":{"title":"Rockets NestJS Refresh Authentication","data":{"":"Authenticate requests using JWT refresh tokens passed via\nthe request (headers, cookies, body, query, etc).","project#Project":"","table-of-contents#Table of Contents":"Tutorials\n1. Getting Started with AuthRefreshModule\n1.1 Introduction\nOverview of the Library\nPurpose and Key Features\n1.2 Installation\nInstall the AuthRefreshModule package\nAdd the AuthRefreshModule to Your NestJS Application\n1.3 Basic Setup in a NestJS Project\nScenario: Refreshing JWT Tokens\nAdding AuthRefreshModule to your NestJS Application\n1.4 First Token Refresh\nValidating the Setup\nStep 1: Obtain a Refresh Token\nStep 2: Refresh the JWT Token\nExample CURL Calls\nObtain a Refresh Token\nExample Refresh Token Response\nRefresh the JWT Token\nHow-To Guides\n1. Registering AuthRefreshModule Synchronously\n2. Registering AuthRefreshModule Asynchronously\n3. Global Registering AuthRefreshModule Asynchronously\n4. Using Custom User Lookup Service\n5. Implementing and Using Custom Token Verification Service\n6. Overwriting the Settings\n7. Integration with Other NestJS Modules\nEngineering Concepts\nConceptual Overview of JWT Refresh Tokens\nWhat is a Refresh Token?\nBenefits of Using Refresh Tokens\nDesign Choices in AuthRefreshModule\nWhy Use NestJS Guards?\nSynchronous vs Asynchronous Registration\nGlobal vs Feature-Specific Registration\nIntegrating AuthRefreshModule with Other Modules\nHow AuthRefreshModule Works with AuthJwtModule\nIntegrating with AuthLocalModule","tutorials#Tutorials":"","1-getting-started-with-authrefreshmodule#1. Getting Started with AuthRefreshModule":"","11-introduction#1.1 Introduction":"","overview-of-the-library#Overview of the Library":"The AuthRefreshModule is a powerful yet easy-to-use NestJS\nmodule designed for implementing JWT refresh token functionality.\nWith a few simple steps, you can integrate secure token refreshing\ninto your application without hassle.","purpose-and-key-features#Purpose and Key Features":"Ease of Use: The primary goal of AuthRefreshModule is to\nsimplify the process of adding JWT refresh token functionality to your\nNestJS application. All you need to do is provide configuration data, and\nthe module handles the rest.\nSynchronous and Asynchronous Registration: Flexibly register the module\neither synchronously or asynchronously, depending on your application's needs.\nGlobal and Feature-Specific Registration: Register the module globally or\nfor specific features within your application, allowing for more granular\ncontrol over authentication and authorization requirements.","12-installation#1.2 Installation":"","install-the-authrefreshmodule-package#Install the AuthRefreshModule package":"To install the AuthRefreshModule package, run the following command in\nyour terminal:\nnpm install @concepta/nestjs-auth-refresh","add-the-authrefreshmodule-to-your-nestjs-application#Add the AuthRefreshModule to Your NestJS Application":"To add the AuthRefreshModule to your NestJS application, import the module in\nyour main application module (usually app.module.ts) and register it using the\nforRoot or forRootAsync method:\nimport { AuthRefreshModule } from '@concepta/nestjs-auth-refresh';\n@Module({\n  imports: [\n    AuthRefreshModule.forRoot({\n      // Configuration options\n    }),\n  ],\n})\nexport class AppModule {}","13-basic-setup-in-a-nestjs-project#1.3 Basic Setup in a NestJS Project":"","scenario-refreshing-jwt-tokens#Scenario: Refreshing JWT Tokens":"To demonstrate the basic setup of the AuthRefreshModule, let's consider\na scenario where we want to refresh JWT tokens. In this example, we will use\n@concepta/nestjs-auth-refresh in conjunction with other essential modules\nsuch as @concepta/nestjs-auth-jwt, @concepta/nestjs-auth-local, and\n@concepta/nestjs-authentication. These modules work together to provide a\ncomprehensive and secure token refresh mechanism.For more detailed instructions on setting up the authentication modules,\nplease refer to the Authentication Module Documentation.\nWe will continue with the tutorial in the Authentication Module Documentation.","adding-authrefreshmodule-to-your-nestjs-application#Adding AuthRefreshModule to your NestJS Application":"To add the AuthRefreshModule to your NestJS application, import the module\nin your main application module (usually app.module.ts) and register it\nusing the forRoot or forRootAsync method, let's use the\nMyJwtUserLookupService created at\nAuthentication Module Documentation:\n//...\nAuthRefreshModule.forRoot({\n  userLookupService: new MyJwtUserLookupService()\n}),\n//... \nAdditionally, you can take advantage of the MyUserLookupService\nfrom the @concepta/nestjs-user module to streamline user lookup\noperations within your authentication flow, check\nUser Module Documentation for reference:\nBy default, AuthRefreshModule uses services defined in the\nAuthenticationModule to verify refresh tokens. However, you\ncan override this behavior by providing a custom service specifically for the\nrefresh token implementation during the module setup.","14-first-token-refresh#1.4 First Token Refresh":"","validating-the-setup#Validating the Setup":"To validate the setup, let's test the refresh token functionality using CURL commands.","step-1-obtain-a-refresh-token#Step 1: Obtain a Refresh Token":"First, obtain a refresh token by sending a request to the /auth/login\nendpoint with valid credentials:\ncurl -X POST \\\n  http://localhost:3000/auth/login\\\n  -H 'Content-Type: application/json' \\\n  -d '{\"username\":\"user@example.com\",\"password\":\"password\"}'\nThis should return a response with an access token and a refresh token.","step-2-refresh-the-jwt-token#Step 2: Refresh the JWT Token":"Next, use the obtained refresh token to refresh the JWT token:\ncurl -X POST \\\n  http://localhost:3000/auth/refresh \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"refreshToken\":\"[refresh_token_value]\"}'\nThis should return a new access token and a new refresh token.","example-curl-calls#Example CURL Calls":"","obtain-a-refresh-token#Obtain a Refresh Token":"curl -X POST \\\n  http://localhost:3000/auth/login \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"username\":\"user@example.com\",\"password\":\"password\"}'","example-refresh-token-response#Example Refresh Token Response":"{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cC...\",\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cC...\"\n}","refresh-the-jwt-token#Refresh the JWT Token":"curl -X POST \\\n  http://localhost:3000/auth/refresh \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"refreshToken\":\"eyJhbGciOiJIUzI1NiIsInR5cC...\"}'","response-example#Response (example)":"{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cC...\",\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cC...\"\n}","how-to-guides#How-To Guides":"","1-registering-authrefreshmodule-synchronously#1. Registering AuthRefreshModule Synchronously":"//...\nAuthRefreshModule.register({\n  userLookupService: new MyUserLookupService(),\n  issueTokenService: new MyIssueTokenService(),\n}),\n//...","2-registering-authrefreshmodule-asynchronously#2. Registering AuthRefreshModule Asynchronously":"//...\nAuthRefreshModule.registerAsync({\n  inject: [MyUserLookupService, MyIssueTokenService],\n  useFactory: async (\n    userLookupService: MyUserLookupService,\n    issueTokenService: MyIssueTokenService\n  ) => ({\n    userLookupService,\n    issueTokenService,\n  }),\n}),\n//...","3-global-registering-authrefreshmodule-asynchronously#3. Global Registering AuthRefreshModule Asynchronously":"//...\nAuthRefreshModule.forRootAsync({\n  inject: [MyUserLookupService, MyIssueTokenService],\n  useFactory: async (\n    userLookupService: MyUserLookupService,\n    issueTokenService: MyIssueTokenService\n  ) => ({\n    userLookupService,\n    issueTokenService,\n  }),\n}),\n//...","4-using-custom-user-lookup-service#4. Using Custom User Lookup Service":"//...\n@Injectable()\nexport class MyUserLookupService extends AuthRefreshUserLookupServiceInterface {\n  constructor(private userService: UserService) {}\n  async bySubject(subject: ReferenceSubject): Promise<ReferenceIdInterface> {\n    // return authorized user\n    return this.userService.findOne(subject);\n  }\n}\n//...","5-implementing-and-using-custom-token-verification-service#5. Implementing and Using Custom Token Verification Service":"By default, AuthRefreshModule uses services defined in the\nAuthenticationModule to verify refresh tokens. However, you\ncan override this behavior by providing a custom service specifically for\nthe refresh token implementation during the module setup.For more details on implementing a custom token verification service, refer to\nsection 5 of the How-To Guide in the\n@concepta/nestjs-auth-jwt documentation.","6-overwriting-the-settings#6. Overwriting the Settings":"// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { ExtractJwt } from '@concepta/nestjs-jwt';\nimport { AuthRefreshModule, AuthRefreshSettingsInterface } from '@concepta/nestjs-auth-refresh';\nconst settings: AuthRefreshSettingsInterface = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  verifyToken: async (token: string, done: (error: any, payload?: any) => void) => {\n    try {\n      const payload = { id: 'user-id' };\n      done(null, payload);\n    } catch (error) {\n      done(error);\n    }\n  },\n};\n@Module({\n  imports: [\n    AuthRefreshModule.registerAsync({\n      useFactory: async () => ({\n        settings,\n      }),\n    }),\n  ],\n})\nexport class AppModule {}","7-integration-with-other-nestjs-modules#7. Integration with Other NestJS Modules":"Integrate @concepta/nestjs-auth-refresh with other NestJS modules\nlike @concepta/nestjs-user, @concepta/nestjs-auth-local,\n@concepta/nestjs-auth-jwt, and more for a comprehensive\nauthentication system.","engineering-concepts#Engineering Concepts":"","conceptual-overview-of-jwt-refresh-tokens#Conceptual Overview of JWT Refresh Tokens":"","what-is-a-refresh-token#What is a Refresh Token?":"A refresh token is a special token used to obtain a new access token\nwithout requiring the user to re-authenticate. It is typically issued\nalongside the access token and has a longer expiration time.","benefits-of-using-refresh-tokens#Benefits of Using Refresh Tokens":"Improved Security: By using refresh tokens, access tokens can\nhave shorter lifespans, reducing the risk of token theft.\nEnhanced User Experience: Users do not need to log in frequently,\nas refresh tokens can be used to obtain new access tokens seamlessly.\nScalability: Refresh tokens allow for stateless authentication,\nwhich is ideal for scalable applications.","design-choices-in-authrefreshmodule#Design Choices in AuthRefreshModule":"","why-use-nestjs-guards#Why Use NestJS Guards?":"NestJS guards provide a way to control access to various parts of the\napplication by checking certain conditions before the route handler is\nexecuted. In AuthRefreshModule, guards are used to implement authentication\nand authorization logic. By using guards, developers can apply security\npolicies across routes efficiently, ensuring that only authenticated\nand authorized users can access protected resources.","synchronous-vs-asynchronous-registration#Synchronous vs Asynchronous Registration":"The AuthRefreshModule supports both synchronous and asynchronous\nregistration:\nSynchronous Registration: This method is used when the configuration\noptions are static and available at application startup. It simplifies the\nsetup process and is suitable for most use cases where configuration values\ndo not depend on external services.\nAsynchronous Registration: This method is beneficial when configuration\noptions need to be retrieved from external sources, such as a database or an\nexternal API, at runtime. It allows for more flexible and dynamic\nconfiguration but requires an asynchronous factory function.","global-vs-feature-specific-registration#Global vs Feature-Specific Registration":"The AuthRefreshModule can be registered globally or for specific features:\nGlobal Registration: Makes the module available throughout the entire\napplication. This approach is useful when JWT refresh functionality is\nrequired across all or most routes in the application.\nFeature-Specific Registration: Allows the module to be registered\nonly for specific features or modules within the application. This provides\nmore granular control, enabling different parts of the application to have\ndistinct authentication and authorization requirements.","integrating-authrefreshmodule-with-other-modules#Integrating AuthRefreshModule with Other Modules":"","how-authrefreshmodule-works-with-authjwtmodule#How AuthRefreshModule Works with AuthJwtModule":"The AuthRefreshModule can be seamlessly integrated with the\nAuthJwtModule to provide a comprehensive authentication solution.\nAuthJwtModule handles the initial authentication using JWT tokens.Once the user is authenticated, AuthRefreshModule can issue a refresh\ntoken that the user can use to obtain new access tokens. This integration\nallows for secure and efficient authentication processes combining the\nstrengths of both modules.","integrating-with-authlocalmodule#Integrating with AuthLocalModule":"Integrating AuthRefreshModule with AuthLocalModule enables the\napplication to handle token refresh logic alongside local authentication.\nThis setup enhances the user experience by maintaining sessions securely and\nseamlessly. The integration involves configuring both modules to use the same\ntoken issuance and verification mechanisms, ensuring smooth interoperability\nand security."}},"/reference/rockets/nestjs-cache/README":{"title":"Rockets NestJS Cache Documentation","data":{"":"The Rockets NestJS Cache module offers a robust caching solution for NestJS\napplications, enhancing data management efficiency. It integrates seamlessly\nwith the NestJS framework, supporting both synchronous and asynchronous\nregistration of cache configurations. This module enables CRUD operations on\ncache entries directly from the database, facilitating data reuse across\ndifferent parts of an application or even different applications. It is\nespecially useful for boosting application performance, reducing database load,\nand improving user experience by minimizing data retrieval times.","project#Project":"","table-of-contents#Table of Contents":"Tutorials\nGetting Started with Rockets NestJS Cache\nIntroduction\nInstallation\nBasic Setup in a NestJS Project\nUsing the RestFull endpoints to access cache\nHow-to Guides\nRegistering CacheModule Synchronously\nRegistering CacheModule Asynchronously\nGlobal Registering CacheModule Asynchronously\nRegistering CacheModule Asynchronously for Multiple Entities\nUsing the CacheService to Access Cache\nReference\nExplanation\nConceptual Overview of Caching\nWhat is Caching?\nBenefits of Using Cache\nWhy Use NestJS Cache?\nWhen to Use NestJS Cache\nHow CacheOptionsInterface is Used in the Controller and Endpoints\nDesign Choices in CacheModule\nSynchronous vs Asynchronous Registration","tutorials#Tutorials":"","getting-started-with-rockets-nestjs-cache#Getting Started with Rockets NestJS Cache":"","introduction#Introduction":"The Rockets NestJS Cache module is designed to provide an easy and efficient way\nto manage cached data in your application. This tutorial will guide you through\nthe initial steps to set up and use the Rockets NestJS Cache module.","installation#Installation":"To install the module, use the following command:\nnpm install typeorm\nnpm install class-transformer\nnpm install class-validator\nnpm install @nestjs/typeorm\nnpm install @concepta/nestjs-crud\nnpm install @concepta/nestjs-typeorm-ext\nnpm install @concepta/nestjs-cache\nor\nyarn add typeorm \nyarn add class-transformer\nyarn add class-validator\nyarn add @nestjs/typeorm\nyarn add @concepta/nestjs-crud\nyarn add @concepta/nestjs-typeorm-ext\nyarn add @concepta/nestjs-cache\nOn this documentation we will use sqlite3 as database, but you can use\nwhatever you want\nyarn add sqlite3","basic-setup-in-a-nestjs-project#Basic Setup in a NestJS Project":"User Module: Let's create a simple UserModule with Entity, Service,\nController, and Module, to be used in our tutorial so we can cache\nuser-related information with the cache module:\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { UserCache } from '../user-cache/user-cache.entity';\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column()\n  name: string;\n  @OneToMany(() => UserCache, (userCache) => userCache.assignee)\n  userCaches!: UserCache[];\n}\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository<User>,\n  ) {}\n  findAll(): Promise<User[]> {\n    return this.userRepository.find();\n  }\n  findOne(id: string): Promise<User> {\n    return this.userRepository.findOne({\n      where: { id },\n    });\n  }\n  async create(userData: Partial<User>): Promise<User> {\n    const newUser = this.userRepository.create(userData);\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n}\nimport { Controller, Get, Post, Body, Param } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User } from './user.entity';\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n  @Get()\n  async findAll(): Promise<User[]> {\n    return this.userService.findAll();\n  }\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise<User> {\n    return this.userService.findOne(id);\n  }\n  @Post()\n  async create(@Body() userData: Partial<User>): Promise<User>  {\n    return this.userService.create(userData);\n  }\n}\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { User } from './user.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\nUser Cache Module: Let's create the entity UserCache and the\nUserCacheModule that imports our CacheModule passing all configurations\nneeded. Please note that CacheSqliteEntity and CachePostgresEntity are\nprovided by the Rockets NestJS Cache module, so you can use them to create\nyour cache entity. They have a unique index with the following properties:\n'key', 'type', 'assignee.id' and it will throw a\nCacheEntityAlreadyExistsException if duplicated:\nimport { Entity, ManyToOne } from 'typeorm';\nimport { User } from '../user/user.entity';\nimport { CacheSqliteEntity } from '@concepta/nestjs-cache';\nimport { ReferenceIdInterface } from '@concepta/ts-core';\n@Entity()\nexport class UserCache extends CacheSqliteEntity {\n  @ManyToOne(() => User, (user) => user.userCaches)\n  assignee!: ReferenceIdInterface;\n}\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CrudModule } from '@concepta/nestjs-crud';\nimport { CacheModule } from '@concepta/nestjs-cache';\nimport { User } from '../user/user.entity';\nimport { UserCache } from './user-cache.entity';\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    CacheModule.register({\n      entities: {\n        userCache: {\n          entity: UserCache,\n        },\n      },\n      settings: {\n        assignments: {\n          user: { entityKey: 'userCache' },\n        },\n      },\n    }),\n    CrudModule.forRoot({}),\n  ],\n})\nexport class UserCacheModule {}\nApp Module:And let's create our app module to connect everything.\nimport { Module } from '@nestjs/common';\nimport { UserCacheModule } from './user-cache/user-cache.module';\nimport { UserModule } from './user/user.module';\nimport { User } from './user/user.entity';\nimport { UserCache } from './user-cache/user-cache.entity';\nimport { TypeOrmExtModule } from '@concepta/nestjs-typeorm-ext';\n@Module({\nimports: [\n  TypeOrmExtModule.forRoot({\n    type: 'sqlite',\n    database: ':memory:',\n    synchronize: true,\n    entities: [User, UserCache],\n  }),\n  UserCacheModule,\n  UserModule,\n],\ncontrollers: [],\nproviders: [],\n})\nexport class AppModule {}","using-the-restfull-endpoints-to-access-cache#Using the RestFull endpoints to access cache":"After setting up the basic configuration, you can start using the caching\nfunctionality in your application.\nassignments: {\n  user: { entityKey: 'userCache' },\n},\nThe code above will generate a route for the client to have access, the module\nwill generate the following endpoint /cache/user. This endpoint will be\nreferencing whatever entity was associated in the entities section, as you can\nsee below.\nentities: {\n    userCache: {\n    entity: UserCacheEntityFixture,\n  },\n},\nThis will make the following endpoints available:\nCreate (POST): To create a new cache entry, the request body should\nmatch the CacheCreatableInterface; Properties key, type and assignee.id\nare unique and will throw a CacheEntityAlreadyExistsException error on\nattempt to insert duplicated data:\nexport interface CacheCreatableInterface extends Pick<CacheInterface, 'key' | 'type' | 'data' | 'assignee'> {\n  expiresIn: string | null;\n}\nExample curl command:\ncurl -X POST http://your-api-url/cache/user \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"key\": \"exampleKey\",\n  \"type\": \"exampleType\",\n  \"data\": \"{data: 'example'}\",\n  \"assignee\": { id: 'exampleId'},\n  \"expiresIn\": \"1h\"\n}'\nRead (GET): To read a cache entry by its ID:\ncurl -X GET http://your-api-url/cache/user/{id}\nUpdate (PUT): To update an existing cache entry, the request body should\nmatch the CacheUpdatableInterface:\nexport interface CacheUpdatableInterface extends Pick<CacheInterface, 'key' | 'type' | 'data' | 'assignee'> {\n  expiresIn: string | null;\n}\nExample curl command:\ncurl -X PUT http://your-api-url/cache/user/{id} \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"key\": \"updatedKey\",\n  \"type\": \"updatedType\",\n  \"data\": \"updatedData\",\n  \"assignee\": \"updatedAssignee\",\n  \"expiresIn\": \"2d\"\n}'\nDelete (DELETE): To delete a cache entry by its ID:\ncurl -X DELETE http://your-api-url/cache/user/{id}\nReplace http://your-api-url with the actual base URL of your API, and {id}\nwith the actual ID of the cache entry you wish to interact with.\nTesting the cache: You can test the cache by creating a new user and\nthen accessing the cache endpoint:\ncurl -X POST http://your-api-url/user \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"name\": \"John Doe\",\n}'\nThe response will be something like this:\n{\n    \"name\": \"John Doe\",\n    \"id\": \"5f84d150-7ebd-4c59-997a-df65a5935123\"\n}\nNow, let's add something to the cache with reference of the user\ncurl -X POST http://your-api-url/cache/user \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"key\": \"user\",\n  \"type\": \"filter\",\n  \"data\": \"{data: 'example'}\",\n  \"assignee\": { \"id\": \"5f84d150-7ebd-4c59-997a-df65a5935123\"},\n  \"expiresIn\": \"1h\"\n}'\nIt will give you a response similar to this.\n{\n    \"id\": \"a70e629b-7e6d-4dcc-9e74-a2e376f1c19a\",\n    \"dateCreated\": \"2024-06-07T15:16:56.000Z\",\n    \"dateUpdated\": \"2024-06-07T15:16:56.000Z\",\n    \"dateDeleted\": null,\n    \"version\": 1,\n    \"key\": \"user\",\n    \"data\": \"{data: 'example'}\",\n    \"type\": \"filter\",\n    \"assignee\": {\n        \"id\": \"0e5bee5d-5d53-46ef-a94a-22aceea81fc5\"\n    }\n}\nNow, if you access the cache endpoint /cache/user, you will see the new user\ncached:\n  curl -X GET http://your-api-url/cache/user\n[\n  {\n      \"id\": \"24864a7e-372e-4426-97f0-7e1c7514be16\",\n      \"dateCreated\": \"2024-06-07T15:47:38.000Z\",\n      \"dateUpdated\": \"2024-06-07T15:47:38.000Z\",\n      \"dateDeleted\": null,\n      \"version\": 1,\n      \"key\": \"user\",\n      \"data\": \"{data: 'example'}\",\n      \"type\": \"filter\",\n      \"assignee\": {\n          \"id\": \"5f84d150-7ebd-4c59-997a-df65a5935123\"\n      }\n  }\n]","registering-cachemodule-synchronously#Registering CacheModule Synchronously":"To register the CacheModule synchronously, you can use the register method.\nThis method allows you to pass configuration options directly.\n@Module({\n  imports: [\n    CacheModule.register({\n      settings: {\n        assignments: {\n          user: { entityKey: 'userCache' },\n        },\n      },\n      entities: {\n        userCache: {\n          entity: UserCacheEntityFixture,\n        },\n      },\n    }),\n  ],\n})\nexport class AppModule {}","registering-cachemodule-asynchronously#Registering CacheModule Asynchronously":"For more advanced use cases, you can register the CacheModule asynchronously using\nthe registerAsync method. This method is useful when you need to perform\nasynchronous operations to get the configuration options.\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      useFactory: async () => ({\n        settings: {\n          assignments: {\n            user: { entityKey: 'userCache' },\n          },\n        },\n        entities: {\n          userCache: {\n            entity: UserCacheEntityFixture,\n          },\n        },\n      }),\n    }),\n  ],\n})\nexport class AppModule {}","global-registering-cachemodule-asynchronously#Global Registering CacheModule Asynchronously":"For more advanced use cases, you can register the global CacheModule asynchronously\nusing the forRootAsync method. This method is useful when you need to perform\nasynchronous operations to get the configuration options.\n@Module({\n  imports: [\n    CacheModule.forRootAsync({\n      useFactory: async () => ({\n        settings: {\n          assignments: {\n            user: { entityKey: 'userCache' },\n          },\n        },\n        entities: {\n          userCache: {\n            entity: UserCacheEntityFixture,\n          },\n        },\n      }),\n    }),\n  ],\n})\nexport class AppModule {}","registering-cachemodule-asynchronously-for-multiple-entities#Registering CacheModule Asynchronously for multiple entities":"This section demonstrates how to register the CacheModule asynchronously when\ndealing with multiple entities.","example#Example":"@Module({\n  imports: [\n    CacheModule.registerAsync({\n      useFactory: async () => ({\n        settings: {\n          assignments: {\n            user: { entityKey: 'userCache' },\n            pet: { entityKey: 'petCache' },\n          },\n        },\n        entities: {\n          userCache: {\n            entity: UserCacheEntityFixture,\n          },\n          petCache: {\n            entity: PetCacheEntity,\n          },\n        },\n      }),\n    }),\n  ],\n})\nexport class AppModule {}","using-the-cacheservice-to-access-cache#Using the CacheService to access cache":"The CacheService provided by the Rockets NestJS Cache module offers a\ncomprehensive set of methods to manage cache entries programmatically from the\nAPI side. This service allows for creating, updating, retrieving, and deleting\ncache entries, as well as managing cache entries for specific assignees. Below\nis an overview of how to use these services in your application.","creating-a-cache-entry#Creating a Cache Entry":"To create a new cache entry, you can use the create method of the CacheService.\nThis method requires specifying the cache assignment, the cache data, and\noptionally, query options.","cacheservice-methods-documentation#CacheService Methods Documentation":"CacheService is exported in the CacheModule, so\nBelow is a simple documentation for each method in the CacheService class, including\nexamples of how to use them.","1-createassignment-cache-queryoptions#1. create(assignment, cache, queryOptions)":"Creates a new cache entry.Parameters:\nassignment: The cache assignment.\ncache: The data to create, implementing CacheCreatableInterface.\nqueryOptions: Optional. Additional options for the query.\nExample:\nCreate a cache entry with a unique combination of key, type, and assignee.id:\nawait cacheService.create('userCache', {\n  key: 'userSession',\n  type: 'session',\n  data: { sessionData: 'abc123' },\n  assignee: { id: 'user1' },\n  expiresIn: '24h'\n});","2-updateassignment-cache-queryoptions#2. update(assignment, cache, queryOptions)":"Updates an existing cache entry.Parameters:\nassignment: The cache assignment.\ncache: The data to update, implementing CacheUpdatableInterface.\nqueryOptions: Optional. Additional options for the query.\nExample:\nUpdate a cache entry identified by key, type, and assignee.id:\nawait cacheService.update('userCache', {\n  key: 'userSession',\n  type: 'session',\n  data: { sessionData: 'updated123' },\n  assignee: { id: 'user1' }\n});","3-deleteassignment-cache-queryoptions#3. delete(assignment, cache, queryOptions)":"Deletes a cache entry.Parameters:\nassignment: The cache assignment.\ncache: The cache to delete, specifying key, type, and assignee.\nExample:\nDelete a cache entry using key, type, and assignee.id:\nawait cacheService.delete('userCache', {\n  key: 'userSession',\n  type: 'session',\n  assignee: { id: 'user1' }\n});","4-getassignedcachesassignment-cache-queryoptions#4. getAssignedCaches(assignment, cache, queryOptions)":"Retrieves all cache entries for a given assignee.Parameters:\nassignment: The cache assignment.\ncache: The cache to get assignments, specifying assignee.\nExample:\nRetrieve all caches for a specific assignee:\nconst caches = await cacheService.getAssignedCaches('userCache', { assignee: { id: 'userId' } });","5-getassignment-cache-queryoptions#5. get(assignment, cache, queryOptions)":"Retrieves a specific cache entry.Parameters:\nassignment: The cache assignment.\ncache: The cache to get, specifying key, type, and assignee.\nExample:\nRetrieve a specific cache entry using key, type, and assignee.id:\nconst cacheEntry = await cacheService.get('userCache', {\n  key: 'userSession',\n  type: 'session',\n  assignee: { id: 'user1' }\n});","6-clearassignment-cache-queryoptions#6. clear(assignment, cache, queryOptions)":"Clears all caches for a given assignee.Parameters:\nassignment: The cache assignment.\ncache: The cache to clear, specifying assignee.\nExample:\nClear all caches for a specific assignee:\nawait cacheService.clear('userCache', { assignee: { id: 'user1' } });\nThese methods provide a comprehensive interface for managing cache entries in a\nNestJS application using the CacheService. Each method supports optional query\noptions for more granular control over the database operations.","reference#Reference":"For detailed information on the properties, methods, and classes used in the\n@concepta/nestjs-cache, please refer to the API documentation\navailable at CacheModule API Documentation.\nThis documentation provides comprehensive details on the interfaces and services\nthat you can utilize to start using cache functionality within your NestJS\napplication.","explanation#Explanation":"","conceptual-overview-of-caching#Conceptual Overview of Caching":"","what-is-caching#What is Caching?":"Caching is a technique used to store copies of data in a temporary storage location\n(cache) so that future requests for that data can be served faster. It helps in\nreducing the time required to access data and decreases the load on the primary\ndata source.","benefits-of-using-cache#Benefits of Using Cache":"Improved Performance: By serving data from the cache, applications can\nrespond to requests faster than retrieving the data from the primary source\neach time.\nReduced Latency: Caching reduces the latency involved in data retrieval\noperations, improving the user experience.\nLower Database Load: By reducing the number of direct database queries,\ncaching helps in decreasing the load on the database, leading to better overall\nperformance.\nScalability: Caching allows applications to handle higher loads by serving\nfrequent requests from the cache instead of the database.","why-use-nestjs-cache#Why Use NestJS Cache?":"NestJS Cache provides a powerful and flexible caching solution that integrates\nseamlessly with the NestJS framework and stores your cache on the database, so\nyou can reuse it in any other part of your application or even in other\napplications that are calling your API. It allows developers to manage cached\ndata efficiently and provides built-in support for CRUD operations on cache\nentries. Here are some key reasons to use NestJS Cache:\nIntegration with NestJS Ecosystem: The module integrates well with other\nNestJS modules and leverages the framework's features, such as decorators and\ndependency injection.\nCustomizable and Extensible: It allows for customization through various\nconfiguration options and can be extended with custom services and guards.\nEase of Use: The module provides straightforward APIs for managing cache\nentries, making it easy to implement caching in your application.\nAutomatic Expiration Handling: The module can automatically handle\nexpiration times for cache entries, ensuring that stale data is not served.","when-to-use-nestjs-cache#When to Use NestJS Cache":"NestJS Cache is useful in scenarios where data is frequently accessed but does\nnot change often. It is also beneficial when the performance of data retrieval\noperations needs to be improved. Here are some examples of when to use NestJS\nCache:\nStoring Filters for a Specific Dashboard: If you have a dashboard with\ncomplex filters that are expensive to compute, you can cache the filters for\neach user. This way, subsequent requests can be served from the cache, reducing\nthe load on the server and improving response times.\nExample:\nWhen a user applies a filter on a dashboard, the filter settings can be cached.\nThe next time the user accesses the dashboard, the cached filter can be retrieved\nquickly without recomputing it.","how-cacheoptionsinterface-is-used-in-the-controller-and-endpoints#How CacheOptionsInterface is Used in the Controller and Endpoints":"The CacheSettingsInterface and CacheOptionsInterface are used to configure\nthe caching behavior in the CacheCrudController. The CacheCrudController\nprovides endpoints for CRUD operations on cache entries and uses these\ninterfaces to manage the settings and services for each cache assignment.\nCacheSettingsInterface manages how entities are assigned for caching and\nspecifies the expiration time for cache entries. It is used to ensure the\ncorrect service and configuration are applied to each cache assignment.\nCacheOptionsInterface includes the settings for managing cache assignments\nand expiration times. It is used to register and configure the CacheModule,\ndetermining which entities should be cached and how they should be handled.\nBy using these interfaces, the CacheCrudController can dynamically handle\ndifferent cache assignments and provide a consistent caching strategy across\nthe application. The endpoints in the controller allow for creating, reading,\nupdating, and deleting cache entries, ensuring that the caching behavior is\nflexible and easily configurable.","design-choices-in-cachemodule#Design Choices in CacheModule":"","global-vs-synchronous-vs-asynchronous-registration#Global vs Synchronous vs Asynchronous Registration":"Global Registration: Registers the CacheModule at the root level, making it\navailable throughout the entire application. It is useful for shared\nconfigurations that need to be applied universally.\nSynchronous Registration: This method is used when all configuration options\nare available at the time of module registration. It is simple and\nstraightforward, making it suitable for most use cases.\nAsynchronous Registration: This method is used when configuration options\nneed to be fetched or computed asynchronously. It provides greater flexibility\nand is useful for advanced scenarios where configuration depends on runtime\nconditions."}},"/reference/rockets/nestjs-exception/classes/RuntimeException":{"title":"Class: RuntimeException","data":{"extends#Extends":"Error","implements#Implements":"RuntimeExceptionInterface","constructors#Constructors":"","new-runtimeexception#new RuntimeException()":"new RuntimeException(options): RuntimeException","parameters#Parameters":"Parameter\tType\toptions\tRuntimeExceptionOptions","returns#Returns":"RuntimeException","overrides#Overrides":"Error.constructor","defined-in#Defined in":".tmp/repos/rockets/packages/nestjs-exception/src/exceptions/runtime.exception.ts:17","properties#Properties":"Property\tModifier\tType\tDefault value\tDescription\tInherited from\tcontext\tpublic\tRuntimeExceptionContext\t{}\tAdditional context\t-\tmessage\tpublic\tstring\tundefined\t-\tRuntimeExceptionInterface.message Error.message\tname\tpublic\tstring\tundefined\t-\tRuntimeExceptionInterface.name Error.name\tstack?\tpublic\tstring\tundefined\t-\tRuntimeExceptionInterface.stack Error.stack\tprepareStackTrace?\tstatic\t(err: Error, stackTraces: CallSite[]) => any\tundefined\tOptional override for formatting stack traces See https://v8.dev/docs/stack-trace-api#customizing-stack-traces\tError.prepareStackTrace\tstackTraceLimit\tstatic\tnumber\tundefined\t-\tError.stackTraceLimit","accessors#Accessors":"","errorcode#errorCode":"get errorCode(): string\nThe error code.\nset errorCode(v): void\nThe error code.","parameters-1#Parameters":"Parameter\tType\tv\tstring","returns-1#Returns":"string","implementation-of#Implementation of":"RuntimeExceptionInterface.errorCode","defined-in-1#Defined in":".tmp/repos/rockets/packages/nestjs-exception/src/exceptions/runtime.exception.ts:42","httpstatus#httpStatus":"get httpStatus(): HttpStatus\nOptional HTTP status code to use only when this exception is sent over an HTTP service.Please consider this to be a hint for API error responses.","returns-2#Returns":"HttpStatus","implementation-of-1#Implementation of":"RuntimeExceptionInterface.httpStatus","defined-in-2#Defined in":".tmp/repos/rockets/packages/nestjs-exception/src/exceptions/runtime.exception.ts:50","safemessage#safeMessage":"get safeMessage(): undefined | string\nIf set, this message will be used on responses instead of message.Use this when the main message might expose","returns-3#Returns":"undefined | string","implementation-of-2#Implementation of":"RuntimeExceptionInterface.safeMessage","defined-in-3#Defined in":".tmp/repos/rockets/packages/nestjs-exception/src/exceptions/runtime.exception.ts:54","methods#Methods":"","capturestacktrace#captureStackTrace()":"static captureStackTrace(targetObject, constructorOpt?): void\nCreate .stack property on a target object","parameters-2#Parameters":"Parameter\tType\ttargetObject\tobject\tconstructorOpt?\tFunction","returns-4#Returns":"void","inherited-from#Inherited from":"Error.captureStackTrace","defined-in-4#Defined in":".tmp/repos/rockets/node_modules/@types/node/globals.d.ts:4"}},"/reference/rockets/nestjs-jwt/README":{"title":"Rockets NestJS JWT","data":{"":"A flexible JWT utilities module for signing and validating tokens.This module extends/wraps the @nestjs/jwt module.","project#Project":"","project-1#Project":"","table-of-contents#Table of Contents":"Tutorials\nIntroduction\nOverview of the Library\nPurpose and Key Features\nInstallation\nBasic Setup\nCreating custom jwtIssueService\nEnvironment Variables\nHow to Guides\n1. How to Set Up JwtModule with forRoot\n2. How to Configure JwtModule Settings\n3. Overriding Defaults\nJwtAccessService\nJwtRefreshService\nJwtIssueService\nJwtVerifyService\nJwtSignService\nExplanation\nConceptual Overview\nWhat is This Library?\nBenefits of Using This Library\nDesign Choices\nGlobal, Synchronous vs Asynchronous Registration\nIntegration Details\nIntegrating with Other Modules\nReferences","introduction#Introduction":"","overview-of-the-library#Overview of the Library":"This module is designed to manage JWT authentication processes within a NestJS\napplication. It includes services for issuing JWTs, validating user credentials,\nand verifying tokens. The services handle the generation of access and refresh\ntokens, ensure users are active and meet authentication criteria, and perform\ntoken validity checks, including additional validations if necessary. This\ncomprehensive approach ensures secure user authentication and efficient token\nmanagement.","purpose-and-key-features#Purpose and Key Features":"Secure Token Management: Provides robust mechanisms for issuing and\nmanaging access and refresh tokens, ensuring secure and efficient token\nlifecycle management.\nAbstract User Validation Service: Offers an abstract service to validate\nuser credentials and check user activity status, ensuring that only eligible\nusers can authenticate. This abstract nature requires implementations to\ndefine specific validation logic, allowing flexibility across different user\nmodels and authentication requirements.\nToken Verification: Includes capabilities to verify the authenticity and\nvalidity of tokens, with support for additional custom validations to meet\nspecific security requirements.\nCustomizable and Extensible: Designed to be flexible, allowing\ncustomization of token generation, user validation, and token verification\nprocesses to suit different application needs.\nIntegration with NestJS Ecosystem: Seamlessly integrates with other\nNestJS modules and services, leveraging the framework's features for enhanced\nfunctionality and performance.","installation#Installation":"To get started, install the JwtModule package:sh-begin\nyarn add @concepta/nestjs-jwt\nsh-end","basic-setup#Basic Setup":"To set up the JwtModule, follow the basic setup tutorial in the\nnestjs-authentication README.","creating-custom-jwtissueservice#Creating custom jwtIssueService":"Here we will cover how to override the default services in JwtModule.\nFor example, to override the JwtIssueService, follow the steps below:\nCreate a custom implementation of JwtIssueService:\nimport { Injectable } from '@nestjs/common';\nimport { JwtIssueServiceInterface } from './interfaces/jwt-issue-service.interface';\nimport { JwtSignService } from './jwt-sign.service';\n@Injectable()\nexport class CustomJwtIssueService implements JwtIssueServiceInterface {\n  constructor(private readonly jwtSignService: JwtSignService) {}\n  async accessToken(...args: Parameters<JwtIssueServiceInterface['accessToken']>) {\n    return this.jwtSignService.signAsync('access', ...args);\n  }\n  async refreshToken(...args: Parameters<JwtIssueServiceInterface['refreshToken']>) {\n    return this.jwtSignService.signAsync('refresh', ...args);\n  }\n}\nProvide the custom implementation in your module configuration:\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@concepta/nestjs-jwt';\nimport { CustomJwtIssueService } from './custom-jwt-issue.service';\n@Module({\n  imports: [\n    JwtModule.forRoot({\n      jwtIssueService: CustomJwtIssueService,\n      settings: {\n        access: {\n          secret: 'your-secret-key',\n          signOptions: { expiresIn: '60s' },\n        },\n      },\n    }),\n  ],\n  providers: [CustomJwtIssueService],\n})\nexport class AppModule {}\nThis example shows how to customize the JwtIssueService with a custom\nimplementation. Similar steps can be followed to override other services in\nJwtModule.","environment-variables#environment variables":"Configurations available via environment.\nVariable\tType\tDefault\t\tJWT_MODULE_ACCESS_SECRET\t<string | Buffer>\trandomUUID() * see note\tAccess token secret\tJWT_MODULE_ACCESS_EXPIRES_IN\t<string | number>\t'1h'\tAccess token expiration length\tJWT_MODULE_REFRESH_SECRET\t<string | Buffer>\tcopied from access secret\tRefresh token secret\tJWT_MODULE_REFRESH_EXPIRES_IN\t<string | number>\t'1y'\tRefresh token expiration length\t\n* For security reasons, a random UUID will only be generated for the default secret when NODE_ENV !== 'production'.","1-how-to-set-up-jwtmodule-with-forroot#1. How to Set Up JwtModule with forRoot":"To set up the JwtModule, follow these steps:\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@concepta/nestjs-jwt';\n@Module({\n  imports: [\n    JwtModule.forRoot({}),\n  ],\n})\nexport class AppModule {}\nThis setup configures the JwtModule with global settings and integrates the\nJwtModule for JWT-based authentication.","2-how-to-configure-jwtmodule-settings#2. How to Configure JwtModule Settings":"The JwtModule provides several configurable settings to customize its\nbehavior. Each setting can be defined in the module configuration and will\ncreate default services to be used in other modules.","settings-example#Settings Example":"Here is an example of how to configure each property of the settings:\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@concepta/nestjs-jwt';\n@Module({\n  imports: [\n    JwtModule.forRoot({\n      settings: {\n        access: {\n          secret: 'your-secret-key',\n          signOptions: { expiresIn: '60s' },\n        },\n      },\n    }),\n  ],\n})\nexport class AppModule {}","3-overriding-defaults#3. Overriding Defaults":"To override the default services, you can provide custom implementations for\nany of the services.","jwtaccessservice#JwtAccessService":"@Injectable()\nimport { JwtService, JwtSignOptions } from '@nestjs/jwt';\nclass CustomJwtAccessService extends JwtService {\n  sign(_payload: string, _options?: JwtSignOptions): string {\n    return 'foo';\n  }\n}","jwtrefreshservice#jwtRefreshService":"@Injectable()\nimport { JwtService, JwtSignOptions } from '@nestjs/jwt';\nclass CustomRefreshJwtAccessService extends JwtService {\n  sign(_payload: string, _options?: JwtSignOptions): string {\n    return 'foo';\n  }\n}","jwtissueservice#JwtIssueService":"import { Injectable } from '@nestjs/common';\nimport { JwtIssueServiceInterface } from './interfaces/jwt-issue-service.interface';\nimport { JwtSignService } from './jwt-sign.service';\n@Injectable()\nexport class CustomJwtIssueService implements JwtIssueServiceInterface {\n  constructor(private readonly jwtSignService: JwtSignService) {}\n  async accessToken(...args: Parameters<JwtIssueServiceInterface['accessToken']>) {\n    // Custom implementation\n    return this.jwtSignService.signAsync('access', ...args);\n  }\n  async refreshToken(...args: Parameters<JwtIssueServiceInterface['refreshToken']>)   {\n    // Custom implementation\n    return this.jwtSignService.signAsync('refresh', ...args);\n  }\n}","jwtverifyservice#JwtVerifyService.":"import { Injectable } from '@nestjs/common';\nimport { JwtVerifyServiceInterface } from './interfaces/jwt-verify-service.interface';\nimport { JwtSignService } from './jwt-sign.service';\n@Injectable()\nexport class CustomJwtVerifyService implements JwtVerifyServiceInterface {\n  constructor(private readonly jwtSignService: JwtSignService) {}\n  async accessToken(...args: Parameters<JwtVerifyServiceInterface['accessToken']>) {\n    // Custom implementation\n    return this.jwtSignService.verifyAsync('access', ...args);\n  }\n  async refreshToken(...args: Parameters<JwtVerifyServiceInterface['refreshToken']>) {\n    // Custom implementation\n    return this.jwtSignService.verifyAsync('refresh', ...args);\n  }\n}","jwtsignservice#JwtSignService":"import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtSignServiceInterface } from '../interfaces/jwt-sign-service.interface';\nimport {\n  JWT_MODULE_JWT_ACCESS_SERVICE_TOKEN,\n  JWT_MODULE_JWT_REFRESH_SERVICE_TOKEN,\n} from '../jwt.constants';\nimport { JwtTokenType } from '../jwt.types';\n@Injectable()\nexport class CustomJwtSignService implements JwtSignServiceInterface {\n  constructor(\n    @Inject(JWT_MODULE_JWT_ACCESS_SERVICE_TOKEN)\n    protected readonly jwtAccessService: JwtService,\n    @Inject(JWT_MODULE_JWT_REFRESH_SERVICE_TOKEN)\n    protected readonly jwtRefreshService: JwtService,\n  ) {}\n  async signAsync(\n    tokenType: JwtTokenType,\n    ...rest: Parameters<JwtService['signAsync']>\n  ) {\n    return this.service(tokenType).signAsync(...rest);\n  }\n  async verifyAsync(\n    tokenType: JwtTokenType,\n    ...rest: Parameters<JwtService['verifyAsync']>\n  ) {\n    return this.service(tokenType).verifyAsync(...rest);\n  }\n  decode(tokenType: JwtTokenType, ...rest: Parameters<JwtService['decode']>) {\n    return this.service(tokenType).decode(...rest);\n  }\n  private service(tokenType: JwtTokenType): JwtService {\n    switch (tokenType) {\n      case 'access':\n        return this.jwtAccessService;\n      case 'refresh':\n        return this.jwtRefreshService;\n    }\n  }\n}\nProvide the custom implementations in your module configuration:\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@concepta/nestjs-jwt';\nimport { CustomJwtIssueService } from './custom-jwt-issue.service';\nimport { CustomJwtVerifyService } from './custom-jwt-verify.service';\n@Module({\n  imports: [\n    JwtModule.forRoot({\n      jwtIssueService: CustomJwtIssueService,\n      jwtVerifyService: CustomJwtVerifyService,\n      settings: {\n        access: {\n          secret: 'your-secret-key',\n          signOptions: { expiresIn: '60s' },\n        },\n      },\n    }),\n  ],\n  providers: [CustomJwtIssueService, CustomJwtVerifyService],\n})\nexport class AppModule {}\nThis example shows how to customize the JwtIssueService and JwtVerifyService\nwith custom implementations. Similar steps can be followed to override other\nservices in JwtModule.","conceptual-overview#Conceptual Overview":"","what-is-this-library#What is This Library?":"The nestjs-jwt library is a comprehensive solution for managing authentication\nprocesses within a NestJS application. It provides services for issuing JWTs,\nvalidating user credentials, and verifying tokens. The library integrates\nseamlessly with other modules in the nestjs-auth suite, making it a versatile\nchoice for various authentication needs.","benefits-of-using-this-library#Benefits of Using This Library":"Secure Token Management: Robust mechanisms for issuing and managing access\nand refresh tokens.\nAbstract User Validation Service: Flexible user validation service that\ncan be customized to meet specific requirements.\nToken Verification: Capabilities to verify the authenticity and validity\nof tokens, with support for additional custom validations.\nCustomizable and Extensible: Designed to be flexible, allowing\ncustomization of token generation, user validation, and token verification\nprocesses.\nIntegration with NestJS Ecosystem: Seamlessly integrates with other\nNestJS modules and services, leveraging the framework's features for enhanced\nfunctionality and performance.","design-choices#Design Choices":"","global-synchronous-vs-asynchronous-registration#Global, Synchronous vs Asynchronous Registration":"The nestjs-jwt module supports both synchronous and asynchronous registration:\nGlobal Registration: Makes the module available throughout the entire\napplication. This approach is useful when JWT authentication is required\nacross all or most routes in the application.\nSynchronous Registration: This method is used when the configuration\noptions are static and available at application startup. It simplifies the\nsetup process and is suitable for most use cases where configuration values do\nnot depend on external services.\nAsynchronous Registration: This method is beneficial when configuration\noptions need to be retrieved from external sources, such as a database or an\nexternal API, at runtime. It allows for more flexible and dynamic configuration\nbut requires an asynchronous factory function.","integration-details#Integration Details":"","integrating-with-other-modules#Integrating with Other Modules":"The nestjs-jwt module integrates smoothly with other modules in the\nnestjs-auth suite. Here are some integration details:\n@concepta/nestjs-auth-jwt: Use @concepta/nestjs-auth-jwt for JWT-based\nauthentication. Configure it to handle the issuance and verification of JWT\ntokens.\n@concepta/nestjs-auth-local: Use @concepta/nestjs-auth-local for local\nauthentication strategies such as username and password.\n@concepta/nestjs-auth-recovery: Use @concepta/nestjs-auth-recovery for\naccount recovery processes like password reset.\n@concepta/nestjs-auth-refresh: Use @concepta/nestjs-auth-refresh for\nhandling token refresh mechanisms.\nBy combining these modules, you can create a comprehensive authentication system\nthat meets various security requirements and user needs.","references#References":"For further details and external references, please visit the following link:External Authentication ReferencesThis link provides additional information and resources related to the\nauthentication processes and best practices in NestJS applications."}}}