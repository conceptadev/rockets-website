(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[25676],{72721:function(e,n,d){(window.__NEXT_P=window.__NEXT_P||[]).push(["/reference/rockets/nestjs-logger/interfaces/LoggerSentryConfigInterface",function(){return d(20436)}])},20436:function(e,n,d){"use strict";d.r(n),d.d(n,{__toc:function(){return i}});var t=d(85893),r=d(92673),s=d(82643);let i=[{depth:2,value:"Extends",id:"extends"},{depth:2,value:"Properties",id:"properties"},{depth:2,value:"Methods",id:"methods"},{depth:3,value:"onFatalError()?",id:"onfatalerror"},{depth:4,value:"Parameters",id:"parameters"},{depth:4,value:"Returns",id:"returns"},{depth:4,value:"Inherited from",id:"inherited-from"},{depth:4,value:"Defined in",id:"defined-in"}];function c(e){let n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",del:"del",strong:"strong",h3:"h3",blockquote:"blockquote",h4:"h4"},(0,s.a)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Interface: LoggerSentryConfigInterface"}),"\n",(0,t.jsx)(n.p,{children:"Interface for Sentry configuration to define the log level\nmapping to be used on Sentry transport."}),"\n",(0,t.jsx)(n.h2,{id:"extends",children:"Extends"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"NodeOptions"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Inherited from"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"_experiments?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"Options which are in beta, or otherwise not guaranteed to be stable."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions._experiments"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"_metadata?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SdkMetadata"})}),(0,t.jsx)(n.td,{children:"Set of metadata about the SDK that can be internally used to enhance envelopes and events, and provide additional data about every request."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions._metadata"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"attachStacktrace?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Attaches stacktraces to pure capture message / log integrations"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.attachStacktrace"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"autoSessionTracking?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"A flag enabling Sessions Tracking feature. By default, Sessions Tracking is enabled."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.autoSessionTracking"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"beforeBreadcrumb?"})}),(0,t.jsxs)(n.td,{children:["(",(0,t.jsx)(n.code,{children:"breadcrumb"}),": ",(0,t.jsx)(n.code,{children:"Breadcrumb"}),", ",(0,t.jsx)(n.code,{children:"hint"}),"?: ",(0,t.jsx)(n.code,{children:"BreadcrumbHint"}),") => ",(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"Breadcrumb"})]}),(0,t.jsx)(n.td,{children:"A callback invoked when adding a breadcrumb, allowing to optionally modify it before adding it to future events. Note that you must return a valid breadcrumb from this callback. If you do not wish to modify the breadcrumb, simply return it at the end. Returning null will cause the breadcrumb to be dropped."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.beforeBreadcrumb"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"beforeSend?"})}),(0,t.jsxs)(n.td,{children:["(",(0,t.jsx)(n.code,{children:"event"}),": ",(0,t.jsx)(n.code,{children:"Event"}),", ",(0,t.jsx)(n.code,{children:"hint"}),"?: ",(0,t.jsx)(n.code,{children:"EventHint"}),") => ",(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"Event"})," | ",(0,t.jsx)(n.code,{children:"PromiseLike"}),"<",(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"Event"}),">"]}),(0,t.jsx)(n.td,{children:"A callback invoked during event submission, allowing to optionally modify the event before it is sent to Sentry. Note that you must return a valid event from this callback. If you do not wish to modify the event, simply return it at the end. Returning null will cause the event to be dropped."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.beforeSend"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"caCerts?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"HTTPS proxy certificates path"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.caCerts"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"debug?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Enable debug functionality in the SDK itself"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.debug"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"defaultIntegrations?"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"false"})," | ",(0,t.jsx)(n.code,{children:"Integration"}),"[]"]}),(0,t.jsx)(n.td,{children:"If this is set to false, default integrations will not be added, otherwise this will internally be set to the recommended default integrations. TODO: We should consider changing this to `boolean"}),(0,t.jsx)(n.td,{children:"Integration[]`"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dist?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Sets the distribution for all events"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.dist"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dsn?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The Dsn used to connect to Sentry and identify the project. If omitted, the SDK will not send any data to Sentry."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.dsn"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"enabled?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Specifies whether this SDK should send events to Sentry. Defaults to true."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.enabled"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"environment?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:'The current environment of your application (e.g. "production").'}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.environment"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.del,{children:(0,t.jsx)(n.code,{children:"frameContextLines?"})})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsxs)(n.td,{children:["Sets the number of context lines for each frame when loading a file. ",(0,t.jsx)(n.strong,{children:"Deprecated"})," Context lines configuration has moved to the ",(0,t.jsx)(n.code,{children:"ContextLines"})," integration, and can be used like this: ",(0,t.jsx)(n.code,{children:"init({ dsn: '__DSN__', integrations: [new ContextLines({ frameContextLines: 10 })] })"})]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.frameContextLines"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"httpProxy?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Set a HTTP proxy that should be used for outbound requests."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.httpProxy"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"httpsProxy?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Set a HTTPS proxy that should be used for outbound requests."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.httpsProxy"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ignoreErrors?"})}),(0,t.jsxs)(n.td,{children:["(",(0,t.jsx)(n.code,{children:"string"})," | ",(0,t.jsx)(n.code,{children:"RegExp"}),")[]"]}),(0,t.jsx)(n.td,{children:"A pattern for error messages which should not be sent to Sentry. By default, all errors will be sent."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.ignoreErrors"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"initialScope?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"CaptureContext"})}),(0,t.jsx)(n.td,{children:"Initial data to populate scope."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.initialScope"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"integrations?"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Integration"}),"[] | (",(0,t.jsx)(n.code,{children:"integrations"}),") => ",(0,t.jsx)(n.code,{children:"Integration"}),"[]"]}),(0,t.jsx)(n.td,{children:"List of integrations that should be installed after SDK was initialized. Accepts either a list of integrations or a function that receives default integrations and returns a new, updated list."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.integrations"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"logLevelMap"})}),(0,t.jsxs)(n.td,{children:["(",(0,t.jsx)(n.code,{children:"logLevel"}),": ",(0,t.jsx)(n.code,{children:"LogLevel"}),") => ",(0,t.jsx)(n.code,{children:"Severity"})]}),(0,t.jsx)(n.td,{children:"Method to map the log level from the config with sentry log levels"}),(0,t.jsx)(n.td,{children:"-"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"maxBreadcrumbs?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The maximum number of breadcrumbs sent with events. Defaults to 100. Values over 100 will be ignored and 100 used instead."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.maxBreadcrumbs"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"maxValueLength?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"Maximum number of chars a single value can have before it will be truncated."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.maxValueLength"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"normalizeDepth?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsxs)(n.td,{children:["Maximum number of levels that normalization algorithm will traverse in objects and arrays. Used when normalizing an event before sending, on all of the listed attributes: - ",(0,t.jsx)(n.code,{children:"breadcrumbs.data"})," - ",(0,t.jsx)(n.code,{children:"user"})," - ",(0,t.jsx)(n.code,{children:"contexts"})," - ",(0,t.jsx)(n.code,{children:"extra"})," Defaults to ",(0,t.jsx)(n.code,{children:"3"}),". Set to ",(0,t.jsx)(n.code,{children:"0"})," to disable."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.normalizeDepth"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"normalizeMaxBreadth?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsxs)(n.td,{children:["Maximum number of properties or elements that the normalization algorithm will output in any single array or object included in the normalized event. Used when normalizing an event before sending, on all of the listed attributes: - ",(0,t.jsx)(n.code,{children:"breadcrumbs.data"})," - ",(0,t.jsx)(n.code,{children:"user"})," - ",(0,t.jsx)(n.code,{children:"contexts"})," - ",(0,t.jsx)(n.code,{children:"extra"})," Defaults to ",(0,t.jsx)(n.code,{children:"1000"})]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.normalizeMaxBreadth"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"release?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The release identifier used when uploading respective source maps. Specify this value to allow Sentry to resolve the correct source maps when processing events."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.release"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sampleRate?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"A global sample rate to apply to all events (0 - 1)."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.sampleRate"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sendClientReports?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Send SDK Client Reports. By default, Client Reports are enabled."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.sendClientReports"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"serverName?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Sets an optional server name (device name)"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.serverName"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"shutdownTimeout?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"Maximum time in milliseconds to wait to drain the request queue, before the process is allowed to exit."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.shutdownTimeout"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"tracesSampleRate?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsxs)(n.td,{children:["Sample rate to determine trace sampling. 0.0 = 0% chance of a given trace being sent (send no traces) 1.0 = 100% chance of a given trace being sent (send all traces) Tracing is enabled if either this or ",(0,t.jsx)(n.code,{children:"tracesSampler"})," is defined. If both are defined, ",(0,t.jsx)(n.code,{children:"tracesSampleRate"})," is ignored."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.tracesSampleRate"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"tracesSampler?"})}),(0,t.jsxs)(n.td,{children:["(",(0,t.jsx)(n.code,{children:"samplingContext"}),": ",(0,t.jsx)(n.code,{children:"SamplingContext"}),") => ",(0,t.jsx)(n.code,{children:"number"})," | ",(0,t.jsx)(n.code,{children:"boolean"})]}),(0,t.jsxs)(n.td,{children:["Function to compute tracing sample rate dynamically and filter unwanted traces. Tracing is enabled if either this or ",(0,t.jsx)(n.code,{children:"tracesSampleRate"})," is defined. If both are defined, ",(0,t.jsx)(n.code,{children:"tracesSampleRate"})," is ignored. Will automatically be passed a context object of default and optional custom data. See Transaction.samplingContext and Hub.startTransaction."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.tracesSampler"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"transport?"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"TransportClass"}),"<",(0,t.jsx)(n.code,{children:"Transport"}),">"]}),(0,t.jsx)(n.td,{children:"Transport object that should be used to send events to Sentry"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.transport"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"transportOptions?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"TransportOptions"})}),(0,t.jsx)(n.td,{children:"Options for the default transport that the SDK uses."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.transportOptions"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"tunnel?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"A URL to an envelope tunnel endpoint. An envelope tunnel is an HTTP endpoint that accepts Sentry envelopes for forwarding. This can be used to force data through a custom server independent of the type of data."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.tunnel"})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"onfatalerror",children:"onFatalError()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"onFatalError"}),"(",(0,t.jsx)(n.code,{children:"error"}),"): ",(0,t.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Callback that is executed when a fatal global error occurs."}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"error"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Error"})})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"void"})}),"\n",(0,t.jsx)(n.h4,{id:"inherited-from",children:"Inherited from"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"SentryNodeOptions.onFatalError"})}),"\n",(0,t.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"node_modules/@sentry/node/types/types.d.ts:32"})]})}n.default=(0,r.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.a)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)},pageOpts:{filePath:"pages/reference/rockets/nestjs-logger/interfaces/LoggerSentryConfigInterface.mdx",route:"/reference/rockets/nestjs-logger/interfaces/LoggerSentryConfigInterface",title:"Interface: LoggerSentryConfigInterface",headings:i},pageNextRoute:"/reference/rockets/nestjs-logger/interfaces/LoggerSentryConfigInterface"})}},function(e){e.O(0,[92673,92888,49774,40179],function(){return e(e.s=72721)}),_N_E=e.O()}]);